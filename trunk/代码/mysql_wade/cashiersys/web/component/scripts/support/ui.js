(function(){if(typeof(window['System'])=='undefined'){ throw new Error('errot include "System.Event",need "System" basecode support!');}if(typeof(window['System'].DomHelper)=='undefined'){ throw new Error('errot include "System.Event",need "System.DomHelper" support!');}if(typeof(window['System'].Event)=='undefined'){ throw new Error('errot include "System.Controls",need "System.Event" support!');}System.UI={};System.UI.State={};System.UI.State.Provider = function(){    System.UI.State.Provider.superclass.constructor.call(this);        this.addEvents({        "statechange": true    });    this.state = {};    System.UI.State.Provider.superclass.constructor.call(this);};System.extend(System.UI.State.Provider, System.Event.Observable, {       get : function(name, defaultValue){        return typeof this.state[name] == "undefined" ?            defaultValue : this.state[name];    },      clear : function(name){        delete this.state[name];        this.fireEvent("statechange", this, name, null);    },     set : function(name, value){        this.state[name] = value;        this.fireEvent("statechange", this, name, value);    },       decodeValue : function(cookie){        var re = /^(a|n|d|b|s|o)\:(.*)$/;        var matches = re.exec(unescape(cookie));        if(!matches || !matches[1]) return;         var type = matches[1];        var v = matches[2];        switch(type){            case "n":                return parseFloat(v);            case "d":                return new Date(Date.parse(v));            case "b":                return (v == "1");            case "a":                var all = [];                var values = v.split("^");                for(var i = 0, len = values.length; i < len; i++){                    all.push(this.decodeValue(values[i]));                }                return all;           case "o":                var all = {};                var values = v.split("^");                for(var i = 0, len = values.length; i < len; i++){                    var kv = values[i].split("=");                    all[kv[0]] = this.decodeValue(kv[1]);                }                return all;           default:                return v;        }    },    encodeValue : function(v){        var enc;        if(typeof v == "number"){            enc = "n:" + v;        }else if(typeof v == "boolean"){            enc = "b:" + (v ? "1" : "0");        }else if(v instanceof Date){            enc = "d:" + v.toGMTString();        }else if(v instanceof Array){            var flat = "";            for(var i = 0, len = v.length; i < len; i++){                flat += this.encodeValue(v[i]);                if(i != len-1) flat += "^";            }            enc = "a:" + flat;        }else if(typeof v == "object"){            var flat = "";            for(var key in v){                if(typeof v[key] != "function"){                    flat += key + "=" + this.encodeValue(v[key]) + "^";                }            }            enc = "o:" + flat.substring(0, flat.length-1);        }else{            enc = "s:" + v;        }        return escape(enc);            }});System.UI.State.Manager = (function(){    var provider = new System.UI.State.Provider();        return {           setProvider : function(stateProvider){            provider = stateProvider;        },           get : function(key, defaultValue){            return provider.get(key, defaultValue);        },             set : function(key, value){            provider.set(key, value);        },              clear : function(key){            provider.clear(key);        },              getProvider : function(){            return provider;        }    };})();System.UI.Shadow = function(config){   System.apply(this, config); if(typeof this.mode != "string"){         this.mode = this.defaultMode;   } var o = this.offset, a = {h: 0};    switch(this.mode.toLowerCase()){  case "drop":           a.w = 0;         a.l = a.t = o;       break;         case "sides":           a.w = (o*2);           a.l = -o;        a.t = o;    break;    case "frame":            a.w = a.h = (o*2);           a.l = a.t = -o;        break;   };     this.adjusts = a;};System.UI.Shadow.prototype = {     offset: 4, defaultMode: "drop", show : function(target){  target = System.get(target);  if(!this.el){   this.el = System.UI.Shadow.Pool.pull();   if(this.el.dom.nextSibling != target.dom){    this.el.insertBefore(target);            }        }          this.el.setStyle("z-index", this.zIndex || parseInt(target.getStyle("z-index"), 10)-1);  if(System.UserAgent.ie){   this.el.dom.style.filter="progid:DXImageTransform.Microsoft.alpha(opacity=50) progid:DXImageTransform.Microsoft.Blur(pixelradius="+this.offset+")";        }          this.realign(              target.getLeft(true),   target.getTop(true),   target.getWidth(),   target.getHeight()    );        this.el.dom.style.display = "block"; },   isVisible : function(){  return this.el ? true : false;    },   realign : function(l, t, w, h){  if(!this.el){   return;  }         var a = this.adjusts, d = this.el.dom, s = d.style;  var iea = 0;      if(System.UserAgent.ie){   iea = -(this.offset);        }    s.left = (l+a.l+iea)+"px";  s.top = (t+a.t+iea)+"px";    var sw = (w+a.w), sh = (h+a.h), sws = sw +"px", shs = sh + "px";    if(s.width != sws || s.height != shs){   s.width = sws;   s.height = shs;   if(!System.UserAgent.ie){    var cn = d.childNodes;                var sww = Math.max(0, (sw-12))+"px";    cn[0].childNodes[1].style.width = sww;    cn[1].childNodes[1].style.width = sww;    cn[2].childNodes[1].style.width = sww;    cn[1].style.height = Math.max(0, (sh-12))+"px";   }    } }, hide : function(){  if(this.el){   this.el.dom.style.display = "none";   System.UI.Shadow.Pool.push(this.el);   delete this.el;  }   }, setZIndex : function(z){  this.zIndex = z;  if(this.el){   this.el.setStyle("z-index", z);  }  }};System.UI.Shadow.Pool = (function(){     var p = []; var markup = System.UserAgent.ie ?'<div class="x-ie-shadow"></div>' :'<div class="x-shadow"><div class="xst"><div class="xstl"></div><div class="xstc"></div><div class="xstr"></div></div><div class="xsc"><div class="xsml"></div><div class="xsmc"></div><div class="xsmr"></div></div><div class="xsb"><div class="xsbl"></div><div class="xsbc"></div><div class="xsbr"></div></div></div>';     return {  pull : function(){   var sh = p.shift();   if(!sh){    sh = System.get(System.DomHelper.insertHtml("beforeBegin", document.body.firstChild, markup));    sh.autoBoxAdjust = false;   }            return sh;        },      push : function(sh){      p.push(sh);     } };})();System.UI.dd={};System.UI.dd.DragDrop = function(id, sGroup, config) {    if (id) {        this.init(id, sGroup, config);    }};System.UI.dd.DragDrop.prototype = {      id: null,    config: null,    dragElId: null,    handleElId: null,    invalidHandleTypes: null,    invalidHandleIds: null,    invalidHandleClasses: null,    startPageX: 0,    startPageY: 0,    groups: null,    locked: false,    lock: function() { this.locked = true; },    unlock: function() { this.locked = false; },       isTarget: true,    padding: null,    _domRef: null,    __ygDragDrop: true,    constrainX: false,    constrainY: false,    minX: 0,    maxX: 0,    minY: 0,    maxY: 0,    maintainOffset: false,    xTicks: null,    yTicks: null,      primaryButtonOnly: true,       available: false,      hasOuterHandles: false,      b4StartDrag: function(x, y) { },      startDrag: function(x, y) {  },     b4Drag: function(e) { },       onDrag: function(e) {  },     onDragEnter: function(e, id) {  },     b4DragOver: function(e) { },      onDragOver: function(e, id) {  },     b4DragOut: function(e) { },     onDragOut: function(e, id) {  },     b4DragDrop: function(e) { },     onDragDrop: function(e, id) {  },     onInvalidDrop: function(e) {  },      b4EndDrag: function(e) { },    endDrag: function(e) {  },     b4MouseDown: function(e) {  },     onMouseDown: function(e) {  },    onMouseUp: function(e) {  },      onAvailable: function () { },      defaultPadding : {left:0, right:0, top:0, bottom:0},    constrainTo : function(constrainTo, pad, inContent){        if(typeof pad == "number"){            pad = {left: pad, right:pad, top:pad, bottom:pad};        }        pad = pad || this.defaultPadding;        var b = System.get(this.getEl()).getBox();        var ce = System.get(constrainTo);        var s = ce.getScroll();        var c, cd = ce.dom;        if(cd == document.body){            c = { x: s.left, y: s.top, width: System.DomHelper.getViewWidth(), height: System.DomHelper.getViewHeight()};        }else{            xy = ce.getXY();            c = {x : xy[0]+s.left, y: xy[1]+s.top, width: cd.clientWidth, height: cd.clientHeight};        }                var topSpace = b.y - c.y;        var leftSpace = b.x - c.x;        this.resetConstraints();        this.setXConstraint(leftSpace - (pad.left||0),                 c.width - leftSpace - b.width - (pad.right||0)         );        this.setYConstraint(topSpace - (pad.top||0),                 c.height - topSpace - b.height - (pad.bottom||0)         );    },      getEl: function() {        if (!this._domRef) {            this._domRef = System.DomHelper.getDom(this.id);        }        return this._domRef;    },       getDragEl: function() {        return System.DomHelper.getDom(this.dragElId);    },      init: function(id, sGroup, config) {        this.initTarget(id, sGroup, config);        System.EventManager.on(this.id, "mousedown", this.handleMouseDown, this);            },      initTarget: function(id, sGroup, config) {         this.config = config || {};            this.DDM = System.UI.dd.DDM;        this.groups = {};                if (typeof id !== "string") {            id = System.DomHelper.id(id);        }         this.id = id;        this.addToGroup((sGroup) ? sGroup : "default");        this.handleElId = id;          this.setDragElId(id);        this.invalidHandleTypes = { A: "A" };        this.invalidHandleIds = {};        this.invalidHandleClasses = [];        this.applyConfig();        this.handleOnAvailable();    },      applyConfig: function() {            this.padding           = this.config.padding || [0, 0, 0, 0];        this.isTarget          = (this.config.isTarget !== false);        this.maintainOffset    = (this.config.maintainOffset);        this.primaryButtonOnly = (this.config.primaryButtonOnly !== false);    },     handleOnAvailable: function() {        this.available = true;        this.resetConstraints();        this.onAvailable();    },     setPadding: function(iTop, iRight, iBot, iLeft) {               if (!iRight && 0 !== iRight) {            this.padding = [iTop, iTop, iTop, iTop];        } else if (!iBot && 0 !== iBot) {            this.padding = [iTop, iRight, iTop, iRight];        } else {            this.padding = [iTop, iRight, iBot, iLeft];        }    },    setInitPosition: function(diffX, diffY) {        var el = this.getEl();        if (!this.DDM.verifyEl(el)) {            return;        }        var dx = diffX || 0;        var dy = diffY || 0;        var p = System.DomHelper.getXY( el );        this.initPageX = p[0] - dx;        this.initPageY = p[1] - dy;        this.lastPageX = p[0];        this.lastPageY = p[1];        this.setStartPosition(p);    },     setStartPosition: function(pos) {        var p = pos || System.DomHelper.getXY( this.getEl() );        this.deltaSetXY = null;        this.startPageX = p[0];        this.startPageY = p[1];    },    addToGroup: function(sGroup) {        this.groups[sGroup] = true;        this.DDM.regDragDrop(this, sGroup);    },    removeFromGroup: function(sGroup) {        if (this.groups[sGroup]) {            delete this.groups[sGroup];        }        this.DDM.removeDDFromGroup(this, sGroup);    },       setDragElId: function(id) {        this.dragElId = id;    },      setHandleElId: function(id) {        if (typeof id !== "string") {            id = System.DomHelper.id(id);        }        this.handleElId = id;        this.DDM.regHandle(this.id, id);    },      setOuterHandleElId: function(id) {        if (typeof id !== "string") {            id = System.DomHelper.id(id);        }        System.EventManager.on(id, "mousedown",                this.handleMouseDown, this);        this.setHandleElId(id);        this.hasOuterHandles = true;    },       unreg: function() {        System.EventManager.un(this.id, "mousedown",                this.handleMouseDown);        this._domRef = null;        this.DDM._remove(this);    },     isLocked: function() {        return (this.DDM.isLocked() || this.locked);    },       handleMouseDown: function(e, oDD){        if (this.primaryButtonOnly && e.button != 0) {            return;        }        if (this.isLocked()) {            return;        }        this.DDM.refreshCache(this.groups);        var pt = new System.DomHelper.Point(System.EventHandler.getPageX(e), System.EventHandler.getPageY(e));        if (!this.hasOuterHandles && !this.DDM.isOverTarget(pt, this) )  {        } else {            if (this.clickValidator(e)) {                      this.setStartPosition();                this.b4MouseDown(e);                this.onMouseDown(e);                this.DDM.handleMouseDown(e, this);                this.DDM.stopEvent(e);            } else {                        }        }    },    clickValidator: function(e) {        var target = System.Event.Event.getTarget(e);        return ( this.isValidHandleChild(target) &&                    (this.id == this.handleElId ||                        this.DDM.handleWasClicked(target, this.id)) );    },       addInvalidHandleType: function(tagName) {        var type = tagName.toUpperCase();        this.invalidHandleTypes[type] = type;    },       addInvalidHandleId: function(id) {        if (typeof id !== "string") {            id = System.id(id);        }        this.invalidHandleIds[id] = id;    },       addInvalidHandleClass: function(cssClass) {        this.invalidHandleClasses.push(cssClass);    },      removeInvalidHandleType: function(tagName) {        var type = tagName.toUpperCase();             delete this.invalidHandleTypes[type];    },     removeInvalidHandleId: function(id) {        if (typeof id !== "string") {            id = System.DomHelper.id(id);        }        delete this.invalidHandleIds[id];    },      removeInvalidHandleClass: function(cssClass) {        for (var i=0, len=this.invalidHandleClasses.length; i<len; ++i) {            if (this.invalidHandleClasses[i] == cssClass) {                delete this.invalidHandleClasses[i];            }        }    },      isValidHandleChild: function(node) {        var valid = true;           var nodeName;        try {            nodeName = node.nodeName.toUpperCase();        } catch(e) {            nodeName = node.nodeName;        }        valid = valid && !this.invalidHandleTypes[nodeName];        valid = valid && !this.invalidHandleIds[node.id];        for (var i=0, len=this.invalidHandleClasses.length; valid && i<len; ++i) {            valid = !System.DomHelper.hasClass(node, this.invalidHandleClasses[i]);        }        return valid;    },      setXTicks: function(iStartX, iTickSize) {        this.xTicks = [];        this.xTickSize = iTickSize;        var tickMap = {};        for (var i = this.initPageX; i >= this.minX; i = i - iTickSize) {            if (!tickMap[i]) {                this.xTicks[this.xTicks.length] = i;                tickMap[i] = true;            }        }        for (i = this.initPageX; i <= this.maxX; i = i + iTickSize) {            if (!tickMap[i]) {                this.xTicks[this.xTicks.length] = i;                tickMap[i] = true;            }        }        this.xTicks.sort(this.DDM.numericSort) ;    },       setYTicks: function(iStartY, iTickSize) {        this.yTicks = [];        this.yTickSize = iTickSize;        var tickMap = {};                for (var i = this.initPageY; i >= this.minY; i = i - iTickSize) {            if (!tickMap[i]) {                this.yTicks[this.yTicks.length] = i;                tickMap[i] = true;            }        }        for (i = this.initPageY; i <= this.maxY; i = i + iTickSize) {            if (!tickMap[i]) {                this.yTicks[this.yTicks.length] = i;                tickMap[i] = true;            }        }        this.yTicks.sort(this.DDM.numericSort) ;    },      setXConstraint: function(iLeft, iRight, iTickSize) {        this.leftConstraint = iLeft;        this.rightConstraint = iRight;        this.minX = this.initPageX - iLeft;        this.maxX = this.initPageX + iRight;        if (iTickSize) { this.setXTicks(this.initPageX, iTickSize); }        this.constrainX = true;    },      clearConstraints: function() {        this.constrainX = false;        this.constrainY = false;        this.clearTicks();    },      clearTicks: function() {        this.xTicks = null;        this.yTicks = null;        this.xTickSize = 0;        this.yTickSize = 0;    },       setYConstraint: function(iUp, iDown, iTickSize) {        this.topConstraint = iUp;        this.bottomConstraint = iDown;        this.minY = this.initPageY - iUp;        this.maxY = this.initPageY + iDown;        if (iTickSize) { this.setYTicks(this.initPageY, iTickSize); }        this.constrainY = true;    },       resetConstraints: function() {             if (this.initPageX || this.initPageX === 0) {                   var dx = (this.maintainOffset) ? this.lastPageX - this.initPageX : 0;            var dy = (this.maintainOffset) ? this.lastPageY - this.initPageY : 0;            this.setInitPosition(dx, dy);         } else {            this.setInitPosition();        }        if (this.constrainX) {            this.setXConstraint( this.leftConstraint,                                 this.rightConstraint,                                 this.xTickSize        );        }        if (this.constrainY) {            this.setYConstraint( this.topConstraint,                                 this.bottomConstraint,                                 this.yTickSize         );        }    },    getTick: function(val, tickArray) {        if (!tickArray) {                                  return val;        } else if (tickArray[0] >= val) {             return tickArray[0];        } else {            for (var i=0, len=tickArray.length; i<len; ++i) {                var next = i + 1;                if (tickArray[next] && tickArray[next] >= val) {                    var diff1 = val - tickArray[i];                    var diff2 = tickArray[next] - val;                    return (diff2 > diff1) ? tickArray[i] : tickArray[next];                }            }                  return tickArray[tickArray.length - 1];        }    },        toString: function() {        return ("DragDrop " + this.id);    }};System.UI.dd.DragDropMgr ={    ids: {},       handleIds: {},        dragCurrent: null,       dragOvers: {},      deltaX: 0,       deltaY: 0,       preventDefault: true,      stopPropagation: true,      initalized: false,      locked: false,       init: function() {        this.initialized = true;    },      POINT: 0,      INTERSECT: 1,      mode: 0,      _execOnAll: function(sMethod, args) {        for (var i in this.ids) {            for (var j in this.ids[i]) {                var oDD = this.ids[i][j];                if (! this.isTypeOfDD(oDD)) {                    continue;                }                oDD[sMethod].apply(oDD, args);            }        }    },      _onLoad: function() {        this.init();        System.EventManager.on(document, "mouseup",   this.handleMouseUp, this, true);        System.EventManager.on(document, "mousemove", this.handleMouseMove, this, true);        System.EventManager.on(window,   "unload",    this._onUnload, this, true);        System.EventManager.on(window,   "resize",    this._onResize, this, true);           },       _onResize: function(e) {        this._execOnAll("resetConstraints", []);    },    lock: function() { this.locked = true; },    unlock: function() { this.locked = false; },    isLocked: function() { return this.locked; },     locationCache: {},     useCache: true,     clickPixelThresh: 3,     clickTimeThresh: 350,     dragThreshMet: false,     clickTimeout: null,     startX: 0,    startY: 0,    regDragDrop: function(oDD, sGroup) {        if (!this.initialized) { this.init(); }        if (!this.ids[sGroup]) {            this.ids[sGroup] = {};        }        this.ids[sGroup][oDD.id] = oDD;    },    removeDDFromGroup: function(oDD, sGroup) {        if (!this.ids[sGroup]) {            this.ids[sGroup] = {};        }        var obj = this.ids[sGroup];        if (obj && obj[oDD.id]) {            delete obj[oDD.id];        }    },      _remove: function(oDD) {        for (var g in oDD.groups) {            if (g && this.ids[g] && this.ids[g][oDD.id]) {                delete this.ids[g][oDD.id];            }        }        delete this.handleIds[oDD.id];    },     regHandle: function(sDDId, sHandleId) {        if (!this.handleIds[sDDId]) {            this.handleIds[sDDId] = {};        }        this.handleIds[sDDId][sHandleId] = sHandleId;    },       isDragDrop: function(id) {        return ( this.getDDById(id) ) ? true : false;    },     getRelated: function(p_oDD, bTargetsOnly) {        var oDDs = [];        for (var i in p_oDD.groups) {            for (j in this.ids[i]) {                var dd = this.ids[i][j];                if (! this.isTypeOfDD(dd)) {                    continue;                }                if (!bTargetsOnly || dd.isTarget) {                    oDDs[oDDs.length] = dd;                }            }        }        return oDDs;    },    isLegalTarget: function (oDD, oTargetDD) {        var targets = this.getRelated(oDD, true);        for (var i=0, len=targets.length;i<len;++i) {            if (targets[i].id == oTargetDD.id) {                return true;            }        }        return false;    },     isTypeOfDD: function (oDD) {        return (oDD && oDD.__ygDragDrop);    },        isHandle: function(sDDId, sHandleId) {        return ( this.handleIds[sDDId] &&                        this.handleIds[sDDId][sHandleId] );    },     getDDById: function(id) {        for (var i in this.ids) {            if (this.ids[i][id]) {                return this.ids[i][id];            }        }        return null;    },       handleMouseDown: function(e, oDD) {        this.currentTarget = System.Event.Event.getTarget(e);        this.dragCurrent = oDD;        var el = oDD.getEl();                      this.startX = System.EventHandler.getPageX(e);        this.startY = System.EventHandler.getPageY(e);        this.deltaX = this.startX - el.offsetLeft;        this.deltaY = this.startY - el.offsetTop;        this.dragThreshMet = false;        this.clickTimeout = setTimeout(                function() {                    var DDM = System.UI.dd.DDM;                    DDM.startDrag(DDM.startX, DDM.startY);                },                this.clickTimeThresh );    },     startDrag: function(x, y) {        clearTimeout(this.clickTimeout);        if (this.dragCurrent) {            this.dragCurrent.b4StartDrag(x, y);            this.dragCurrent.startDrag(x, y);        }        this.dragThreshMet = true;    },      handleMouseUp: function(e) {        if (! this.dragCurrent) {            return;        }        clearTimeout(this.clickTimeout);        if (this.dragThreshMet) {            this.fireEvents(e, true);        } else {        }        this.stopDrag(e);        this.stopEvent(e);    },     stopEvent: function(e){        if(this.stopPropagation) {            e.stopPropagation();        }        if (this.preventDefault) {            e.preventDefault();        }    },       stopDrag: function(e) {                if (this.dragCurrent) {            if (this.dragThreshMet) {                this.dragCurrent.b4EndDrag(e);                this.dragCurrent.endDrag(e);            }            this.dragCurrent.onMouseUp(e);        }        this.dragCurrent = null;        this.dragOvers = {};    },      handleMouseMove: function(e) {        if (! this.dragCurrent) {            return true;        }           if (System.UserAgent.ie && (e.button !== 0 && e.button !== 1 && e.button !== 2)) {            this.stopEvent(e);            return this.handleMouseUp(e);        }        if (!this.dragThreshMet) {            var diffX = Math.abs(this.startX - System.EventHandler.getPageX(e));            var diffY = Math.abs(this.startY - System.EventHandler.getPageY(e));            if (diffX > this.clickPixelThresh ||                        diffY > this.clickPixelThresh) {                this.startDrag(this.startX, this.startY);            }        }        if (this.dragThreshMet) {            this.dragCurrent.b4Drag(e);            this.dragCurrent.onDrag(e);            if(!this.dragCurrent.moveOnly){                this.fireEvents(e, false);            }        }        this.stopEvent(e);        return true;    },       fireEvents: function(e, isDrop) {        var dc = this.dragCurrent;                if (!dc || dc.isLocked()) {            return;        }        var x = System.EventHandler.getPageX(e);        var y = System.EventHandler.getPageY(e);        var pt = new System.DomHelper.Point(x,y);          var oldOvers = [];        var outEvts   = [];        var overEvts  = [];        var dropEvts  = [];        var enterEvts = [];              for (var i in this.dragOvers) {            var ddo = this.dragOvers[i];            if (! this.isTypeOfDD(ddo)) {                continue;            }            if (! this.isOverTarget(pt, ddo, this.mode)) {                outEvts.push( ddo );            }            oldOvers[i] = true;            delete this.dragOvers[i];        }        for (var sGroup in dc.groups) {            if ("string" != typeof sGroup) {                continue;            }            for (i in this.ids[sGroup]) {                var oDD = this.ids[sGroup][i];                if (! this.isTypeOfDD(oDD)) {                    continue;                }                if (oDD.isTarget && !oDD.isLocked() && oDD != dc) {                    if (this.isOverTarget(pt, oDD, this.mode)) {                                            if (isDrop) {                            dropEvts.push( oDD );                                       } else {                                  if (!oldOvers[oDD.id]) {                                enterEvts.push( oDD );                              } else {                                overEvts.push( oDD );                            }                            this.dragOvers[oDD.id] = oDD;                        }                    }                }            }        }        if (this.mode) {            if (outEvts.length) {                dc.b4DragOut(e, outEvts);                dc.onDragOut(e, outEvts);            }            if (enterEvts.length) {                dc.onDragEnter(e, enterEvts);            }            if (overEvts.length) {                dc.b4DragOver(e, overEvts);                dc.onDragOver(e, overEvts);            }            if (dropEvts.length) {                dc.b4DragDrop(e, dropEvts);                dc.onDragDrop(e, dropEvts);            }        } else {                     var len = 0;            for (i=0, len=outEvts.length; i<len; ++i) {                dc.b4DragOut(e, outEvts[i].id);                dc.onDragOut(e, outEvts[i].id);            }                      for (i=0,len=enterEvts.length; i<len; ++i) {                                dc.onDragEnter(e, enterEvts[i].id);            }                       for (i=0,len=overEvts.length; i<len; ++i) {                dc.b4DragOver(e, overEvts[i].id);                dc.onDragOver(e, overEvts[i].id);            }                      for (i=0, len=dropEvts.length; i<len; ++i) {                dc.b4DragDrop(e, dropEvts[i].id);                dc.onDragDrop(e, dropEvts[i].id);            }        }           if (isDrop && !dropEvts.length) {            dc.onInvalidDrop(e);        }    },     getBestMatch: function(dds) {        var winner = null;               var len = dds.length;        if (len == 1) {            winner = dds[0];        } else {                 for (var i=0; i<len; ++i) {                var dd = dds[i];                        if (dd.cursorIsOver) {                    winner = dd;                    break;                } else {                    if (!winner ||                        winner.overlap.getArea() < dd.overlap.getArea()) {                        winner = dd;                    }                }            }        }        return winner;    },     refreshCache: function(groups) {        for (var sGroup in groups) {            if ("string" != typeof sGroup) {                continue;            }            for (var i in this.ids[sGroup]) {                var oDD = this.ids[sGroup][i];                if (this.isTypeOfDD(oDD)) {                    var loc = this.getLocation(oDD);                    if (loc) {                        this.locationCache[oDD.id] = loc;                    } else {                        delete this.locationCache[oDD.id];                       }                }            }        }    },     verifyEl: function(el) {        try {            if (el) {                var parent = el.offsetParent;                if (parent) {                    return true;                }            }        } catch(e) {        }        return false;    },     getLocation: function(oDD) {        if (! this.isTypeOfDD(oDD)) {            return null;        }        var el = oDD.getEl(), pos, x1, x2, y1, y2, t, r, b, l;        try {            pos= System.DomHelper.getXY(el);        } catch (e) { }        if (!pos) {            return null;        }        x1 = pos[0];        x2 = x1 + el.offsetWidth;        y1 = pos[1];        y2 = y1 + el.offsetHeight;        t = y1 - oDD.padding[0];        r = x2 + oDD.padding[1];        b = y2 + oDD.padding[2];        l = x1 - oDD.padding[3];        return new System.DomHelper.Region( t, r, b, l );    },      isOverTarget: function(pt, oTarget, intersect) {             var loc = this.locationCache[oTarget.id];        if (!loc || !this.useCache) {            loc = this.getLocation(oTarget);            this.locationCache[oTarget.id] = loc;        }        if (!loc) {            return false;        }        oTarget.cursorIsOver = loc.contains( pt );                            var dc = this.dragCurrent;           if (!dc || !dc.getTargetCoord ||                (!intersect && !dc.constrainX && !dc.constrainY)) {            return oTarget.cursorIsOver;        }        oTarget.overlap = null;         var pos = dc.getTargetCoord(pt.x, pt.y);        var el = dc.getDragEl();         var curRegion = new System.DomHelper.Region( pos.y,                                               pos.x + el.offsetWidth,                                               pos.y + el.offsetHeight,                                               pos.x );        var overlap = curRegion.intersect(loc);        if (overlap) {              oTarget.overlap = overlap;            return (intersect) ? true : oTarget.cursorIsOver;        } else {            return false;        }    },     _onUnload: function(e, me) {        System.UI.dd.DragDropMgr.unregAll();    },     unregAll: function() {        if (this.dragCurrent) {            this.stopDrag();            this.dragCurrent = null;        }        this._execOnAll("unreg", []);        for (i in this.elementCache) {            delete this.elementCache[i];        }        this.elementCache = {};        this.ids = {};    },       elementCache: {},     getElWrapper: function(id) {        var oWrapper = this.elementCache[id];        if (!oWrapper || !oWrapper.el) {            oWrapper = this.elementCache[id] =                new this.ElementWrapper(System.DomHelper.getDom(id));        }        return oWrapper;    },      getElement: function(id) {        return System.DomHelper.getDom(id);    },    getCss: function(id) {        var el = System.DomHelper.getDom(id);        return (el) ? el.style : null;    },      ElementWrapper: function(el) {                      this.el = el || null;                        this.id = this.el && el.id;                       this.css = this.el && el.style;    },      getPosX: function(el) {        return System.DomHelper.getX(el);    },     getPosY: function(el) {        return System.DomHelper.getY(el);    },     swapNode: function(n1, n2) {        if (n1.swapNode) {            n1.swapNode(n2);        } else {            var p = n2.parentNode;            var s = n2.nextSibling;            if (s == n1) {                p.insertBefore(n1, n2);            } else if (n2 == n1.nextSibling) {                p.insertBefore(n2, n1);            } else {                n1.parentNode.replaceChild(n2, n1);                p.insertBefore(n1, s);            }        }    },     getScroll: function () {        var t, l, dde=document.documentElement, db=document.body;        if (dde && (dde.scrollTop || dde.scrollLeft)) {            t = dde.scrollTop;            l = dde.scrollLeft;        } else if (db) {            t = db.scrollTop;            l = db.scrollLeft;        } else {}        return { top: t, left: l };    },    getStyle: function(el, styleProp) {        return System.Domhelper.getStyle(el,styleProp);    },     getScrollTop: function () { return this.getScroll().top; },     getScrollLeft: function () { return this.getScroll().left; },     moveToEl: function (moveEl, targetEl) {        var aCoord = System.DomHelper.getXY(targetEl);        System.DomHelper.setXY(moveEl, aCoord);    },      numericSort: function(a, b) { return (a - b); },    _timeoutCount: 0,     _addListeners: function() {        var DDM = System.UI.dd.DDM;        if ( System.Event.Event && document ) {            DDM._onLoad();        } else {            if (DDM._timeoutCount > 2000) {            } else {                setTimeout(DDM._addListeners, 10);                if (document && document.body) {                    DDM._timeoutCount += 1;                }            }        }    },      handleWasClicked: function(node, id) {        if (this.isHandle(id, node.id)) {            return true;        } else {                     var p = node.parentNode;            while (p) {                if (this.isHandle(id, p.id)) {                    return true;                } else {                    p = p.parentNode;                }            }        }        return false;    }};System.UI.dd.DDM = System.UI.dd.DragDropMgr;System.UI.dd.DDM._addListeners();System.UI.dd.DD = function(id, sGroup, config) {    if (id) {        this.init(id, sGroup, config);    }};System.extend(System.UI.dd.DD, System.UI.dd.DragDrop, {      scroll: true,       autoOffset: function(iPageX, iPageY) {        var x = iPageX - this.startPageX;        var y = iPageY - this.startPageY;        this.setDelta(x, y);    },      setDelta: function(iDeltaX, iDeltaY) {        this.deltaX = iDeltaX;        this.deltaY = iDeltaY;    },    setDragElPos: function(iPageX, iPageY) {        var el = this.getDragEl();        this.alignElWithMouse(el, iPageX, iPageY);    },      alignElWithMouse: function(el, iPageX, iPageY) {        var oCoord = this.getTargetCoord(iPageX, iPageY);        var fly = el.dom ? el : System.fly(el);        if (!this.deltaSetXY) {            var aCoord = [oCoord.x, oCoord.y];            fly.setXY(aCoord);            var newLeft = fly.getLeft(true);            var newTop  = fly.getTop(true);            this.deltaSetXY = [ newLeft - oCoord.x, newTop - oCoord.y ];        } else {            fly.setLeftTop(oCoord.x + this.deltaSetXY[0], oCoord.y + this.deltaSetXY[1]);        }        this.cachePosition(oCoord.x, oCoord.y);        this.autoScroll(oCoord.x, oCoord.y, el.offsetHeight, el.offsetWidth);        return oCoord;    },    cachePosition: function(iPageX, iPageY) {        if (iPageX) {            this.lastPageX = iPageX;            this.lastPageY = iPageY;        } else {            var aCoord = System.DomHelper.getXY(this.getEl());            this.lastPageX = aCoord[0];            this.lastPageY = aCoord[1];        }    },    autoScroll: function(x, y, h, w) {        if (this.scroll) {             var clientH = System.DomHelper.getViewWidth();            var clientW = System.DomHelper.getViewHeight();                        var st = this.DDM.getScrollTop();            var sl = this.DDM.getScrollLeft();                         var bot = h + y;            var right = w + x;                        var toBot = (clientH + st - y - this.deltaY);            var toRight = (clientW + sl - x - this.deltaX);            var thresh = 40;              var scrAmt = (document.all) ? 80 : 30;              if ( bot > clientH && toBot < thresh ) {                window.scrollTo(sl, st + scrAmt);            }              if ( y < st && st > 0 && y - st < thresh ) {                window.scrollTo(sl, st - scrAmt);            }              if ( right > clientW && toRight < thresh ) {                window.scrollTo(sl + scrAmt, st);            }            if ( x < sl && sl > 0 && x - sl < thresh ) {                window.scrollTo(sl - scrAmt, st);            }        }    },       getTargetCoord: function(iPageX, iPageY) {        var x = iPageX - this.deltaX;        var y = iPageY - this.deltaY;        if (this.constrainX) {            if (x < this.minX) { x = this.minX; }            if (x > this.maxX) { x = this.maxX; }        }        if (this.constrainY) {            if (y < this.minY) { y = this.minY; }            if (y > this.maxY) { y = this.maxY; }        }        x = this.getTick(x, this.xTicks);        y = this.getTick(y, this.yTicks);        return {x:x, y:y};    },     applyConfig: function() {        System.UI.dd.DD.superclass.applyConfig.call(this);        this.scroll = (this.config.scroll !== false);    },    b4MouseDown: function(e) {                this.autoOffset(System.EventHandler.getPageX(e),                            System.EventHandler.getPageY(e));    },      b4Drag: function(e) {        this.setDragElPos(System.EventHandler.getPageX(e),                            System.EventHandler.getPageY(e));    },    toString: function() {        return ("DD " + this.id);    }});System.UI.dd.DDProxy = function(id, sGroup, config) {    if (id) {        this.init(id, sGroup, config);        this.initFrame();    }};System.UI.dd.DDProxy.dragElId = "system_ddfdiv";System.extend(System.UI.dd.DDProxy, System.UI.dd.DD, {     resizeFrame: true,      centerFrame: false,      createFrame: function() {        var self = this;        var body = document.body;        if (!body || !body.firstChild) {            setTimeout( function() { self.createFrame(); }, 50 );            return;        }        var div = this.getDragEl();        if (!div) {            div    = document.createElement("div");            div.id = this.dragElId;            var s  = div.style;            s.position   = "absolute";            s.visibility = "hidden";            s.cursor     = "move";            s.border     = "2px solid #aaa";            s.zIndex     = 999;                          body.insertBefore(div, body.firstChild);        }    },      initFrame: function() {        this.createFrame();    },    applyConfig: function() {        System.UI.dd.DDProxy.superclass.applyConfig.call(this);        this.resizeFrame = (this.config.resizeFrame !== false);        this.centerFrame = (this.config.centerFrame);        this.setDragElId(this.config.dragElId || System.UI.dd.DDProxy.dragElId);    },      showFrame: function(iPageX, iPageY) {        var el = this.getEl();        var dragEl = this.getDragEl();        var s = dragEl.style;        this._resizeProxy();        if (this.centerFrame) {            this.setDelta( Math.round(parseInt(s.width,  10)/2),                           Math.round(parseInt(s.height, 10)/2) );        }        this.setDragElPos(iPageX, iPageY);        System.fly(dragEl).show();    },      _resizeProxy: function() {        if (this.resizeFrame) {            var el = this.getEl();            System.fly(this.getDragEl()).setSize(el.offsetWidth, el.offsetHeight);        }    },     b4MouseDown: function(e) {        var x = System.EventHandler.getPageX(e);        var y = System.EventHandler.getPageY(e);        this.autoOffset(x, y);        this.setDragElPos(x, y);    },      b4StartDrag: function(x, y) {               this.showFrame(x, y);    },       b4EndDrag: function(e) {        System.fly(this.getDragEl()).hide();    },      endDrag: function(e) {        var lel = this.getEl();        var del = this.getDragEl();               del.style.visibility = "";        this.beforeMove();              lel.style.visibility = "hidden";        System.UI.dd.DDM.moveToEl(lel, del);        del.style.visibility = "hidden";        lel.style.visibility = "";        this.afterDrag();    },    beforeMove : function(){},    afterDrag : function(){},    toString: function() {        return ("DDProxy " + this.id);    }});System.UI.dd.DDTarget = function(id, sGroup, config) {    if (id) {        this.initTarget(id, sGroup, config);    }};System.extend(System.UI.dd.DDTarget, System.UI.dd.DragDrop, {    toString: function() {        return ("DDTarget " + this.id);    }});System.UI.dd.ScrollManager = (function(){    var ddm = System.UI.dd.DragDropMgr;    var els = {};    var dragEl = null;    var proc = {};        var onStop = function(e){        dragEl = null;        clearProc();    };        var triggerRefresh = function(){        if(ddm.dragCurrent){             ddm.refreshCache(ddm.dragCurrent.groups);        }    };       var doScroll = function(){        if(ddm.dragCurrent){            var dds = System.UI.dd.ScrollManager;            if(!dds.animate){                if(proc.el.scroll(proc.dir, dds.increment)){                    triggerRefresh();                }            }else{                proc.el.scroll(proc.dir, dds.increment, true, dds.animDuration, triggerRefresh);            }        }    };       var clearProc = function(){        if(proc.id){            clearInterval(proc.id);        }        proc.id = 0;        proc.el = null;        proc.dir = "";    };       var startProc = function(el, dir){        clearProc();        proc.el = el;        proc.dir = dir;        proc.id = setInterval(doScroll, System.UI.dd.ScrollManager.frequency);    };      var onFire = function(e, isDrop){        if(isDrop || !ddm.dragCurrent){ return; }        var dds = System.UI.dd.ScrollManager;        if(!dragEl || dragEl != ddm.dragCurrent){            dragEl = ddm.dragCurrent;                  dds.refreshCache();        }                var xy = System.Event.Event.getXY(e);        var pt = new System.DomHelper.Point(xy[0], xy[1]);        for(var id in els){            var el = els[id], r = el._region;            if(!el.dom || !el.nodeType)return;            if(r.contains(pt) && el.isScrollable()){                if(r.bottom - pt.y <= dds.thresh){                    if(proc.el != el){                        startProc(el, "down");                    }                    return;                }else if(r.right - pt.x <= dds.thresh){                    if(proc.el != el){                        startProc(el, "left");                    }                    return;                }else if(pt.y - r.top <= dds.thresh){                    if(proc.el != el){                        startProc(el, "up");                    }                    return;                }else if(pt.x - r.left <= dds.thresh){                    if(proc.el != el){                        startProc(el, "right");                    }                    return;                }            }        }        clearProc();    };        ddm.fireEvents = ddm.fireEvents.createSequence(onFire, ddm);    ddm.stopDrag = ddm.stopDrag.createSequence(onStop, ddm);        return {        register : function(el){            if(el instanceof Array){                for(var i = 0, len = el.length; i < len; i++) {                 this.register(el[i]);                }            }else{                el = System.get(el);                els[el.id] = el;            }        },           unregister : function(el){            if(el instanceof Array){                for(var i = 0, len = el.length; i < len; i++) {                 this.unregister(el[i]);                }            }else{                el = System.get(el);                delete els[el.id];            }        },          thresh : 25,            increment : 100,             frequency : 500,         animate: true,          animDuration: .4,          refreshCache : function(){            for(var id in els){                if(typeof els[id] == 'object'){                     els[id]._region = els[id].getRegion();                }            }        }    };})();System.UI.dd.Registry = (function(){    var elements = {};     var handles = {};     var autoIdSeed = 0;    var getId = function(el, autogen){        if(typeof el == "string"){            return el;        }        var id = el.id;        if(!id && autogen !== false){            id = "extdd-" + (++autoIdSeed);            el.id = id;        }        return id;    };        return {        register : function(el, data){            data = data || {};            if(typeof el == "string"){                el = document.getElementById(el);            }            data.ddel = el;            elements[getId(el)] = data;            if(data.isHandle !== false){                handles[data.ddel.id] = data;            }            if(data.handles){                var hs = data.handles;                for(var i = 0, len = hs.length; i < len; i++){                 handles[getId(hs[i])] = data;                }            }        },        unregister : function(el){            var id = getId(el, false);            var data = elements[id];            if(data){                delete elements[id];                if(data.handles){                    var hs = data.handles;                    for(var i = 0, len = hs.length; i < len; i++){                     delete handles[getId(hs[i], false)];                    }                }            }        },        getHandle : function(id){            if(typeof id != "string"){                 id = id.id;            }            return handles[id];        },        getHandleFromEvent : function(e){            var t = System.Event.Event.getTarget(e);            return t ? handles[t.id] : null;        },        getTarget : function(id){            if(typeof id != "string"){                 id = id.id;            }            return elements[id];        },        getTargetFromEvent : function(e){            var t = System.Event.Event.getTarget(e);            return t ? elements[t.id] || handles[t.id] : null;        }    };})();System.UI.dd.StatusProxy = function(config){    System.apply(this, config);    this.id = this.id || System.DomHelper.id();    this.el = new System.UI.Components.Layer({        dh: {            id: this.id, tag: "div", cls: "x-dd-drag-proxy "+this.dropNotAllowed, children: [                {tag: "div", cls: "x-dd-drop-icon"},                {tag: "div", cls: "x-dd-drag-ghost"}            ]        },         shadow: !config || config.shadow !== false    });    this.ghost =System.get(this.el.dom.childNodes[1]);    this.dropStatus = this.dropNotAllowed;};System.UI.dd.StatusProxy.prototype = {      dropAllowed : "x-dd-drop-ok",    dropNotAllowed : "x-dd-drop-nodrop",     setStatus : function(cssClass){        cssClass = cssClass || this.dropNotAllowed;        if(this.dropStatus != cssClass){            this.el.replaceClass(this.dropStatus, cssClass);            this.dropStatus = cssClass;        }    },      reset : function(clearGhost){        this.el.dom.className = "x-dd-drag-proxy " + this.dropNotAllowed;        this.dropStatus = this.dropNotAllowed;        if(clearGhost){            this.ghost.update("");        }    },     update : function(html){        if(typeof html == "string"){            this.ghost.update(html);        }else{            this.ghost.update("");            html.style.margin = "0";            this.ghost.dom.appendChild(html);        }            },    getEl : function(){        return this.el;    },     getGhost : function(){        return this.ghost;    },    hide : function(clear){        this.el.hide();        if(clear){            this.reset(true);        }    },      stop : function(){        if(this.anim && this.anim.isAnimated && this.anim.isAnimated()){            this.anim.stop();        }    },    show : function(){        this.el.show();    },     sync : function(){        this.el.sync();    },    repair : function(xy, callback, scope){        this.callback = callback;        this.scope = scope;        if(xy && this.animRepair !== false){            this.el.addClass("x-dd-drag-repair");            this.el.hideUnders(true);            this.anim = this.el.shift({                duration: this.repairDuration || .5,                easing: 'easeOut',                xy: xy,                stopFx: true,                callback: this.afterRepair,                scope: this            });        }else{            this.afterRepair();        }    },    afterRepair : function(){        this.hide(true);        if(typeof this.callback == "function"){            this.callback.call(this.scope || this);        }        this.callback == null;        this.scope == null;    }};System.UI.dd.DragSource = function(el, config){    this.el = System.get(el);    this.dragData = {};    System.apply(this, config);     if(!this.proxy){        this.proxy = new System.UI.dd.StatusProxy();    }    this.el.addListener("mouseup", this.handleMouseUp);    System.UI.dd.DragSource.superclass.constructor.call(this, this.el.dom, this.ddGroup || this.group,           {dragElId : this.proxy.id, resizeFrame: false, isTarget: false, scroll: this.scroll === true});      this.dragging = false;};System.extend(System.UI.dd.DragSource, System.UI.dd.DDProxy, {     dropAllowed : "x-dd-drop-ok",        dropNotAllowed : "x-dd-drop-nodrop",    getDragData : function(e){        return this.dragData;    },    onDragEnter : function(e, id){        var target = System.UI.dd.DragDropMgr.getDDById(id);        this.cachedTarget = target;        if(this.beforeDragEnter(target, e, id) !== false){            if(target.isNotifyTarget){                var status = target.notifyEnter(this, e, this.dragData);                this.proxy.setStatus(status);            }else{                this.proxy.setStatus(this.dropAllowed);            }            if(this.afterDragEnter){                this.afterDragEnter(target, e, id);            }        }    },    beforeDragEnter : function(target, e, id){        return true;    },     alignElWithMouse: function() {        System.UI.dd.DragSource.superclass.alignElWithMouse.apply(this, arguments);        this.proxy.sync();    },    onDragOver : function(e, id){        var target = this.cachedTarget || System.UI.dd.DragDropMgr.getDDById(id);        if(this.beforeDragOver(target, e, id) !== false){            if(target.isNotifyTarget){                var status = target.notifyOver(this, e, this.dragData);                this.proxy.setStatus(status);            }            if(this.afterDragOver){                 this.afterDragOver(target, e, id);            }        }    },    beforeDragOver : function(target, e, id){        return true;    },    onDragOut : function(e, id){        var target = this.cachedTarget || System.UI.dd.DragDropMgr.getDDById(id);        if(this.beforeDragOut(target, e, id) !== false){            if(target.isNotifyTarget){                target.notifyOut(this, e, this.dragData);            }            this.proxy.reset();            if(this.afterDragOut){                  this.afterDragOut(target, e, id);            }        }        this.cachedTarget = null;    },     beforeDragOut : function(target, e, id){        return true;    },    onDragDrop : function(e, id){        var target = this.cachedTarget || System.UI.dd.DragDropMgr.getDDById(id);        if(this.beforeDragDrop(target, e, id) !== false){            if(target.isNotifyTarget){                if(target.notifyDrop(this, e, this.dragData)){                     this.onValidDrop(target, e, id);                }else{                    this.onInvalidDrop(target, e, id);                }            }else{                this.onValidDrop(target, e, id);            }                if(this.afterDragDrop){                     this.afterDragDrop(target, e, id);            }        }    },      beforeDragDrop : function(target, e, id){        return true;    },     onValidDrop : function(target, e, id){        this.hideProxy();    },    getRepairXY : function(e, data){        return this.el.getXY();      },      onInvalidDrop : function(target, e, id){        this.beforeInvalidDrop(target, e, id);        if(this.cachedTarget){            if(this.cachedTarget.isNotifyTarget){                this.cachedTarget.notifyOut(this, e, this.dragData);            }            this.cacheTarget = null;        }        this.proxy.repair(this.getRepairXY(e, this.dragData), this.afterRepair, this);        if(this.afterInvalidDrop){             this.afterInvalidDrop(e, id);        }    },      afterRepair : function(){        if(System.enableFx){            this.el.highlight(this.hlColor || "c3daf9");        }        this.dragging = false;    },    beforeInvalidDrop : function(target, e, id){        return true;    },    handleMouseDown : function(e){        if(this.dragging) {            return;        }                              var data = this.getDragData(e);        if(data && this.onBeforeDrag(data, e) !== false){            this.dragData = data;            this.proxy.stop();            System.UI.dd.DragSource.superclass.handleMouseDown.apply(this, arguments);        }     },     handleMouseUp : function(e){                            },     onBeforeDrag : function(data, e){        return true;    },     onStartDrag : function(){},    startDrag : function(x, y){        this.proxy.reset();        this.dragging = true;        this.proxy.update("");        this.onInitDrag(x, y);        this.proxy.show();    },    onInitDrag : function(x, y){        var clone = this.el.dom.cloneNode(true);        clone.id = System.DomHelper.id();         this.proxy.update(clone);        this.onStartDrag(x, y);        return true;    },    getProxy : function(){        return this.proxy;      },     hideProxy : function(){        this.proxy.hide();          this.proxy.reset(true);        this.dragging = false;    },     triggerCacheRefresh : function(){        System.UI.dd.DDM.refreshCache(this.groups);    },     b4EndDrag: function(e) {},      endDrag : function(e){        this.onEndDrag(this.dragData, e);    },     onEndDrag : function(data, e){},     autoOffset : function(x, y) {        this.setDelta(-12, -20);    }    });System.UI.dd.DropTarget = function(el, config){    this.el = System.get(el);    System.apply(this, config);    if(this.containerScroll){        System.UI.dd.ScrollManager.register(this.el);    }    System.UI.dd.DropTarget.superclass.constructor.call(this, this.el.dom, this.ddGroup || this.group,           {isTarget: true});};System.extend(System.UI.dd.DropTarget, System.UI.dd.DDTarget, {    dropAllowed : "x-dd-drop-ok",    dropNotAllowed : "x-dd-drop-nodrop",    isTarget : true,     isNotifyTarget : true,     notifyEnter : function(dd, e, data){        if(this.overClass){            this.el.addClass(this.overClass);        }        return this.dropAllowed;    },      notifyOver : function(dd, e, data){        return this.dropAllowed;    },     notifyOut : function(dd, e, data){        if(this.overClass){            this.el.removeClass(this.overClass);        }    },    notifyDrop : function(dd, e, data){        return false;    }});System.UI.dd.DragZone = function(el, config){    System.UI.dd.DragZone.superclass.constructor.call(this, el, config);    if(this.containerScroll){        System.UI.dd.ScrollManager.register(this.el);    }};System.extend(System.UI.dd.DragZone, System.UI.dd.DragSource, {      getDragData : function(e){        return System.UI.dd.Registry.getHandleFromEvent(e);    },     onInitDrag : function(x, y){        this.proxy.update(this.dragData.ddel.cloneNode(true));        this.onStartDrag(x, y);        return true;    },     afterRepair : function(){        if(System.enableFx){            System.fly(this.dragData.ddel).highlight(this.hlColor || "c3daf9");        }        this.dragging = false;    },     getRepairXY : function(e){        return System.fly(this.dragData.ddel).getXY();      }});System.UI.dd.DropZone = function(el, config){    System.UI.dd.DropZone.superclass.constructor.call(this, el, config);};System.extend(System.UI.dd.DropZone, System.UI.dd.DropTarget, {      getTargetFromEvent : function(e){        return System.UI.dd.Registry.getTargetFromEvent(e);    },      onNodeEnter : function(n, dd, e, data){},     onNodeOver : function(n, dd, e, data){        return this.dropAllowed;    },    onNodeOut : function(n, dd, e, data){},     onNodeDrop : function(n, dd, e, data){        return false;    },     onContainerOver : function(dd, e, data){        return this.dropNotAllowed;    },     onContainerDrop : function(dd, e, data){        return false;    },     notifyEnter : function(dd, e, data){        return this.dropNotAllowed;    },     notifyOver : function(dd, e, data){        var n = this.getTargetFromEvent(e);        if(!n){             if(this.lastOverNode){                this.onNodeOut(this.lastOverNode, dd, e, data);                this.lastOverNode = null;            }            return this.onContainerOver(dd, e, data);        }        if(this.lastOverNode != n){            if(this.lastOverNode){                this.onNodeOut(this.lastOverNode, dd, e, data);            }            this.onNodeEnter(n, dd, e, data);            this.lastOverNode = n;        }        return this.onNodeOver(n, dd, e, data);    },    notifyOut : function(dd, e, data){        if(this.lastOverNode){            this.onNodeOut(this.lastOverNode, dd, e, data);            this.lastOverNode = null;        }    },     notifyDrop : function(dd, e, data){        if(this.lastOverNode){            this.onNodeOut(this.lastOverNode, dd, e, data);            this.lastOverNode = null;        }        var n = this.getTargetFromEvent(e);        return n ?            this.onNodeDrop(n, dd, e, data) :            this.onContainerDrop(dd, e, data);    },     triggerCacheRefresh : function(){        System.UI.dd.DDM.refreshCache(this.groups);    }  });System.UI.Resizable = function(el, config){    this.el = System.get(el);        if(config && config.wrap){        config.resizeChild = this.el;        this.el = this.el.wrap(typeof config.wrap == "object" ? config.wrap : {cls:"xresizable-wrap"});        this.el.id = this.el.dom.id = config.resizeChild.id + "-rzwrap";        this.el.setStyle("overflow", "hidden");        this.el.setPositioning(config.resizeChild.getPositioning());        config.resizeChild.clearPositioning();        if(!config.width || !config.height){            var csize = config.resizeChild.getSize();            this.el.setSize(csize.width, csize.height);        }        if(config.pinned && !config.adjustments){            config.adjustments = "auto";        }    }    this.proxy = this.el.createProxy({tag: "div", cls: "x-resizable-proxy", id: this.el.id + "-rzproxy"});    this.proxy.unselectable();    this.proxy.enableDisplayMode('block');    System.apply(this, config);        if(this.pinned){        this.disableTrackOver = true;        this.el.addClass("x-resizable-pinned");    }    var position = this.el.getStyle("position");    if(position != "absolute" && position != "fixed"){        this.el.setStyle("position", "relative");    }    if(!this.handles){         this.handles = 's,e,se';        if(this.multiDirectional){            this.handles += ',n,w';        }    }    if(this.handles == "all"){        this.handles = "n s e w ne nw se sw";    }    var hs = this.handles.split(/\s*?[,;]\s*?| /);    var ps = System.UI.Resizable.positions;    for(var i = 0, len = hs.length; i < len; i++){        if(hs[i] && ps[hs[i]]){            var pos = ps[hs[i]];            this[pos] = new System.UI.Resizable.Handle(this, pos, this.disableTrackOver, this.transparent);        }    }        this.corner = this.southeast;        if(this.handles.indexOf("n") != -1 || this.handles.indexOf("w") != -1){        this.updateBox = true;    }          this.activeHandle = null;        if(this.resizeChild){        if(typeof this.resizeChild == "boolean"){            this.resizeChild = System.get(this.el.dom.firstChild, true);        }else{            this.resizeChild = System.get(this.resizeChild, true);        }    }        if(this.adjustments == "auto"){        var rc = this.resizeChild;        var hw = this.west, he = this.east, hn = this.north, hs = this.south;        if(rc && (hw || hn)){            rc.position("relative");            rc.setLeft(hw ? hw.el.getWidth() : 0);            rc.setTop(hn ? hn.el.getHeight() : 0);        }        this.adjustments = [            (he ? -he.el.getWidth() : 0) + (hw ? -hw.el.getWidth() : 0),            (hn ? -hn.el.getHeight() : 0) + (hs ? -hs.el.getHeight() : 0) -1         ];    }        if(this.draggable){        this.dd = this.dynamic ?             this.el.initDD(null) : this.el.initDDProxy(null, {dragElId: this.proxy.id});        this.dd.setHandleElId(this.resizeChild ? this.resizeChild.id : this.el.id);    }            this.addEvents({                "beforeresize" : true,                "resize" : true    });        if(this.width !== null && this.height !== null){        this.resizeTo(this.width, this.height);    }else{        this.updateChildSize();    }    if(System.UserAgent.ie){        this.el.dom.style.zoom = 1;    } System.UI.Resizable.superclass.constructor.call(this);};System.extend(System.UI.Resizable, System.Event.Observable, {    resizeChild : false,    adjustments : [0, 0],    minWidth : 5,    minHeight : 5,    maxWidth : 10000,    maxHeight : 10000,    enabled : true,    animate : false,    duration : .35,    dynamic : false,    handles : false,    multiDirectional : false,    disableTrackOver : false,    easing : 'easeOutStrong',    widthIncrement : 0,    heightIncrement : 0,    pinned : false,    width : null,    height : null,    preserveRatio : false,    transparent: false,    minX: 0,    minY: 0,    draggable: false,       resizeTo : function(width, height){        this.el.setSize(width, height);        this.updateChildSize();        this.fireEvent("resize", this, width, height, null);    },    startSizing : function(e, handle){        this.fireEvent("beforeresize", this, e);        if(this.enabled){             if(!this.overlay){                this.overlay = this.el.createProxy({tag: "div", cls: "x-resizable-overlay", html: "&#160;"});                this.overlay.unselectable();                this.overlay.enableDisplayMode("block");                this.overlay.on("mousemove", this.onMouseMove, this);                this.overlay.on("mouseup", this.onMouseUp, this);            }            this.overlay.setStyle("cursor", handle.el.getStyle("cursor"));            this.resizing = true;            this.startBox = this.el.getBox();            this.startPoint = e.getXY();            this.offsets = [(this.startBox.x + this.startBox.width) - this.startPoint[0],                            (this.startBox.y + this.startBox.height) - this.startPoint[1]];            this.overlay.setSize(System.DomHelper.getViewWidth(true), System.DomHelper.getViewHeight(true));            this.overlay.show();            this.proxy.setStyle('visibility', 'hidden');             this.proxy.show();            this.proxy.setBox(this.startBox);            if(!this.dynamic){                this.proxy.setStyle('visibility', 'visible');            }        }    },     onMouseDown : function(handle, e){        if(this.enabled){            e.stopEvent();            this.activeHandle = handle;            this.startSizing(e, handle);        }              },    onMouseUp : function(e){        var size = this.resizeElement();        this.resizing = false;        this.handleOut();        this.overlay.hide();        this.fireEvent("resize", this, size.width, size.height, e);    },    updateChildSize : function(){        if(this.resizeChild){            var el = this.el;            var child = this.resizeChild;            var adj = this.adjustments;            if(el.dom.offsetWidth){                var b = el.getSize(true);                child.setSize(b.width+adj[0], b.height+adj[1]);            }            if(System.UserAgent.ie){                setTimeout(function(){                    if(el.dom.offsetWidth){                        var b = el.getSize(true);                        child.setSize(b.width+adj[0], b.height+adj[1]);                    }                }, 10);            }        }    },    snap : function(value, inc, min){        if(!inc || !value) return value;        var newValue = value;        var m = value % inc;        if(m > 0){            if(m > (inc/2)){                newValue = value + (inc-m);            }else{                newValue = value - m;            }        }        return Math.max(min, newValue);    },    resizeElement : function(){        var box = this.proxy.getBox();        if(this.updateBox){            this.el.setBox(box, false, this.animate, this.duration, null, this.easing);        }else{            this.el.setSize(box.width, box.height, this.animate, this.duration, null, this.easing);        }        this.updateChildSize();        this.proxy.hide();        return box;    },    constrain : function(v, diff, m, mx){        if(v - diff < m){            diff = v - m;            }else if(v - diff > mx){            diff = mx - v;         }        return diff;                    },    onMouseMove : function(e){        if(this.enabled){            try{                                    var curSize = this.curSize || this.startBox;            var x = this.startBox.x, y = this.startBox.y;            var ox = x, oy = y;            var w = curSize.width, h = curSize.height;            var ow = w, oh = h;            var mw = this.minWidth, mh = this.minHeight;            var mxw = this.maxWidth, mxh = this.maxHeight;            var wi = this.widthIncrement;            var hi = this.heightIncrement;                        var eventXY = e.getXY();            var diffX = -(this.startPoint[0] - Math.max(this.minX, eventXY[0]));            var diffY = -(this.startPoint[1] - Math.max(this.minY, eventXY[1]));                        var pos = this.activeHandle.position;                        switch(pos){                case "east":                    w += diffX;                     w = Math.min(Math.max(mw, w), mxw);                    break;                case "south":                    h += diffY;                    h = Math.min(Math.max(mh, h), mxh);                    break;                case "southeast":                    w += diffX;                     h += diffY;                    w = Math.min(Math.max(mw, w), mxw);                    h = Math.min(Math.max(mh, h), mxh);                    break;                case "north":                    diffY = this.constrain(h, diffY, mh, mxh);                    y += diffY;                    h -= diffY;                    break;                case "west":                    diffX = this.constrain(w, diffX, mw, mxw);                    x += diffX;                    w -= diffX;                    break;                case "northeast":                    w += diffX;                     w = Math.min(Math.max(mw, w), mxw);                    diffY = this.constrain(h, diffY, mh, mxh);                    y += diffY;                    h -= diffY;                    break;                case "northwest":                    diffX = this.constrain(w, diffX, mw, mxw);                    diffY = this.constrain(h, diffY, mh, mxh);                    y += diffY;                    h -= diffY;                    x += diffX;                    w -= diffX;                    break;               case "southwest":                    diffX = this.constrain(w, diffX, mw, mxw);                    h += diffY;                    h = Math.min(Math.max(mh, h), mxh);                    x += diffX;                    w -= diffX;                    break;            }                        var sw = this.snap(w, wi, mw);            var sh = this.snap(h, hi, mh);            if(sw != w || sh != h){                switch(pos){                    case "northeast":                        y -= sh - h;                    break;                    case "north":                        y -= sh - h;                        break;                    case "southwest":                        x -= sw - w;                    break;                    case "west":                        x -= sw - w;                        break;                    case "northwest":                        x -= sw - w;                        y -= sh - h;                    break;                }                w = sw;                h = sh;            }                        if(this.preserveRatio){                switch(pos){                    case "southeast":                    case "east":                        h = oh * (w/ow);                        h = Math.min(Math.max(mh, h), mxh);                        w = ow * (h/oh);                       break;                    case "south":                        w = ow * (h/oh);                        w = Math.min(Math.max(mw, w), mxw);                        h = oh * (w/ow);                        break;                    case "northeast":                        w = ow * (h/oh);                        w = Math.min(Math.max(mw, w), mxw);                        h = oh * (w/ow);                    break;                    case "north":                        var tw = w;                        w = ow * (h/oh);                        w = Math.min(Math.max(mw, w), mxw);                        h = oh * (w/ow);                        x += (tw - w) / 2;                        break;                    case "southwest":                        h = oh * (w/ow);                        h = Math.min(Math.max(mh, h), mxh);                        var tw = w;                        w = ow * (h/oh);                        x += tw - w;                        break;                    case "west":                        var th = h;                        h = oh * (w/ow);                        h = Math.min(Math.max(mh, h), mxh);                        y += (th - h) / 2;                        var tw = w;                        w = ow * (h/oh);                        x += tw - w;                       break;                    case "northwest":                        var tw = w;                        var th = h;                        h = oh * (w/ow);                        h = Math.min(Math.max(mh, h), mxh);                        w = ow * (h/oh);                        y += th - h;                         x += tw - w;                       break;                                        }            }            this.proxy.setBounds(x, y, w, h);            if(this.dynamic){                this.resizeElement();            }            }catch(e){}        }    },    handleOver : function(){        if(this.enabled){            this.el.addClass("x-resizable-over");        }    },    handleOut : function(){        if(!this.resizing){            this.el.removeClass("x-resizable-over");        }    },        getEl : function(){        return this.el;    },    getResizeChild : function(){        return this.resizeChild;    },     destroy : function(removeEl){        this.proxy.remove();        if(typeof(this.overlay)!='undefined'){            this.overlay.removeAllListeners();            this.overlay.remove();        }        var ps = System.UI.Resizable.positions;        for(var k in ps){            if(typeof ps[k] != "function" && this[ps[k]]){                var h = this[ps[k]];                h.el.removeAllListeners();                h.el.remove();            }        }        if(removeEl){            this.el.update("");            this.el.remove();        }    }});System.UI.Resizable.positions = {    n: "north", s: "south", e: "east", w: "west", se: "southeast", sw: "southwest", nw: "northwest", ne: "northeast"};System.UI.Resizable.Handle = function(rz, pos, disableTrackOver, transparent){    if(!this.tpl){        var tpl = System.DomHelper.createTemplate(            {tag: "div", cls: "x-resizable-handle x-resizable-handle-{0}"}        );        tpl.compile();        System.UI.Resizable.Handle.prototype.tpl = tpl;    }    this.position = pos;    this.rz = rz;    this.el = this.tpl.append(rz.el.dom, [this.position], true);    this.el.unselectable();    if(transparent){        this.el.setOpacity(0);    }    this.el.on("mousedown", this.onMouseDown, this);    if(!disableTrackOver){        this.el.on("mouseover", this.onMouseOver, this);        this.el.on("mouseout", this.onMouseOut, this);    }};System.UI.Resizable.Handle.prototype = {    afterResize : function(rz){            },        onMouseDown : function(e){        this.rz.onMouseDown(this, e);    },        onMouseOver : function(e){        this.rz.handleOver(this, e);    },        onMouseOut : function(e){        this.rz.handleOut(this, e);    }  };System.UI.ClickRepeater = function(el, config){    this.el = System.get(el);    this.el.unselectable();        System.apply(this, config);        this.addEvents({          "mousedown" : true,        "click" : true,        "mouseup" : true    });    this.el.on("mousedown", this.handleMouseDown, this);    if(this.preventDefault || this.stopDefault){        this.el.on("click", function(e){            if(this.preventDefault){                e.preventDefault();            }            if(this.stopDefault){                e.stopEvent();            }        }, this);    }    if(this.handler){        this.on("click", this.handler,  this.scope || this);    }    System.UI.ClickRepeater.superclass.constructor.call(this);};System.extend(System.UI.ClickRepeater, System.Event.Observable, {    interval : 20,    delay: 250,    preventDefault : true,    stopDefault : false,    timer : 0,    docEl : System.get(document),        handleMouseDown : function(){        clearTimeout(this.timer);        this.el.blur();        if(this.pressClass){            this.el.addClass(this.pressClass);        }        this.mousedownTime = new Date();        this.docEl.on("mouseup", this.handleMouseUp, this);        this.el.on("mouseout", this.handleMouseOut, this);        this.fireEvent("mousedown", this);        this.fireEvent("click", this);                this.timer = this.click.defer(this.delay || this.interval, this);    },        click : function(){        this.fireEvent("click", this);        this.timer = this.click.defer(this.getInterval(), this);    },        getInterval: function(){        if(!this.accelerate){            return this.interval;        }        var pressTime = this.mousedownTime.getElapsed();        if(pressTime < 500){            return 400;        }else if(pressTime < 1700){            return 320;        }else if(pressTime < 2600){            return 250;        }else if(pressTime < 3500){            return 180;        }else if(pressTime < 4400){            return 140;        }else if(pressTime < 5300){            return 80;        }else if(pressTime < 6200){            return 50;        }else{            return 10;        }    },        handleMouseOut : function(){        clearTimeout(this.timer);        if(this.pressClass){            this.el.removeClass(this.pressClass);        }        this.el.on("mouseover", this.handleMouseReturn, this);    },        handleMouseReturn : function(){        this.el.un("mouseover", this.handleMouseReturn);        if(this.pressClass){            this.el.addClass(this.pressClass);        }        this.click();    },        handleMouseUp : function(){        clearTimeout(this.timer);        this.el.un("mouseover", this.handleMouseReturn);        this.el.un("mouseout", this.handleMouseOut);        this.docEl.un("mouseup", this.handleMouseUp);        this.el.removeClass(this.pressClass);        this.fireEvent("mouseup", this);    }});System.UI.ComponentMgr = (function(){    var all = new System.MixedCollection();    return {            register : function(c){            all.add(c);        },        unregister : function(c){            all.remove(c);        },        get : function(id){            return all.get(id);        },        onAvailable : function(id, fn, scope){            all.on("add", function(index, o){                if(o.id == id){                    fn.call(scope || o, o);                    all.un("add", fn, scope);                }            });        }    };})();System.UI.Component = function(config){    config = config || {};    if(config.tagName || config.dom || typeof config == "string"){             config = {el: config, id: config.id || config};    }    this.initialConfig = config;    System.apply(this, config);    this.addEvents({         disable : true,            enable : true,        beforeshow : true,        show : true,        beforehide : true,        hide : true,        beforerender : true,        render : true,        beforedestroy : true,        destroy : true    });    if(!this.id){        this.id = "sys-comp-" + (++System.UI.Component.AUTO_ID);    }    System.UI.ComponentMgr.register(this);    System.UI.Component.superclass.constructor.call(this);    this.initComponent();};System.UI.Component.AUTO_ID = 1000;System.extend(System.UI.Component, System.Event.Observable, {       hidden : false,    disabled : false,      disabledClass : "x-item-disabled",    rendered : false,    allowDomMove: true,    ctype : "System.UI.Component",    actionMode : "el",    getActionEl : function(){        return this[this.actionMode];    },    initComponent : function(){},           render : function(container, position){        if(!this.rendered && this.fireEvent("beforerender", this) !== false){            if(!container && this.el){                this.el = System.get(this.el);                container = this.el.dom.parentNode;                this.allowDomMove = false;            }            this.container = System.get(container);            this.rendered = true;            if(position !== undefined){                if(typeof position == 'number'){                    position = this.container.dom.childNodes[position];                }else{                    position = System.DomHelper.getDom(position);                }            }            this.onRender(this.container, position || null);            if(this.cls){                this.el.addClass(this.cls);                delete this.cls;            }            if(this.style){                this.el.applyStyles(this.style);                delete this.style;            }            this.fireEvent("render", this);            this.afterRender(this.container);            if(this.hidden){                this.hide();            }            if(this.disabled){                this.disable();            }        }        return this;    },    onRender : function(ct, position){        if(this.el){            this.el = System.get(this.el);            if(this.allowDomMove !== false){                ct.dom.insertBefore(this.el.dom, position);            }        }    },    getAutoCreate : function(){        var cfg = typeof this.autoCreate == "object" ?                      this.autoCreate : System.apply({}, this.defaultAutoCreate);        if(this.id && !cfg.id){            cfg.id = this.id;        }        return cfg;    },    afterRender : function(){},    destroy : function(){        if(this.fireEvent("beforedestroy", this) !== false){            this.purgeListeners();            this.beforeDestroy();            if(this.rendered){                this.el.removeAllListeners();                this.el.remove();                if(this.actionMode == "container"){                    this.container.remove();                }            }            this.onDestroy();            System.UI.ComponentMgr.unregister(this);            this.fireEvent("destroy", this);        }    },    beforeDestroy : function(){},    onDestroy : function(){},    getEl : function(){        return this.el;    },    getId : function(){        return this.id;    },     focus : function(selectText){        if(this.rendered){            this.el.focus();            if(selectText === true){                this.el.dom.select();            }        }        return this;    },    blur : function(){        if(this.rendered){            this.el.blur();        }        return this;    },     disable : function(){        if(this.rendered){            this.onDisable();        }        this.disabled = true;        this.fireEvent("disable", this);        return this;    },    onDisable : function(){        this.getActionEl().addClass(this.disabledClass);        this.el.dom.disabled = true;    },    enable : function(){        if(this.rendered){            this.onEnable();        }        this.disabled = false;        this.fireEvent("enable", this);        return this;    },    onEnable : function(){        this.getActionEl().removeClass(this.disabledClass);        this.el.dom.disabled = false;    },    setDisabled : function(disabled){        this[disabled ? "disable" : "enable"]();    },     show: function(){        if(this.fireEvent("beforeshow", this) !== false){            this.hidden = false;            if(this.rendered){                this.onShow();            }            this.fireEvent("show", this);        }        return this;    },    onShow : function(){        var st = this.getActionEl().dom.style;        st.display = "";        st.visibility = "visible";    },     hide: function(){        if(this.fireEvent("beforehide", this) !== false){            this.hidden = true;            if(this.rendered){                this.onHide();            }            this.fireEvent("hide", this);        }        return this;    },    onHide : function(){        this.getActionEl().dom.style.display = "none";    },    setVisible: function(visible){        if(visible) {            this.show();        }else{            this.hide();        }        return this;    },    isVisible : function(){        return this.getActionEl().isVisible();    },    cloneConfig : function(overrides){        overrides = overrides || {};        var id = overrides.id || System.DomHelper.id();        var cfg = System.applyIf(overrides, this.initialConfig);        cfg.id = id; return new this.__extcls(cfg);    }});System.UI.Components={};System.UI.Components.Layer = function(config, existingEl){    config = config || {};    var dh = System.DomHelper;    var cp = config.parentEl, pel = cp ? dh.getDom(cp) : document.body;    if(existingEl){        this.dom = dh.getDom(existingEl);    }    if(!this.dom){        var o = config.dh || {tag: "div", cls: "x-layer"};        this.dom = dh.append(pel, o);    }    if(config.cls){        this.addClass(config.cls);    }    this.constrain = config.constrain !== false;    this.visibilityMode = dh.Element.VISIBILITY;    if(config.id){        this.id = this.dom.id = config.id;    }else{        this.id = dh.id(this.dom);    }    this.zindex = config.zindex || this.getZIndex();    this.position("absolute", this.zindex);    if(config.shadow){        this.shadowOffset = config.shadowOffset || 4;        this.shadow = new System.UI.Shadow({            offset : this.shadowOffset,            mode : config.shadow        });    }else{        this.shadowOffset = 0;    }    this.useShim = config.shim !== false && System.useShims;    this.useDisplay = config.useDisplay;    this.hide();};var supr = System.DomHelper.Element.prototype;var shims = [];System.extend(System.UI.Components.Layer, System.DomHelper.Element, {    getZIndex : function(){        return this.zindex || parseInt(this.getStyle("z-index"), 10) || 11000;    },    getShim : function(){        if(!this.useShim){            return null;        }        if(this.shim){            return this.shim;        }        var shim = shims.shift();        if(!shim){            shim = this.createShim();            shim.enableDisplayMode('block');            shim.dom.style.display = 'none';            shim.dom.style.visibility = 'visible';        }        var pn = this.dom.parentNode;        if(shim.dom.parentNode != pn){            pn.insertBefore(shim.dom, this.dom);        }        shim.setStyle('z-index', this.getZIndex()-2);        this.shim = shim;        return shim;    },    hideShim : function(){        if(this.shim){            this.shim.setDisplayed(false);            shims.push(this.shim);            delete this.shim;        }    },    disableShadow : function(){        if(this.shadow){            this.shadowDisabled = true;            this.shadow.hide();            this.lastShadowOffset = this.shadowOffset;            this.shadowOffset = 0;        }    },    enableShadow : function(show){        if(this.shadow){            this.shadowDisabled = false;            this.shadowOffset = this.lastShadowOffset;            delete this.lastShadowOffset;            if(show){                this.sync(true);            }        }    },       sync : function(doShow){        var sw = this.shadow;        if(!this.updating && this.isVisible() && (sw || this.useShim)){            var sh = this.getShim();            var w = this.getWidth(),                h = this.getHeight();            var l = this.getLeft(true),                t = this.getTop(true);            if(sw && !this.shadowDisabled){                if(doShow && !sw.isVisible()){                    sw.show(this);                }else{                    sw.realign(l, t, w, h);                }                if(sh){                    if(doShow){                       sh.show();                    }                                        var a = sw.adjusts, s = sh.dom.style;                    s.left = (Math.min(l, l+a.l))+"px";                    s.top = (Math.min(t, t+a.t))+"px";                    s.width = (w+a.w)+"px";                    s.height = (h+a.h)+"px";                }            }else if(sh){                if(doShow){                   sh.show();                }                sh.setSize(w, h);                sh.setLeftTop(l, t);            }                    }    },    destroy : function(){        this.hideShim();        if(this.shadow){            this.shadow.hide();        }        this.removeAllListeners();        var pn = this.dom.parentNode;        if(pn){            pn.removeChild(this.dom);        }        System.DomHelper.Element.uncache(this.id);    },    remove : function(){        this.destroy();    },       beginUpdate : function(){        this.updating = true;    },      endUpdate : function(){        this.updating = false;        this.sync(true);    },        hideUnders : function(negOffset){        if(this.shadow){            this.shadow.hide();        }        this.hideShim();    },       constrainXY : function(){        if(this.constrain){            var vw = System.DomHelper.getViewWidth(),                vh = System.DomHelper.getViewHeight();            var s = System.get(document).getScroll();            var xy = this.getXY();            var x = xy[0], y = xy[1];               var w = this.dom.offsetWidth+this.shadowOffset, h = this.dom.offsetHeight+this.shadowOffset;                        var moved = false;                        if((x + w) > vw+s.left){                x = vw - w - this.shadowOffset;                moved = true;            }            if((y + h) > vh+s.top){                y = vh - h - this.shadowOffset;                moved = true;            }                        if(x < s.left){                x = s.left;                moved = true;            }            if(y < s.top){                y = s.top;                moved = true;            }            if(moved){                if(this.avoidY){                    var ay = this.avoidY;                    if(y <= ay && (y+h) >= ay){                        y = ay-h-5;                       }                }                xy = [x, y];                this.storeXY(xy);                supr.setXY.call(this, xy);                this.sync();            }        }    },    isVisible : function(){        return this.visible;        },      showAction : function(){        this.visible = true;         if(this.useDisplay === true){            this.setDisplayed("");        }else if(this.lastXY){            supr.setXY.call(this, this.lastXY);        }else if(this.lastLT){            supr.setLeftTop.call(this, this.lastLT[0], this.lastLT[1]);        }    },        hideAction : function(){        this.visible = false;        if(this.useDisplay === true){            this.setDisplayed(false);        }else{            this.setLeftTop(-10000,-10000);        }    },     setVisible : function(v, a, d, c, e){        if(v){            this.showAction();        }        if(a && v){            var cb = function(){                this.sync(true);                if(c){                    c();                }            }.createDelegate(this);            supr.setVisible.call(this, true, true, d, cb, e);        }else{            if(!v){                this.hideUnders(true);            }            var cb = c;            if(a){                cb = function(){                    this.hideAction();                    if(c){                        c();                    }                }.createDelegate(this);            }            supr.setVisible.call(this, v, a, d, cb, e);            if(v){                this.sync(true);            }else if(!a){                this.hideAction();            }        }    },    storeXY : function(xy){        delete this.lastLT;        this.lastXY = xy;    },    storeLeftTop : function(left, top){        delete this.lastXY;        this.lastLT = [left, top];    },      beforeFx : function(){        this.beforeAction();        return System.UI.Components.Layer.superclass.beforeFx.apply(this, arguments);    },      afterFx : function(){         System.UI.Components.Layer.superclass.afterFx.apply(this, arguments);        this.sync(this.isVisible());    },        beforeAction : function(){        if(!this.updating && this.shadow){            this.shadow.hide();        }    },      setLeft : function(left){        this.storeLeftTop(left, this.getTop(true));        supr.setLeft.apply(this, arguments);        this.sync();    },    setTop : function(top){        this.storeLeftTop(this.getLeft(true), top);        supr.setTop.apply(this, arguments);        this.sync();    },    setLeftTop : function(left, top){        this.storeLeftTop(left, top);        supr.setLeftTop.apply(this, arguments);        this.sync();    },    setXY : function(xy, a, d, c, e){        this.fixDisplay();        this.beforeAction();        this.storeXY(xy);        var cb = this.createCB(c);        supr.setXY.call(this, xy, a, d, cb, e);        if(!a){            cb();        }    },      createCB : function(c){        var el = this;        return function(){            el.constrainXY();            el.sync(true);            if(c){                c();            }        };    },      setX : function(x, a, d, c, e){        this.setXY([x, this.getY()], a, d, c, e);    },        setY : function(y, a, d, c, e){        this.setXY([this.getX(), y], a, d, c, e);    },       setSize : function(w, h, a, d, c, e){        this.beforeAction();        var cb = this.createCB(c);        supr.setSize.call(this, w, h, a, d, cb, e);        if(!a){            cb();        }    },        setWidth : function(w, a, d, c, e){        this.beforeAction();        var cb = this.createCB(c);        supr.setWidth.call(this, w, a, d, cb, e);        if(!a){            cb();        }    },       setHeight : function(h, a, d, c, e){        this.beforeAction();        var cb = this.createCB(c);        supr.setHeight.call(this, h, a, d, cb, e);        if(!a){            cb();        }    },      setBounds : function(x, y, w, h, a, d, c, e){        this.beforeAction();        var cb = this.createCB(c);        if(!a){            this.storeXY([x, y]);            supr.setXY.call(this, [x, y]);            supr.setSize.call(this, w, h, a, d, cb, e);            cb();        }else{            supr.setBounds.call(this, x, y, w, h, a, d, cb, e);        }        return this;    },     setZIndex : function(zindex){        this.zindex = zindex;        this.setStyle("z-index", zindex + 2);        if(this.shadow){            this.shadow.setZIndex(zindex + 1);        }        if(this.shim){            this.shim.setStyle("z-index", zindex);        }    }});System.UI.Components.BasicDialog = function(el, config){    this.el = System.get(el);    var dh = System.DomHelper;    if(!this.el && config && config.autoCreate){        if(typeof config.autoCreate == "object"){            if(!config.autoCreate.id){                config.autoCreate.id = el;            }            this.el = dh.append(document.body,                        config.autoCreate, true);        }else{            this.el = dh.append(document.body,                        {tag: "div", id: el, style:'visibility:hidden;'}, true);        }    }    el = this.el;                                                                                                                                                                                                                                                                                                                                                                                                    el.setDisplayed(true);    el.hide = this.hideAction;    this.id = el.id;    el.addClass("x-dlg");    System.apply(this, config);    this.proxy = el.createProxy("x-dlg-proxy");    this.proxy.hide = this.hideAction;    this.proxy.setOpacity(.5);    this.proxy.hide();    if(config.width){        el.setWidth(config.width);    }    if(config.height){        el.setHeight(config.height);    }    this.size = el.getSize();    if(typeof config.x != "undefined" && typeof config.y != "undefined"){        this.xy = [config.x,config.y];    }else{        this.xy = el.getCenterXY(true);    }           this.header = el.child("/.x-dlg-hd");       this.body = el.child("/.x-dlg-bd");        this.footer = el.child("/.x-dlg-ft");    if(!this.header){        this.header = el.createChild({tag: "div", cls:"x-dlg-hd", html: "&#160;"}, this.body ? this.body.dom : null);    }    if(!this.body){        this.body = el.createChild({tag: "div", cls:"x-dlg-bd"});    }    this.header.unselectable();    if(this.title){        this.header.update(this.title);    }        this.focusEl = el.createChild({tag: "a", href:"#", cls:"x-dlg-focus", tabIndex:"-1"});    this.focusEl.swallowEvent("click", true);    this.header.wrap({cls:"x-dlg-hd-right"}).wrap({cls:"x-dlg-hd-left"}, true);        this.bwrap = this.body.wrap({tag: "div", cls:"x-dlg-dlg-body"});    if(this.footer){        this.bwrap.dom.appendChild(this.footer.dom);    }    this.bg = this.el.createChild({        tag: "div", cls:"x-dlg-bg",        html: '<div class="x-dlg-bg-left"><div class="x-dlg-bg-right"><div class="x-dlg-bg-center">&#160;</div></div></div>'    });    this.centerBg = this.bg.child("div.x-dlg-bg-center");    if(this.autoScroll !== false && !this.autoTabs){        this.body.setStyle("overflow", "auto");    }    this.toolbox = this.el.createChild({cls: "x-dlg-toolbox"});    if(this.closable !== false){        this.el.addClass("x-dlg-closable");        this.close = this.toolbox.createChild({cls:"x-dlg-close"});        this.close.on("click", this.closeClick, this);        this.close.addClassOnOver("x-dlg-close-over");    }    if(this.collapsible !== false){        this.collapseBtn = this.toolbox.createChild({cls:"x-dlg-collapse"});        this.collapseBtn.on("click", this.collapseClick, this);        this.collapseBtn.addClassOnOver("x-dlg-collapse-over");        this.header.on("dblclick", this.collapseClick, this);    }    if(this.resizable !== false){        this.el.addClass("x-dlg-resizable");        this.resizer = new System.UI.Resizable(el, {            minWidth: this.minWidth || 80,            minHeight:this.minHeight || 80,            handles: this.resizeHandles || "all",            pinned: true        });        this.resizer.on("beforeresize", this.beforeResize, this);        this.resizer.on("resize", this.onResize, this);    }    if(this.draggable !== false){        el.addClass("x-dlg-draggable");        if (!this.proxyDrag) {            var dd = new System.UI.dd.DD(el.dom.id, "WindowDrag");        }        else {            var dd = new System.UI.dd.DDProxy(el.dom.id, "WindowDrag", {dragElId: this.proxy.id});        }        dd.setHandleElId(this.header.id);        dd.endDrag = this.endMove.createDelegate(this);        dd.startDrag = this.startMove.createDelegate(this);        dd.onDrag = this.onDrag.createDelegate(this);        dd.scroll = false;        this.dd = dd;    }    if(this.modal){        this.mask = dh.append(document.body, {tag: "div", cls:"x-dlg-mask"}, true);        this.mask.enableDisplayMode("block");        this.mask.hide();        this.el.addClass("x-dlg-modal");    }    if(this.shadow){        this.shadow = new System.UI.Shadow({            mode : typeof this.shadow == "string" ? this.shadow : "sides",            offset : this.shadowOffset        });    }else{        this.shadowOffset = 0;    }    if(System.useShims && this.shim !== false){        this.shim = this.el.createShim();        this.shim.hide = this.hideAction;        this.shim.hide();    }else{        this.shim = false;    }    if(this.autoTabs){        this.initTabs();    }    this.addEvents({               "keydown" : true,               "move" : true,              "resize" : true,             "beforehide" : true,              "hide" : true,              "beforeshow" : true,              "show" : true,        "beforeclose":true    });    el.on("keydown", this.onKeyDown, this);    el.on("mousedown", this.toFront, this);    System.EventManager.onWindowResize(this.adjustViewport, this, true);    this.el.hide();    System.UI.Components.DialogManager.register(this);    System.UI.Components.BasicDialog.superclass.constructor.call(this);};System.extend(System.UI.Components.BasicDialog, System.Event.Observable, {    shadowOffset: 5,    minHeight: 80,    minWidth: 200,    minButtonWidth: 75,    defaultButton: null,    buttonAlign: "right",    tabTag: 'div',    firstShow: true,     setTitle : function(text){        this.header.update(text);        return this;    },    closeClick : function(){     if(this.fireEvent("beforeclose", this) === false){            return;        }        this.hide();    },       collapseClick : function(){        this[this.collapsed ? "expand" : "collapse"]();    },      collapse : function(){        if(!this.collapsed){            this.collapsed = true;            this.el.addClass("x-dlg-collapsed");            this.restoreHeight = this.el.getHeight();            this.resizeTo(this.el.getWidth(), this.header.getHeight());        }    },      expand : function(){        if(this.collapsed){            this.collapsed = false;            this.el.removeClass("x-dlg-collapsed");            this.resizeTo(this.el.getWidth(), this.restoreHeight);        }    },     initTabs : function(){        var tabs = this.getTabs();        while(tabs.getTab(0)){            tabs.removeTab(0);        }        this.el.select(this.tabTag+'.x-dlg-tab').each(function(el){            var dom = el.dom;            tabs.addTab(System.DomHelper.id(dom), dom.title);            dom.title = "";        });        tabs.activate(0);        return tabs;    },    beforeResize : function(){        this.resizer.minHeight = Math.max(this.minHeight, this.getHeaderFooterHeight(true)+40);    },     onResize : function(){        this.refreshSize();        this.syncBodyHeight();        this.adjustAssets();        this.focus();        this.fireEvent("resize", this, this.size.width, this.size.height);    },      onKeyDown : function(e){        if(this.isVisible()){            this.fireEvent("keydown", this, e);        }    },     resizeTo : function(width, height){        this.el.setSize(width, height);        this.size = {width: width, height: height};        this.syncBodyHeight();        if(this.fixedcenter){            this.center();        }        if(this.isVisible()){            this.constrainXY();            this.adjustAssets();        }        this.fireEvent("resize", this, width, height);        return this;    },      setContentSize : function(w, h){        h += this.getHeaderFooterHeight() + this.body.getMargins("tb");        w += this.body.getMargins("lr") + this.bwrap.getMargins("lr") + this.centerBg.getPadding("lr");                    h +=  this.body.getPadding("tb") + this.bwrap.getBorderWidth("tb") + this.body.getBorderWidth("tb") + this.el.getBorderWidth("tb");            w += this.body.getPadding("lr") + this.bwrap.getBorderWidth("lr") + this.body.getBorderWidth("lr") + this.bwrap.getPadding("lr") + this.el.getBorderWidth("lr");                if(this.tabs){            h += this.tabs.stripWrap.getHeight() + this.tabs.bodyEl.getMargins("tb") + this.tabs.bodyEl.getPadding("tb");            w += this.tabs.bodyEl.getMargins("lr") + this.tabs.bodyEl.getPadding("lr");        }        this.resizeTo(w, h);        return this;    },     addKeyListener : function(key, fn, scope){        var keyCode, shift, ctrl, alt;        if(typeof key == "object" && !(key instanceof Array)){            keyCode = key["key"];            shift = key["shift"];            ctrl = key["ctrl"];            alt = key["alt"];        }else{            keyCode = key;        }        var handler = function(dlg, e){            if((!shift || e.shiftKey) && (!ctrl || e.ctrlKey) &&  (!alt || e.altKey)){                var k = e.getKey();                if(keyCode instanceof Array){                    for(var i = 0, len = keyCode.length; i < len; i++){                        if(keyCode[i] == k){                          fn.call(scope || window, dlg, k, e);                          return;                        }                    }                }else{                    if(k == keyCode){                        fn.call(scope || window, dlg, k, e);                    }                }            }        };        this.on("keydown", handler);        return this;    },      getTabs : function(){        if(!this.tabs){            this.el.addClass("x-dlg-auto-tabs");            this.body.addClass(this.tabPosition == "bottom" ? "x-tabs-bottom" : "x-tabs-top");            this.tabs = new System.UI.Components.TabPanel(this.body.dom, this.tabPosition == "bottom");        }        return this.tabs;    },      addButton : function(config, handler, scope){        var dh = System.DomHelper;        if(!this.footer){            this.footer = dh.append(this.bwrap, {tag: "div", cls:"x-dlg-ft"}, true);        }        if(!this.btnContainer){            var tb = this.footer.createChild({                tag:"div",                cls:"x-dlg-btns x-dlg-btns-"+this.buttonAlign,                html:'<table cellspacing="0"><tbody><tr></tr></tbody></table><div class="x-clear"></div>'            }, null, true);            this.btnContainer = tb.firstChild.firstChild.firstChild;        }        var bconfig = {            handler: handler,            scope: scope,            minWidth: this.minButtonWidth,            hideParent:true        };        if(typeof config == "string"){            bconfig.text = config;        }else{            if(config.tag){                bconfig.dhconfig = config;            }else{                System.apply(bconfig, config);            }        }        var btn = new System.UI.Components.Button(            this.btnContainer.appendChild(document.createElement("td")),            bconfig        );        this.syncBodyHeight();        if(!this.buttons){                        this.buttons = [];        }        this.buttons.push(btn);        return btn;    },     setDefaultButton : function(btn){        this.defaultButton = btn;        return this;    },     getHeaderFooterHeight : function(safe){        var height = 0;        if(this.header){           height += this.header.getHeight();        }        if(this.footer){           var fm = this.footer.getMargins();            height += (this.footer.getHeight()+fm.top+fm.bottom);        }        height += this.bwrap.getPadding("tb")+this.bwrap.getBorderWidth("tb");        height += this.centerBg.getPadding("tb");        return height;    },      syncBodyHeight : function(){        var bd = this.body, cb = this.centerBg, bw = this.bwrap;        var height = this.size.height - this.getHeaderFooterHeight(false);        bd.setHeight(height-bd.getMargins("tb"));        var hh = this.header.getHeight();        var h = this.size.height-hh;        cb.setHeight(h);        bw.setLeftTop(cb.getPadding("l"), hh+cb.getPadding("t"));        bw.setHeight(h-cb.getPadding("tb"));        bw.setWidth(this.el.getWidth(true)-cb.getPadding("lr"));        bd.setWidth(bw.getWidth(true));        if(this.tabs){            this.tabs.syncHeight();            if(System.UserAgent.ie){                this.tabs.el.repaint();            }        }    },     restoreState : function(){        var box = System.UI.State.Manager.get(this.stateId || (this.el.id + "-state"));        if(box && box.width){            this.xy = [box.x, box.y];            this.resizeTo(box.width, box.height);        }        return this;    },     beforeShow : function(){        this.expand();        if(this.fixedcenter){            this.xy = this.el.getCenterXY(true);        }        if(this.modal || System.UserAgent.ie==6){         System.get(document.body).addClass("x-body-masked");        }        if(this.modal){            this.mask.setSize(System.DomHelper.getViewWidth(true), System.DomHelper.getViewHeight(true));            this.mask.show();        }        this.constrainXY();    },     animShow : function(){        var b = System.get(this.animateTarget, true).getBox();        this.proxy.setSize(b.width, b.height);        this.proxy.setLocation(b.x, b.y);        this.proxy.show();        this.proxy.setBounds(this.xy[0], this.xy[1], this.size.width, this.size.height,                    true, .35, this.showEl.createDelegate(this));    },    show : function(animateTarget){        if (this.fireEvent("beforeshow", this) === false){            return;        }        if(this.syncHeightBeforeShow){            this.syncBodyHeight();        }else if(this.firstShow){            this.firstShow = false;            this.syncBodyHeight();         }        this.animateTarget = animateTarget || this.animateTarget;        if(!this.el.isVisible()){            this.beforeShow();            if(this.animateTarget){                this.animShow();            }else{                this.showEl();            }        }        return this;    },      showEl : function(){        this.proxy.hide();        this.el.setXY(this.xy);        this.el.show();        this.adjustAssets(true);        this.toFront();        this.focus();                if(System.UserAgent.ie){            this.el.repaint();        }        this.fireEvent("show", this);    },     focus : function(){        if(this.defaultButton){            this.defaultButton.focus();        }else{            this.focusEl.focus();        }    },     constrainXY : function(){        if(this.constraintoviewport !== false){            if(!this.viewSize){                if(this.container){                    var s = this.container.getSize();                    this.viewSize = [s.width, s.height];                }else{                    this.viewSize = [System.DomHelper.getViewWidth(),System.DomHelper.getViewHeight()];                }            }            var s = System.get(this.container||document).getScroll();            var x = this.xy[0], y = this.xy[1];            var w = this.size.width, h = this.size.height;            var vw = this.viewSize[0], vh = this.viewSize[1];                        var moved = false;                        if(x + w > vw+s.left){                x = vw - w;                moved = true;            }            if(y + h > vh+s.top){                y = vh - h;                moved = true;            }                        if(x < s.left){                x = s.left;                moved = true;            }            if(y < s.top){                y = s.top;                moved = true;            }            if(moved){                                this.xy = [x, y];                if(this.isVisible()){                    this.el.setLocation(x, y);                    this.adjustAssets();                }            }        }    },     onDrag : function(){        if(!this.proxyDrag){            this.xy = this.el.getXY();            this.adjustAssets();        }    },      adjustAssets : function(doShow){        var x = this.xy[0], y = this.xy[1];        var w = this.size.width, h = this.size.height;        if(doShow === true){            if(this.shadow){                this.shadow.show(this.el);            }            if(this.shim){                this.shim.show();            }        }        if(this.shadow && this.shadow.isVisible()){            this.shadow.show(this.el);        }        if(this.shim && this.shim.isVisible()){            this.shim.setBounds(x, y, w, h);        }    },     adjustViewport : function(w, h){        if(!w || !h){            w = System.DomHelper.getViewWidth();            h = System.DomHelper.getViewHeight();        }                this.viewSize = [w, h];        if(this.modal && this.mask.isVisible()){            this.mask.setSize(w, h);             this.mask.setSize(System.DomHelper.getViewWidth(true), System.DomHelper.getViewHeight(true));        }        if(this.isVisible()){            this.constrainXY();        }    },      destroy : function(removeEl){        if(this.isVisible()){            this.animateTarget = null;            this.hide();        }        System.EventManager.removeResizeListener(this.adjustViewport, this);        if(this.tabs){            this.tabs.destroy(removeEl);        }        System.destroy(             this.shim,             this.proxy,             this.resizer,             this.close,             this.mask        );        if(this.dd){            this.dd.unreg();        }        if(this.buttons){           for(var i = 0, len = this.buttons.length; i < len; i++){               this.buttons[i].destroy();           }        }        this.el.removeAllListeners();        if(removeEl === true){            this.el.update("");            this.el.remove();        }        System.UI.Components.DialogManager.unregister(this);    },      startMove : function(){        if(this.proxyDrag){            this.proxy.show();        }        if(this.constraintoviewport !== false){            this.dd.constrainTo(document.body, {right: this.shadowOffset, bottom: this.shadowOffset});        }    },     endMove : function(){        if(!this.proxyDrag){            System.UI.dd.DD.prototype.endDrag.apply(this.dd, arguments);        }else{            System.UI.dd.DDProxy.prototype.endDrag.apply(this.dd, arguments);            this.proxy.hide();        }        this.refreshSize();        this.adjustAssets();        this.focus();        this.fireEvent("move", this, this.xy[0], this.xy[1]);    },      toFront : function(){        System.UI.Components.DialogManager.bringToFront(this);        return this;    },      toBack : function(){        System.UI.Components.DialogManager.sendToBack(this);        return this;    },    center : function(){        var xy = this.el.getCenterXY(true);        this.moveTo(xy[0], xy[1]);        return this;    },     moveTo : function(x, y){        this.xy = [x,y];        if(this.isVisible()){            this.el.setXY(this.xy);            this.adjustAssets();        }        return this;    },      alignTo : function(element, position, offsets){        this.xy = this.el.getAlignToXY(element, position, offsets);        if(this.isVisible()){            this.el.setXY(this.xy);            this.adjustAssets();        }        return this;    },      anchorTo : function(el, alignment, offsets, monitorScroll){        var action = function(){            this.alignTo(el, alignment, offsets);        };        System.EventManager.onWindowResize(action, this);        var tm = typeof monitorScroll;        if(tm != 'undefined'){            System.EventManager.on(window, 'scroll', action, this,                {buffer: tm == 'number' ? monitorScroll : 50});        }        action.call(this);        return this;    },      isVisible : function(){        return this.el.isVisible();    },    animHide : function(callback){        var b = System.get(this.animateTarget).getBox();        this.proxy.show();        this.proxy.setBounds(this.xy[0], this.xy[1], this.size.width, this.size.height);        this.el.hide();        this.proxy.setBounds(b.x, b.y, b.width, b.height, true, .35,                    this.hideEl.createDelegate(this, [callback]));    },     hide : function(callback){        if (this.fireEvent("beforehide", this) === false){            return;        }        if(this.shadow){            this.shadow.hide();        }        if(this.shim) {          this.shim.hide();        }        if(this.animateTarget){           this.animHide(callback);        }else{            this.el.hide();            this.hideEl(callback);        }        return this;    },    hideEl : function(callback){        this.proxy.hide();        if(this.modal){            this.mask.hide();                  }        if(this.modal || System.UserAgent.ie==6){         System.get(document.body).removeClass("x-body-masked");           }        this.fireEvent("hide", this);        if(typeof callback == "function"){            callback();        }    },    hideAction : function(){        this.setLeft("-10000px");        this.setTop("-10000px");        this.setStyle("visibility", "hidden");    },     refreshSize : function(){        this.size = this.el.getSize();        this.xy = this.el.getXY();        System.UI.State.Manager.set(this.stateId || this.el.id + "-state", this.el.getBox());    },     setZIndex : function(index){        if(this.modal){            this.mask.setStyle("z-index", index);        }        if(this.shim){            this.shim.setStyle("z-index", ++index);        }        if(this.shadow){            this.shadow.setZIndex(++index);        }        this.el.setStyle("z-index", ++index);        if(this.proxy){            this.proxy.setStyle("z-index", ++index);        }        if(this.resizer){            this.resizer.proxy.setStyle("z-index", ++index);        }        this.lastZIndex = index;    },      getEl : function(){        return this.el;    }});System.UI.Components.DialogManager = function(){    var list = {};    var accessList = [];    var front = null;     var sortDialogs = function(d1, d2){        return (!d1._lastAccess || d1._lastAccess < d2._lastAccess) ? -1 : 1;    };    var orderDialogs = function(){        accessList.sort(sortDialogs);        var seed = System.UI.Components.DialogManager.zseed;        for(var i = 0, len = accessList.length; i < len; i++){            var dlg = accessList[i];            if(dlg){                dlg.setZIndex(seed + (i*10));            }        }    };    return {         zseed : 9000,        register : function(dlg){            list[dlg.id] = dlg;            accessList.push(dlg);        },        unregister : function(dlg){            delete list[dlg.id];            if(!accessList.indexOf){                for(var i = 0, len = accessList.length; i < len; i++){                    if(accessList[i] == dlg){                        accessList.splice(i, 1);                        return;                    }                }            }else{                var i = accessList.indexOf(dlg);                if(i != -1){                    accessList.splice(i, 1);                }            }        },         get : function(id){            return typeof id == "object" ? id : list[id];        },        bringToFront : function(dlg){            dlg = this.get(dlg);            if(dlg != front){                front = dlg;                dlg._lastAccess = new Date().getTime();                orderDialogs();            }            return dlg;        },        sendToBack : function(dlg){            dlg = this.get(dlg);            dlg._lastAccess = -(new Date().getTime());            orderDialogs();            return dlg;        },        hideAll : function(){            for(var id in list){                if(list[id] && typeof list[id] != "function" && list[id].isVisible()){                    list[id].hide();                }            }        },        destroy:function(){         for(var p in list){          list[p].destroy();          delete list[p];          list[p]=null;         }         list=null;        }    };}();System.UI.Components.TabPanel = function(container, config){    this.el = System.get(container, true);    if(config){        if(typeof config == "boolean"){            this.tabPosition = config ? "bottom" : "top";        }else{            System.apply(this, config);        }    }    if(this.tabPosition == "bottom"){        this.bodyEl = System.get(this.createBody(this.el.dom));        this.el.addClass("x-tabs-bottom");    }    this.stripWrap = System.get(this.createStrip(this.el.dom), true);    this.stripEl = System.get(this.createStripList(this.stripWrap.dom), true);    this.stripBody = System.get(this.stripWrap.dom.firstChild.firstChild, true);    if(System.UserAgent.ie){        System.fly(this.stripWrap.dom.firstChild).setStyle("overflow-x", "hidden");    }    if(this.tabPosition != "bottom"){          this.bodyEl = System.get(this.createBody(this.el.dom));      this.el.addClass("x-tabs-top");    }        this.items = [];       this.bodyEl.setStyle("position", "relative");    this.active = null;    this.activateDelegate = this.activate.createDelegate(this);        this.addEvents({             "tabchange": true,          "beforetabchange" : true    });        System.EventManager.onWindowResize(this.onResize, this);    this.cpad = this.el.getPadding("lr");    this.hiddenCount = 0;    System.UI.Components.TabPanel.superclass.constructor.call(this);};System.extend(System.UI.Components.TabPanel, System.Event.Observable, {       tabPosition : "top",    currentTabWidth : 0,      minTabWidth : 40,      maxTabWidth : 250,      preferredTabWidth : 175,      resizeTabs : false,    monitorResize : true,      addTab : function(id, text, content, closable){        var item = new System.UI.Components.TabPanelItem(this, id, text, closable);        this.addTabItem(item);        if(content){            item.setContent(content);        }        return item;    },    getTab : function(id){        return this.items[id];    },    hideTab : function(id){        var t = this.items[id];        if(!t.isHidden()){           t.setHidden(true);           this.hiddenCount++;           this.autoSizeTabs();        }    },    unhideTab : function(id){        var t = this.items[id];        if(t.isHidden()){           t.setHidden(false);           this.hiddenCount--;           this.autoSizeTabs();        }    },    addTabItem : function(item){        this.items[item.id] = item;        this.items.push(item);        if(this.resizeTabs){           item.setWidth(this.currentTabWidth || this.preferredTabWidth);           this.autoSizeTabs();        }else{            item.autoSize();        }    },    removeTab : function(id){        var items = this.items;        var tab = items[id];        if(!tab) return;        var index = items.indexOf(tab);        if(this.active == tab && items.length > 1){            var newTab = this.getNextAvailable(index);            if(newTab)newTab.activate();        }        this.stripEl.dom.removeChild(tab.pnode.dom);        if(tab.bodyEl.dom.parentNode == this.bodyEl.dom){             this.bodyEl.dom.removeChild(tab.bodyEl.dom);        }        items.splice(index, 1);        delete this.items[tab.id];        tab.fireEvent("close", tab);        tab.purgeListeners();        this.autoSizeTabs();    },    getNextAvailable : function(start){        var items = this.items;        var index = start;        while(index < items.length){            var item = items[++index];            if(item && !item.isHidden()){                return item;            }        }        index = start;        while(index >= 0){            var item = items[--index];            if(item && !item.isHidden()){                return item;            }        }        return null;    },    disableTab : function(id){        var tab = this.items[id];        if(tab && this.active != tab){            tab.disable();        }    },    enableTab : function(id){        var tab = this.items[id];        tab.enable();    },    activate : function(id){        var tab = this.items[id];        if(!tab){            return null;        }        if(tab == this.active){            return tab;        }         var e = {};        this.fireEvent("beforetabchange", this, e, tab);        if(e.cancel !== true && !tab.disabled){            if(this.active){                this.active.hide();            }            this.active = this.items[id];            this.active.show();            this.fireEvent("tabchange", this, this.active);        }        return tab;    },    getActiveTab : function(){        return this.active;    },    syncHeight : function(targetHeight){        var height = (targetHeight || this.el.getHeight())-this.el.getBorderWidth("tb")-this.el.getPadding("tb");        var bm = this.bodyEl.getMargins();        var newHeight = height-(this.stripWrap.getHeight()||0)-(bm.top+bm.bottom);        this.bodyEl.setHeight(newHeight);        return newHeight;     },    onResize : function(){        if(this.monitorResize){            this.autoSizeTabs();        }    },    beginUpdate : function(){        this.updating = true;        },    endUpdate : function(){        this.updating = false;        this.autoSizeTabs();      },    autoSizeTabs : function(){        var count = this.items.length;        var vcount = count - this.hiddenCount;        if(!this.resizeTabs || count < 1 || vcount < 1 || this.updating) return;        var w = Math.max(this.el.getWidth() - this.cpad, 10);        var availWidth = Math.floor(w / vcount);        var b = this.stripBody;        if(b.getWidth() > w){            var tabs = this.items;            this.setTabWidth(Math.max(availWidth, this.minTabWidth)-2);            if(availWidth < this.minTabWidth){  }        }else{            if(this.currentTabWidth < this.preferredTabWidth){                this.setTabWidth(Math.min(availWidth, this.preferredTabWidth)-2);            }        }    },     getCount : function(){         return this.items.length;       },    setTabWidth : function(width){        this.currentTabWidth = width;        for(var i = 0, len = this.items.length; i < len; i++) {         if(!this.items[i].isHidden())this.items[i].setWidth(width);        }    },    destroy : function(removeEl){        System.EventManager.removeResizeListener(this.onResize, this);        for(var i = 0, len = this.items.length; i < len; i++){            this.items[i].purgeListeners();        }        if(removeEl === true){            this.el.update("");            this.el.remove();        }    }});System.apply(System.UI.Components.TabPanel.prototype,{    createStrip : function(container){        var strip = document.createElement("div");        strip.className = "x-tabs-wrap";        container.appendChild(strip);        return strip;    },    createStripList:function(strip){          strip.innerHTML = '<div class="x-tabs-strip-wrap"><table class="x-tabs-strip" cellspacing="0" cellpadding="0" border="0"><tbody><tr></tr></tbody></table></div>';        return strip.firstChild.firstChild.firstChild.firstChild;    },    createBody : function(container){        var body = document.createElement("div");        System.DomHelper.id(body, "tab-body");        System.fly(body).addClass("x-tabs-body");        container.appendChild(body);        return body;    },    createItemBody : function(bodyEl, id){        var body = System.DomHelper.getDom(id);        if(!body){            body = document.createElement("div");            body.id = id;        }        System.fly(body).addClass("x-tabs-item-body");        bodyEl.insertBefore(body, bodyEl.firstChild);        return body;    },    createStripElements : function(stripEl, text, closable){        var td = document.createElement("td");        stripEl.appendChild(td);        if(closable){            td.className = "x-tabs-closable";            if(!this.closeTpl){                this.closeTpl = new System.DomHelper.Template(                   '<a href="#" class="x-tabs-right"><span class="x-tabs-left"><em class="x-tabs-inner">' +                   '<span unselectable="on"' + (this.disableTooltips ? '' : ' title="{text}"') +' class="x-tabs-text">{text}</span>' +                   '<div unselectable="on" class="close-icon">&#160;</div></em></span></a>'                );            }            var el = this.closeTpl.overwrite(td, {"text": text});            var close = el.getElementsByTagName("div")[0];            var inner = el.getElementsByTagName("em")[0];            return {"el": el, "close": close, "inner": inner};        } else {            if(!this.tabTpl){                this.tabTpl = new System.DomHelper.Template(                   '<a href="#" class="x-tabs-right"><span class="x-tabs-left"><em class="x-tabs-inner">' +                   '<span unselectable="on"' + (this.disableTooltips ? '' : ' title="{text}"') +' class="x-tabs-text">{text}</span></em></span></a>'                );            }            var el = this.tabTpl.overwrite(td, {"text": text});            var inner = el.getElementsByTagName("em")[0];            return {"el": el, "inner": inner};        }    } });System.UI.Components.TabPanelItem = function(tabPanel, id, text, closable){       this.tabPanel = tabPanel;       this.id = id;      this.disabled = false;      this.text = text;      this.loaded = false;    this.closable = closable;          this.bodyEl = System.get(tabPanel.createItemBody(tabPanel.bodyEl.dom, id));    this.bodyEl.setVisibilityMode(System.DomHelper.Element.VISIBILITY);    this.bodyEl.setStyle("display", "block");    this.bodyEl.setStyle("zoom", "1");    this.hideAction();        var els = tabPanel.createStripElements(tabPanel.stripEl.dom, text, closable);        this.el = System.get(els.el, true);    this.inner = System.get(els.inner, true);    this.textEl = System.get(this.el.dom.firstChild.firstChild.firstChild, true);    this.pnode = System.get(els.el.parentNode, true);    this.el.on("mousedown", this.onTabMouseDown, this);    this.el.on("click", this.onTabClick, this);        if(closable){        var c = System.get(els.close, true);        c.dom.title = this.closeText;        c.addClassOnOver("close-over");        c.on("click", this.closeClick, this);     }      this.addEvents({        "activate": true,        "beforeclose": true,        "close": true,        "deactivate" : true    });    this.hidden = false;    System.UI.Components.TabPanelItem.superclass.constructor.call(this);};System.extend(System.UI.Components.TabPanelItem, System.Event.Observable, {    purgeListeners : function(){       System.Event.Observable.prototype.purgeListeners.call(this);       this.el.removeAllListeners();     },        show : function(){        this.pnode.addClass("on");        this.showAction();        if(System.UserAgent.opera){            this.tabPanel.stripWrap.repaint();        }        this.fireEvent("activate", this.tabPanel, this);    },    isActive : function(){        return this.tabPanel.getActiveTab() == this;      },    hide : function(){        this.pnode.removeClass("on");        this.hideAction();        this.fireEvent("deactivate", this.tabPanel, this);    },    hideAction : function(){        this.bodyEl.hide();        this.bodyEl.setStyle("position", "absolute");        this.bodyEl.setLeft("-20000px");        this.bodyEl.setTop("-20000px");    },      showAction : function(){        this.bodyEl.setStyle("position", "relative");        this.bodyEl.setTop("");        this.bodyEl.setLeft("");        this.bodyEl.show();    },    setTooltip : function(text){        if(System.UI.Components.QuickTips && System.UI.Components.QuickTips.isEnabled()){            this.textEl.dom.qtip = text;            this.textEl.dom.removeAttribute('title');        }else{            this.textEl.dom.title = text;        }    },      onTabClick : function(e){        e.preventDefault();        this.tabPanel.activate(this.id);    },    onTabMouseDown : function(e){        e.preventDefault();        this.tabPanel.activate(this.id);    },    getWidth : function(){        return this.inner.getWidth();      },        setWidth : function(width){        var iwidth = width - this.pnode.getPadding("lr");        this.inner.setWidth(iwidth);        this.textEl.setWidth(iwidth-this.inner.getPadding("lr"));        this.pnode.setWidth(width);    },        setHidden : function(hidden){        this.hidden = hidden;        this.pnode.setStyle("display", hidden ? "none" : "");    },          isHidden : function(){        return this.hidden;      },          getText : function(){        return this.text;    },        autoSize : function(){               this.textEl.setWidth(1);        this.setWidth(this.textEl.dom.scrollWidth+this.pnode.getPadding("lr")+this.inner.getPadding("lr"));            },           setText : function(text){        this.text = text;        this.textEl.update(text);        this.setTooltip(text);        if(!this.tabPanel.resizeTabs){            this.autoSize();        }    },        activate : function(){        this.tabPanel.activate(this.id);    },           disable : function(){        if(this.tabPanel.active != this){            this.disabled = true;            this.pnode.addClass("disabled");        }    },          enable : function(){        this.disabled = false;        this.pnode.removeClass("disabled");    },           setContent : function(content, loadScripts){        this.bodyEl.update(content, loadScripts);    },          getUpdateManager : function(){        return this.bodyEl.getUpdateManager();    },           setUrl : function(url, params, loadOnce){        if(this.refreshDelegate){            this.un('activate', this.refreshDelegate);        }        this.refreshDelegate = this._handleRefresh.createDelegate(this, [url, params, loadOnce]);        this.on("activate", this.refreshDelegate);        return this.bodyEl.getUpdateManager();    },           _handleRefresh : function(url, params, loadOnce){        if(!loadOnce || !this.loaded){            var updater = this.bodyEl.getUpdateManager();            updater.update(url, params, this._setLoaded.createDelegate(this));        }    },          refresh : function(){        if(this.refreshDelegate){           this.loaded = false;           this.refreshDelegate();        }    },           _setLoaded : function(){        this.loaded = true;    },        closeClick : function(e){        var o = {};        e.stopEvent();        this.fireEvent("beforeclose", this, o);        if(o.cancel !== true){            this.tabPanel.removeTab(this.id);        }    },       closeText : "Close this tab"});System.UI.Components.menu={};System.UI.Components.menu.Menu = function(config){    System.apply(this, config);    this.id = this.id || System.DomHelper.id();    this.addEvents({               beforeshow : true,                beforehide : true,               show : true,                hide : true,               click : true,              mouseover : true,               mouseout : true,                itemclick: true    });    System.UI.Components.menu.MenuMgr.register(this);    var mis = this.items;    this.items = new System.MixedCollection();    if(mis){        this.add.apply(this, mis);    }};System.extend(System.UI.Components.menu.Menu, System.Event.Observable, {       minWidth : 120,       shadow : "sides",      subMenuAlign : "tl-tr?",       defaultAlign : "tl-bl?",      allowOtherMenus : false,        render : function(){        if(this.el){            return;        }        var el = this.el = new System.UI.Components.Layer({            cls: "x-menu",            shadow:this.shadow,            constrain: false,            parentEl: this.parentEl || document.body,            zindex:15000        });        this.keyNav = new System.UI.Components.menu.MenuNav(this);        if(this.plain){            el.addClass("x-menu-plain");        }        if(this.cls){            el.addClass(this.cls);        }        this.focusEl = el.createChild({            tag: "a", cls: "x-menu-focus", href: "#", onclick: "return false;", tabIndex:"-1"        });        var ul = el.createChild({tag: "ul", cls: "x-menu-list"});        ul.on("click", this.onClick, this);        ul.on("mouseover", this.onMouseOver, this);        ul.on("mouseout", this.onMouseOut, this);        this.items.each(function(item){            var li = document.createElement("li");            li.className = "x-menu-list-item";            ul.dom.appendChild(li);            item.render(li, this);        }, this);        this.ul = ul;        this.autoWidth();    },    autoWidth : function(){        var el = this.el, ul = this.ul;        if(!el){            return;        }        var w = this.width;        if(w){            el.setWidth(w);        }else if(System.UserAgent.ie){            el.setWidth(this.minWidth);            var t = el.dom.offsetWidth;                         el.setWidth(ul.getWidth()+el.getFrameWidth("lr"));        }    },    delayAutoWidth : function(){        if(this.rendered){            if(!this.awTask){                this.awTask = new System.DelayedTask(this.autoWidth, this);            }            this.awTask.delay(20);        }    },    findTargetItem : function(e){        var t = e.getTarget(".x-menu-list-item", this.ul,  true);        if(t && t.menuItemId){            return this.items.get(t.menuItemId);        }    },    onClick : function(e){        var t;        if(t = this.findTargetItem(e)){            t.onClick(e);            this.fireEvent("click", this, t, e);        }    },    setActiveItem : function(item, autoExpand){        if(item != this.activeItem){            if(this.activeItem){                this.activeItem.deactivate();            }            this.activeItem = item;            item.activate(autoExpand);        }else if(autoExpand){            item.expandMenu();        }    },    tryActivate : function(start, step){        var items = this.items;        for(var i = start, len = items.length; i >= 0 && i < len; i+= step){            var item = items.get(i);            if(!item.disabled && item.canActivate){                this.setActiveItem(item, false);                return item;            }        }        return false;    },    onMouseOver : function(e){        var t;        if(t = this.findTargetItem(e)){            if(t.canActivate && !t.disabled){                this.setActiveItem(t, true);            }        }        this.fireEvent("mouseover", this, e, t);    },    onMouseOut : function(e){        var t;        if(t = this.findTargetItem(e)){            if(t == this.activeItem && t.shouldDeactivate(e)){                this.activeItem.deactivate();                delete this.activeItem;            }        }        this.fireEvent("mouseout", this, e, t);    },    isVisible : function(){        return this.el && this.el.isVisible();    },    show : function(el, pos, parentMenu){        this.parentMenu = parentMenu;        if(!this.el){            this.render();        }        this.fireEvent("beforeshow", this);        this.showAt(this.el.getAlignToXY(el, pos || this.defaultAlign), parentMenu, false);    },    showAt : function(xy, parentMenu, _fireBefore){        this.parentMenu = parentMenu;        if(!this.el){            this.render();        }        if(_fireBefore !== false){            this.fireEvent("beforeshow", this);        }        this.el.setXY(xy);        this.el.show();        this.focusEl.focus.defer(50, this.focusEl);        this.fireEvent("show", this);    },    hide : function(deep){        if(this.el && this.isVisible()){            this.fireEvent("beforehide", this);            if(this.activeItem){                this.activeItem.deactivate();                this.activeItem = null;            }            this.el.hide();            this.fireEvent("hide", this);        }        if(deep === true && this.parentMenu){            this.parentMenu.hide(true);        }    },    add : function(){        var a = arguments, l = a.length, item;        for(var i = 0; i < l; i++){            var el = a[i];            if(el.render){                                 item = this.addItem(el);            }else if(typeof el == "string"){                                 if(el == "separator" || el == "-"){                    item = this.addSeparator();                }else{                    item = this.addText(el);                }            }else if(el.tagName || el.el){                                 item = this.addElement(el);            }else if(typeof el == "object"){                                 item = this.addMenuItem(el);            }        }        return item;    },    getEl : function(){        if(!this.el){            this.render();        }        return this.el;    },     addSeparator : function(){        return this.addItem(new System.UI.Components.menu.Separator());    },    addElement : function(el){        return this.addItem(new System.UI.Components.menu.BaseItem(el));    },    addItem : function(item){        this.items.add(item);        if(this.ul){            var li = document.createElement("li");            li.className = "x-menu-list-item";            this.ul.dom.appendChild(li);            item.render(li, this);            this.delayAutoWidth();        }        return item;    },    addMenuItem : function(config){        if(!(config instanceof System.UI.Components.menu.Item)){             config = new System.UI.Components.menu.Item(config);        }        return this.addItem(config);    },    addText : function(text){        return this.addItem(new System.UI.Components.menu.TextItem(text));    },    insert : function(index, item){        this.items.insert(index, item);        if(this.ul){            var li = document.createElement("li");            li.className = "x-menu-list-item";            this.ul.dom.insertBefore(li, this.ul.dom.childNodes[index]);            item.render(li, this);            this.delayAutoWidth();        }        return item;    },    remove : function(item){        this.items.removeKey(item.id);        item.destroy();    },    removeAll : function(){        var f;        while(f = this.items.first()){            this.remove(f);        }    }});System.UI.Components.menu.MenuNav = function(menu){    System.UI.Components.menu.MenuNav.superclass.constructor.call(this, menu.el);    this.scope = this.menu = menu;};System.extend(System.UI.Components.menu.MenuNav, System.DomHelper.KeyNav, {    doRelay : function(e, h){        var k = e.getKey();        if(!this.menu.activeItem && e.isNavKeyPress() && k != e.SPACE && k != e.RETURN){            this.menu.tryActivate(0, 1);            return false;        }        return h.call(this.scope || this, e, this.menu);    },    up : function(e, m){        if(!m.tryActivate(m.items.indexOf(m.activeItem)-1, -1)){            m.tryActivate(m.items.length-1, -1);        }    },    down : function(e, m){        if(!m.tryActivate(m.items.indexOf(m.activeItem)+1, 1)){            m.tryActivate(0, 1);        }    },    right : function(e, m){        if(m.activeItem){            m.activeItem.expandMenu(true);        }    },    left : function(e, m){        m.hide();        if(m.parentMenu && m.parentMenu.activeItem){            m.parentMenu.activeItem.activate();        }    },    enter : function(e, m){        if(m.activeItem){            e.stopPropagation();            m.activeItem.onClick(e);            m.fireEvent("click", this, m.activeItem);            return true;        }    }});System.UI.Components.menu.MenuMgr = function(){   var menus, active, groups = {}, attached = false, lastShow = new Date();   function init(){       menus = {}, active = new System.MixedCollection();       System.get(document).addKeyListener(27, function(){           if(active.length > 0){               hideAll();           }       });   }   function hideAll(){       if(active.length > 0){           var c = active.clone();           c.each(function(m){               m.hide();           });       }   }   function onHide(m){       active.remove(m);       if(active.length < 1){           System.get(document).un("mousedown", onMouseDown);           attached = false;       }   }   function onShow(m){       var last = active.last();       lastShow = new Date();       active.add(m);       if(!attached){           System.get(document).on("mousedown", onMouseDown);           attached = true;       }       if(m.parentMenu){          m.getEl().setZIndex(parseInt(m.parentMenu.getEl().getStyle("z-index"), 10) + 3);          m.parentMenu.activeChild = m;       }else if(last && last.isVisible()){          m.getEl().setZIndex(parseInt(last.getEl().getStyle("z-index"), 10) + 3);       }   }   function onBeforeHide(m){       if(m.activeChild){           m.activeChild.hide();       }       if(m.autoHideTimer){           clearTimeout(m.autoHideTimer);           delete m.autoHideTimer;       }   }   function onBeforeShow(m){       var pm = m.parentMenu;       if(!pm && !m.allowOtherMenus){           hideAll();       }else if(pm && pm.activeChild){           pm.activeChild.hide();       }   }   function onMouseDown(e){       if(lastShow.getElapsed() > 50 && active.length > 0 && !e.getTarget(".x-menu")){           hideAll();       }   }   function onBeforeCheck(mi, state){       if(state){           var g = groups[mi.group];           for(var i = 0, l = g.length; i < l; i++){               if(g[i] != mi){                   g[i].setChecked(false);               }           }       }   }   return {        hideAll : function(){            hideAll();         },       register : function(menu){           if(!menus){               init();           }           menus[menu.id] = menu;           menu.on("beforehide", onBeforeHide);           menu.on("hide", onHide);           menu.on("beforeshow", onBeforeShow);           menu.on("show", onShow);           var g = menu.group;           if(g && menu.events["checkchange"]){               if(!groups[g]){                   groups[g] = [];               }               groups[g].push(menu);               menu.on("checkchange", onCheck);           }       },        get : function(menu){           if(typeof menu == "string"){               return menus[menu];           }else if(menu.events){               return menu;           }else{               return new System.UI.Components.menu.Menu(menu);           }       },       unregister : function(menu){           delete menus[menu.id];           menu.un("beforehide", onBeforeHide);           menu.un("hide", onHide);           menu.un("beforeshow", onBeforeShow);           menu.un("show", onShow);           var g = menu.group;           if(g && menu.events["checkchange"]){               groups[g].remove(menu);               menu.un("checkchange", onCheck);           }       },       registerCheckable : function(menuItem){           var g = menuItem.group;           if(g){               if(!groups[g]){                   groups[g] = [];               }               groups[g].push(menuItem);               menuItem.on("beforecheckchange", onBeforeCheck);           }       },       unregisterCheckable : function(menuItem){           var g = menuItem.group;           if(g){               groups[g].remove(menuItem);               menuItem.un("beforecheckchange", onBeforeCheck);           }       }   };}();System.UI.Components.menu.BaseItem = function(config){    System.UI.Components.menu.BaseItem.superclass.constructor.call(this, config);    this.addEvents({              click: true,              activate : true,               deactivate : true    });    if(this.handler){        this.on("click", this.handler, this.scope, true);    }};System.extend(System.UI.Components.menu.BaseItem, System.UI.Component, {            canActivate : false,       activeClass : "x-menu-item-active",       hideOnClick : true,       hideDelay : 100,        ctype: "System.UI.Components.menu.BaseItem",        actionMode : "container",        render : function(container, parentMenu){        this.parentMenu = parentMenu;        System.UI.Components.menu.BaseItem.superclass.render.call(this, container);        this.container.menuItemId = this.id;    },    onRender : function(container, position){        this.el = System.get(this.el);        container.dom.appendChild(this.el.dom);    },    onClick : function(e){        if(!this.disabled && this.fireEvent("click", this, e) !== false                && this.parentMenu.fireEvent("itemclick", this, e) !== false){            this.handleClick(e);        }else{            e.stopEvent();        }    },    activate : function(){        if(this.disabled){            return false;        }        var li = this.container;        li.addClass(this.activeClass);        this.region = li.getRegion().adjust(2, 2, -2, -2);        this.fireEvent("activate", this);        return true;    },    deactivate : function(){        this.container.removeClass(this.activeClass);        this.fireEvent("deactivate", this);    },    shouldDeactivate : function(e){        return !this.region || !this.region.contains(e.getPoint());    },    handleClick : function(e){        if(this.hideOnClick){            this.parentMenu.hide.defer(this.hideDelay, this.parentMenu, [true]);        }    },    expandMenu : function(autoActivate){    },    hideMenu : function(){    }});System.UI.Components.menu.TextItem = function(text){    this.text = text;    System.UI.Components.menu.TextItem.superclass.constructor.call(this);};System.extend(System.UI.Components.menu.TextItem, System.UI.Components.menu.BaseItem, {        hideOnClick : false,        itemCls : "x-menu-text",    onRender : function(){        var s = document.createElement("span");        s.className = this.itemCls;        s.innerHTML = this.text;        this.el = s;        System.UI.Components.menu.TextItem.superclass.onRender.apply(this, arguments);    }});System.UI.Components.menu.Separator = function(config){    System.UI.Components.menu.Separator.superclass.constructor.call(this, config);};System.extend(System.UI.Components.menu.Separator, System.UI.Components.menu.BaseItem, {       itemCls : "x-menu-sep",       hideOnClick : false,    onRender : function(li){        var s = document.createElement("span");        s.className = this.itemCls;        s.innerHTML = "&#160;";        this.el = s;        li.addClass("x-menu-sep-li");        System.UI.Components.menu.Separator.superclass.onRender.apply(this, arguments);    }});System.UI.Components.menu.Item = function(config){    System.UI.Components.menu.Item.superclass.constructor.call(this, config);    if(this.menu){        this.menu = System.UI.Components.menu.MenuMgr.get(this.menu);    }};System.extend(System.UI.Components.menu.Item, System.UI.Components.menu.BaseItem, {     itemCls : "x-menu-item",      canActivate : true,    ctype: "System.UI.Components.menu.Item",    onRender : function(container, position){        var el = document.createElement("a");        el.hideFocus = true;        el.unselectable = "on";        el.href = this.href || "#";        if(this.hrefTarget){            el.target = this.hrefTarget;        }        el.className = this.itemCls + (this.menu ?  " x-menu-item-arrow" : "") + (this.cls ?  " " + this.cls : "");        el.innerHTML = String.format(                '<img src="{0}" class="x-menu-item-icon">{1}',                this.icon || System.BLANK_IMAGE_URL, this.text);        this.el = el;        System.UI.Components.menu.Item.superclass.onRender.call(this, container, position);    },      setText : function(text){        this.text = text;        if(this.rendered){            this.el.update(String.format(                '<img src="{0}" class="x-menu-item-icon">{1}',                this.icon || System.BLANK_IMAGE_URL, this.text));            this.parentMenu.autoWidth();        }    },    handleClick : function(e){        if(!this.href){                         e.stopEvent();        }        System.UI.Components.menu.Item.superclass.handleClick.apply(this, arguments);    },    activate : function(autoExpand){        if(System.UI.Components.menu.Item.superclass.activate.apply(this, arguments)){            this.focus();            if(autoExpand){                this.expandMenu();            }        }        return true;    },    shouldDeactivate : function(e){        if(System.UI.Components.menu.Item.superclass.shouldDeactivate.call(this, e)){            if(this.menu && this.menu.isVisible()){                return !this.menu.getEl().getRegion().contains(e.getPoint());            }            return true;        }        return false;    },    deactivate : function(){        System.UI.Components.menu.Item.superclass.deactivate.apply(this, arguments);        this.hideMenu();    },    expandMenu : function(autoActivate){        if(!this.disabled && this.menu){            if(!this.menu.isVisible()){                this.menu.show(this.container, this.parentMenu.subMenuAlign || "tl-tr?", this.parentMenu);            }            if(autoActivate){                this.menu.tryActivate(0, 1);            }        }    },    hideMenu : function(){        if(this.menu && this.menu.isVisible()){            this.menu.hide();        }    }});System.UI.Components.menu.CheckItem = function(config){    System.UI.Components.menu.CheckItem.superclass.constructor.call(this, config);    this.addEvents({               "beforecheckchange" : true,             "checkchange" : true    });    if(this.checkHandler){        this.on('checkchange', this.checkHandler, this.scope);    }};System.extend(System.UI.Components.menu.CheckItem, System.UI.Components.menu.Item, {          itemCls : "x-menu-item x-menu-check-item",        groupClass : "x-menu-group-item",        checked: false,    ctype: "System.UI.Components.menu.CheckItem",    onRender : function(c){        System.UI.Components.menu.CheckItem.superclass.onRender.apply(this, arguments);        if(this.group){            this.el.addClass(this.groupClass);        }        System.UI.Components.menu.MenuMgr.registerCheckable(this);        if(this.checked){            this.checked = false;            this.setChecked(true, true);        }    },    destroy : function(){        if(this.rendered){            System.UI.Components.menu.MenuMgr.unregisterCheckable(this);        }        System.UI.Components.menu.CheckItem.superclass.destroy.apply(this, arguments);    },     setChecked : function(state, suppressEvent){        if(this.checked != state && this.fireEvent("beforecheckchange", this, state) !== false){            if(this.container){                this.container[state ? "addClass" : "removeClass"]("x-menu-item-checked");            }            this.checked = state;            if(suppressEvent !== true){                this.fireEvent("checkchange", this, state);            }        }    },    handleClick : function(e){       if(!this.disabled && !(this.checked && this.group)){                      this.setChecked(!this.checked);       }       System.UI.Components.menu.CheckItem.superclass.handleClick.apply(this, arguments);    }});System.UI.Components.menu.Adapter = function(component, config){    System.UI.Components.menu.Adapter.superclass.constructor.call(this, config);    this.component = component;};System.extend(System.UI.Components.menu.Adapter, System.UI.Components.menu.BaseItem, {    canActivate : true,    onRender : function(container, position){        this.component.render(container);        this.el = this.component.getEl();    },    activate : function(){        if(this.disabled){            return false;        }        this.component.focus();        this.fireEvent("activate", this);        return true;    },    deactivate : function(){        this.fireEvent("deactivate", this);    },    disable : function(){        this.component.disable();        System.UI.Components.menu.Adapter.superclass.disable.call(this);    },    enable : function(){        this.component.enable();        System.UI.Components.menu.Adapter.superclass.enable.call(this);    }});System.UI.Components.menu.DateItem = function(config){    System.UI.Components.menu.DateItem.superclass.constructor.call(this, new System.UI.Components.DatePicker(config), config);       this.picker = this.component;    this.addEvents({select: true});       this.picker.on("render", function(picker){        picker.getEl().swallowEvent("click");        picker.container.addClass("x-menu-date-item");    });    this.picker.on("select", this.onSelect, this);};System.extend(System.UI.Components.menu.DateItem, System.UI.Components.menu.Adapter, {        onSelect : function(picker, date){        this.fireEvent("select", this, date, picker);        System.UI.Components.menu.DateItem.superclass.handleClick.call(this);    }});System.UI.Components.menu.ColorItem = function(config){    System.UI.Components.menu.ColorItem.superclass.constructor.call(this, new System.UI.Components.ColorPalette(config), config);       this.palette = this.component;    this.relayEvents(this.palette, ["select"]);    if(this.selectHandler){        this.on('select', this.selectHandler, this.scope);    }};System.extend(System.UI.Components.menu.ColorItem,System.UI.Components.menu.Adapter);System.UI.Components.menu.DateMenu = function(config){    System.UI.Components.menu.DateMenu.superclass.constructor.call(this, config);    this.plain = true;    var di = new System.UI.Components.menu.DateItem(config);    this.add(di);       this.picker = di.picker;        this.relayEvents(di, ["select"]);};System.extend(System.UI.Components.menu.DateMenu, System.UI.Components.menu.Menu);System.UI.Components.menu.ColorMenu = function(config){    System.UI.Components.menu.ColorMenu.superclass.constructor.call(this, config);    this.plain = true;    var ci = new System.UI.Components.menu.ColorItem(config);    this.add(ci);        this.palette = ci.palette;       this.relayEvents(ci, ["select"]);};System.extend(System.UI.Components.menu.ColorMenu, System.UI.Components.menu.Menu);System.UI.Components.Button = function(renderTo, config){    System.apply(this, config);    this.addEvents({      "click" : true,     "keydown":true,         "toggle" : true,        'mouseover' : true,        'mouseout': true    });    if(this.menu){        this.menu = System.UI.Components.menu.MenuMgr.get(this.menu);    }    if(renderTo){        this.render(renderTo);    }    System.UI.Components.Button.superclass.constructor.call(this);};System.extend(System.UI.Components.Button, System.Event.Observable, {      hidden : false,    disabled : false,     pressed : false,    enableToggle: false,    menu : undefined,    menuAlign : "tl-bl?",    menuClassTarget: 'tr',    clickEvent : 'click',    handleMouseEvents : true,    tooltipType : 'qtip',     render : function(renderTo){        var btn;        if(this.hideParent){            this.parentEl = System.get(renderTo);        }        if(!this.dhconfig){            if(!this.template){                if(!System.UI.Components.Button.buttonTemplate){                    System.UI.Components.Button.buttonTemplate = new System.DomHelper.Template(                        '<table border="0" cellpadding="0" cellspacing="0" class="x-btn-wrap"><tbody><tr>',                        '<td class="x-btn-left"><i>&#160;</i></td><td class="x-btn-center"><em><button class="x-btn-text">{0}</button></em></td><td class="x-btn-right"><i>&#160;</i></td>',                        "</tr></tbody></table>");                }                this.template = System.UI.Components.Button.buttonTemplate;            }            btn = this.template.append(renderTo, [this.text || '&#160;'], true);            var btnEl = btn.child("button:first");            btnEl.on('focus', this.onFocus, this);            btnEl.on('blur', this.onBlur, this);            if(this.btnid){             btnEl.dom.id=this.btnid;            }            if(this.cls){                btn.addClass(this.cls);            }            if(this.icon){                btnEl.setStyle('background-image', 'url(' +this.icon +')');            }            if(this.tooltip){                if(typeof this.tooltip == 'object'){                    System.UI.Components.QuickTips.tips(System.apply({                          target: btnEl.id                    }, this.tooltip));                } else {                    btnEl.dom[this.tooltipType] = this.tooltip;                }            }        }else{            btn = System.DomHelper.append(System.get(renderTo).dom, this.dhconfig, true);        }        this.el = btn;        if(this.id){            this.el.dom.id = this.el.id = this.id;        }        if(this.menu){            this.el.child(this.menuClassTarget).addClass("x-btn-with-menu");            this.menu.on("show", this.onMenuShow, this);            this.menu.on("hide", this.onMenuHide, this);        }        btn.addClass("x-btn");        if(System.UserAgent.ie && ! System.UserAgent.ie7){            this.autoWidth.defer(1, this);        }else{            this.autoWidth();        }        if(this.handleMouseEvents){            btn.on("mouseover", this.onMouseOver, this);            btn.on("mouseout", this.onMouseOut, this);            btn.on("mousedown", this.onMouseDown, this);        }        btn.on(this.clickEvent, this.onClick, this);                if(this.hidden){            this.hide();        }        if(this.disabled){            this.disable();        }        System.UI.Components.ButtonToggleMgr.register(this);        if(this.pressed){            this.el.addClass("x-btn-pressed");        }        if(this.repeat){            var repeater = new System.UI.ClickRepeater(btn,                typeof this.repeat == "object" ? this.repeat : {}            );            repeater.on("click", this.onClick,  this);        }    },     getEl : function(){        return this.el;      },    destroy : function(){        System.UI.Components.ButtonToggleMgr.unregister(this);        this.el.removeAllListeners();        this.purgeListeners();        this.el.remove();    },    autoWidth : function(){        if(this.el){            this.el.setWidth("auto");            if(System.UserAgent.ie7 && System.isStrict){                var ib = this.el.child('button');                if(ib && ib.getWidth() > 20){                    ib.clip();                    ib.setWidth(System.DomHelper.TextMetrics.measure(ib, this.text).width+ib.getFrameWidth('lr'));                }            }            if(this.minWidth){                if(this.hidden){                    this.el.beginMeasure();                }                if(this.el.getWidth() < this.minWidth){                    this.el.setWidth(this.minWidth);                }                if(this.hidden){                    this.el.endMeasure();                }            }        }    },    setHandler : function(handler, scope){        this.handler = handler;        this.scope = scope;      },    setText : function(text){        this.text = text;        if(this.el){            this.el.child("td.x-btn-center button.x-btn-text").update(text);        }        this.autoWidth();    },     getText : function(){        return this.text;      },     show: function(){        this.hidden = false;        if(this.el){            this[this.hideParent? 'parentEl' : 'el'].setStyle("display", "");        }    },    hide: function(){        this.hidden = true;        if(this.el){            this[this.hideParent? 'parentEl' : 'el'].setStyle("display", "none");        }    },    setVisible: function(visible){        if(visible) {            this.show();        }else{            this.hide();        }    },    toggle : function(state){        state = state === undefined ? !this.pressed : state;        if(state != this.pressed){            if(state){                this.el.addClass("x-btn-pressed");                this.pressed = true;                this.fireEvent("toggle", this, true);            }else{                this.el.removeClass("x-btn-pressed");                this.pressed = false;                this.fireEvent("toggle", this, false);            }            if(this.toggleHandler){                this.toggleHandler.call(this.scope || this, this, state);            }        }    },    focus : function(){        this.el.child('button:first').focus();    },    disable : function(){        if(this.el){            this.el.addClass("x-btn-disabled");        }        this.disabled = true;    },    enable : function(){        if(this.el){            this.el.removeClass("x-btn-disabled");        }        this.disabled = false;    },    setDisabled : function(v){        this[v !== true ? "enable" : "disable"]();    },    onClick : function(e){        if(e){            e.preventDefault();        }        if(!this.disabled){            if(this.enableToggle){                this.toggle();            }            if(this.menu && !this.menu.isVisible()){                this.menu.show(this.el, this.menuAlign);            }            this.fireEvent("click", this, e);            if(this.handler){                this.el.removeClass("x-btn-over");                this.handler.call(this.scope || this, this, e);            }        }    },    onMouseOver : function(e){        if(!this.disabled){            this.el.addClass("x-btn-over");            this.fireEvent('mouseover', this, e);        }    },    onMouseOut : function(e){        if(!e.within(this.el,  true)){            this.el.removeClass("x-btn-over");            this.fireEvent('mouseout', this, e);        }    },    onFocus : function(e){        if(!this.disabled){            this.el.addClass("x-btn-focus");        }    },     onBlur : function(e){        this.el.removeClass("x-btn-focus");    },    onMouseDown : function(){        if(!this.disabled){            this.el.addClass("x-btn-click");            System.get(document).on('mouseup', this.onMouseUp, this);        }    },    onMouseUp : function(){        this.el.removeClass("x-btn-click");        System.get(document).un('mouseup', this.onMouseUp, this);    },    onMenuShow : function(e){        this.el.addClass("x-btn-menu-active");    },    onMenuHide : function(e){        this.el.removeClass("x-btn-menu-active");    }   });System.UI.Components.ButtonToggleMgr =(function(){   var groups = {};   function toggleGroup(btn, state){       if(state){           var g = groups[btn.toggleGroup];           for(var i = 0, l = g.length; i < l; i++){               if(g[i] != btn){                   g[i].toggle(false);               }           }       }   }   return {       register : function(btn){           if(!btn.toggleGroup){               return;           }           var g = groups[btn.toggleGroup];           if(!g){               g = groups[btn.toggleGroup] = [];           }           g.push(btn);           btn.on("toggle", toggleGroup);       },              unregister : function(btn){           if(!btn.toggleGroup){               return;           }           var g = groups[btn.toggleGroup];           if(g){               g.remove(btn);               btn.un("toggle", toggleGroup);           }       }   };})();System.UI.Components.MessageBox = function(){    var dlg, opt, mask, waitTimer;    var bodyEl, msgEl, textboxEl, textareaEl, progressEl, pp;    var buttons, activeTextEl, bwidth;     var handleButton = function(button){        dlg.hide();        System.callback(opt.fn, opt.scope||window, [button, activeTextEl.dom.value], 1);    };    var handleHide = function(){        if(opt && opt.cls){            dlg.el.removeClass(opt.cls);        }        if(waitTimer){            System.TaskMgr.stop(waitTimer);            waitTimer = null;        }    };        var updateButtons = function(b){        var width = 0;        if(!b){            buttons["ok"].hide();            buttons["cancel"].hide();            buttons["yes"].hide();            buttons["no"].hide();            dlg.footer.dom.style.display = 'none';            return width;        }        dlg.footer.dom.style.display = '';        for(var k in buttons){            if(typeof buttons[k] != "function"){                if(b[k]){                    buttons[k].show();                    buttons[k].setText(typeof b[k] == "string" ? b[k] : System.UI.Components.MessageBox.buttonText[k]);                    width += buttons[k].el.getWidth()+15;                }else{                    buttons[k].hide();                }            }        }        return width;    };        var handleEsc = function(d, k, e){        if(opt && opt.closable !== false){            dlg.hide();        }        if(e){            e.stopEvent();        }    };    return {          getDialog : function(){           if(!dlg){                dlg = new System.UI.Components.BasicDialog("x-msg-box", {                    autoCreate : true,                    shadow: false,                    draggable: true,                    proxyDrag: false,                    resizable:false,                    constrain:false,                    constraintoviewport:true,                    fixedcenter:true,                    collapsible : false,                    shim:false,                    modal: true,                    width:400, height:100,                    buttonAlign:"center",                    closeClick : function(){                        if(opt && opt.buttons && opt.buttons.no && !opt.buttons.cancel){                            handleButton("no");                        }else{                            handleButton("cancel");                        }                    }                });                dlg.on("hide", handleHide);                mask = dlg.mask;                dlg.addKeyListener(27, handleEsc);                buttons = {};                var bt = this.buttonText;                buttons["ok"] = dlg.addButton(bt["ok"], handleButton.createCallback("ok"));                buttons["yes"] = dlg.addButton(bt["yes"], handleButton.createCallback("yes"));                buttons["no"] = dlg.addButton(bt["no"], handleButton.createCallback("no"));                buttons["cancel"] = dlg.addButton(bt["cancel"], handleButton.createCallback("cancel"));                bodyEl = dlg.body.createChild({                    tag:"div",                    html:'<span class="ext-mb-text"></span><br /><input type="text" class="ext-mb-input" /><textarea class="ext-mb-textarea"></textarea><div class="ext-mb-progress-wrap"><div class="ext-mb-progress"><div class="ext-mb-progress-bar">&#160;</div></div></div>'                });                msgEl = bodyEl.dom.firstChild;                textboxEl = System.get(bodyEl.dom.childNodes[2]);                textboxEl.enableDisplayMode();                textboxEl.addKeyListener([10,13], function(){                    if(dlg.isVisible() && opt && opt.buttons){                        if(opt.buttons.ok){                            handleButton("ok");                        }else if(opt.buttons.yes){                            handleButton("yes");                        }                    }                });                textareaEl = System.get(bodyEl.dom.childNodes[3]);                textareaEl.enableDisplayMode();                progressEl = System.get(bodyEl.dom.childNodes[4]);                progressEl.enableDisplayMode();                var pf = progressEl.dom.firstChild;                pp = System.get(pf.firstChild);                pp.setHeight(pf.offsetHeight);            }            return dlg;        },        updateText : function(text){            if(!dlg.isVisible() && !opt.width){                dlg.resizeTo(this.maxWidth, 100);             }            msgEl.innerHTML = text || '&#160;';            var w = Math.max(Math.min(opt.width || msgEl.offsetWidth, this.maxWidth),                         Math.max(opt.minWidth || this.minWidth, bwidth));            if(opt.prompt){                activeTextEl.setWidth(w);            }            if(dlg.isVisible()){                dlg.fixedcenter = false;            }            dlg.setContentSize(w, bodyEl.getHeight());            if(dlg.isVisible()){                dlg.fixedcenter = true;            }            return this;        },        updateProgress : function(value, text){            if(text){                this.updateText(text);            }            pp.setWidth(Math.floor(value*progressEl.dom.firstChild.offsetWidth));            return this;        },               isVisible : function(){            return dlg && dlg.isVisible();          },        hide : function(){            if(this.isVisible()){                dlg.hide();            }          },        show:function(options){            if(this.isVisible()){                this.hide();            }            var d = this.getDialog();            opt = options;            d.setTitle(opt.title || "&#160;");            d.close.setDisplayed(opt.closable !== false);            activeTextEl = textboxEl;            opt.prompt = opt.prompt || (opt.multiline ? true : false);            if(opt.prompt){                if(opt.multiline){                    textboxEl.hide();                    textareaEl.show();                    textareaEl.setHeight(typeof opt.multiline == "number" ?                        opt.multiline : this.defaultTextHeight);                    activeTextEl = textareaEl;                }else{                    textboxEl.show();                    textareaEl.hide();                }            }else{                textboxEl.hide();                textareaEl.hide();            }            progressEl.setDisplayed(opt.progress === true);            this.updateProgress(0);            activeTextEl.dom.value = opt.value || "";            if(opt.prompt){                dlg.setDefaultButton(activeTextEl);                try{activeTextEl.focus();}catch(ex){}            }else{                var bs = opt.buttons;                var db = null;                if(bs && bs.ok){                    db = buttons["ok"];                }else if(bs && bs.yes){                    db = buttons["yes"];                }                dlg.setDefaultButton(db);                try{db.focus();}catch(ex){}            }            bwidth = updateButtons(opt.buttons);            this.updateText(opt.msg);            if(opt.cls){                d.el.addClass(opt.cls);            }            d.proxyDrag = opt.proxyDrag === true;            d.modal = opt.modal !== false;            d.mask = opt.modal !== false ? mask : false;            if(!d.isVisible()){                document.body.appendChild(dlg.el.dom);                d.animateTarget = null;                d.show(null);            }            return this;        },        progress : function(title, msg){            this.show({                title : title,                msg : msg,                buttons: false,                progress:true,                closable:false,                minWidth: this.minProgressWidth            });            return this;        },        alert : function(title, msg, fn, scope){            this.show({                title : title,                msg : msg,                buttons: this.OK,                fn: fn,                scope : scope            });            return this;        },        wait: function(msg, title){            this.show({                title : title,                msg : msg,                buttons: false,                closable:false,                progress:true,                modal:true,                width:300,                wait:true            });            waitTimer = System.TaskMgr.start({                run: function(i){                    System.MessageBox.updateProgress(((((i+20)%20)+1)*5)*.01);                },                interval: 1000            });            return this;        },        confirm : function(title, msg, fn, scope){            this.show({                title : title,                msg : msg,                buttons: this.YESNO,                fn: fn,                scope : scope            });            return this;        },        prompt : function(title, msg, fn, scope, multiline){            this.show({                title : title,                msg : msg,                buttons: this.OKCANCEL,                fn: fn,                minWidth:250,                scope : scope,                prompt:true,                multiline: multiline            });            return this;        },        OK : {ok:true},        YESNO : {yes:true, no:true},        OKCANCEL : {ok:true, cancel:true},        OKYESCANCEL : {ok:true,yse:true,cancel:true},        YESNOCANCEL : {yes:true, no:true, cancel:true},        defaultTextHeight : 75,        maxWidth : 600,        minWidth : 100,        minProgressWidth : 250,        buttonText : {            ok : "OK",            cancel : "Cancel",            yes : "Yes",            no : "No"        }    };}();window["MessageBox"]=System.UI.Components.MessageBox;System.UI.Components.ColorPalette = function(config){    System.UI.Components.ColorPalette.superclass.constructor.call(this, config);    this.addEvents({               select: true    });    if(this.handler){        this.on("select", this.handler, this.scope, true);    }};System.extend(System.UI.Components.ColorPalette, System.UI.Component, {       itemCls : "x-color-palette",       value : null,    ctype: "System.UI.Components.ColorPalette",      colors : [        "000000", "993300", "333300", "003300", "003366", "000080", "333399", "333333",        "800000", "FF6600", "808000", "008000", "008080", "0000FF", "666699", "808080",        "FF0000", "FF9900", "99CC00", "339966", "33CCCC", "3366FF", "800080", "969696",        "FF00FF", "FFCC00", "FFFF00", "00FF00", "00FFFF", "00CCFF", "993366", "C0C0C0",        "FF99CC", "FFCC99", "FFFF99", "CCFFCC", "CCFFFF", "99CCFF", "CC99FF", "FFFFFF"    ],    onRender : function(container, position){        var t = new System.DomHelper.MasterTemplate(            '<tpl><a href="#" class="color-{0}" hidefocus="on"><em><span style="background:#{0}">&#160;</span></em></a></tpl>'        );        var c = this.colors;        for(var i = 0, len = c.length; i < len; i++){            t.add([c[i]]);        }        var el = document.createElement("div");        el.className = this.itemCls;        t.overwrite(el);        container.dom.insertBefore(el, position);        this.el = System.get(el);        this.el.on("click", this.handleClick,  this, {delegate: "a"});    },    afterRender : function(){        System.UI.Components.ColorPalette.superclass.afterRender.call(this);        if(this.value){            var s = this.value;            this.value = null;            this.select(s);        }    },    handleClick : function(e, t){        e.preventDefault();        if(!this.disabled){            var c = t.className.match(/(?:^|\s)color-(.{6})(?:\s|$)/)[1];            this.select(c.toUpperCase());        }    },     select : function(color){        color = color.replace("#", "");        if(color != this.value){            var el = this.el;            if(this.value){                el.child("a.color-"+this.value).removeClass("x-color-palette-sel");            }            el.child("a.color-"+color).addClass("x-color-palette-sel");            this.value = color;            this.fireEvent("select", this, color);        }    }});System.UI.Components.DatePicker = function(config){    System.UI.Components.DatePicker.superclass.constructor.call(this, config);    this.value = config && config.value ?                 config.value.clearTime() : new Date().clearTime();    this.addEvents({               select: true    });    if(this.handler){        this.on("select", this.handler,  this.scope || this);    }      if(!this.disabledDatesRE && this.disabledDates){        var dd = this.disabledDates;        var re = "(?:";        for(var i = 0; i < dd.length; i++){            re += dd[i];            if(i != dd.length-1) re += "|";        }        this.disabledDatesRE = new RegExp(re + ")");    }};System.extend(System.UI.Components.DatePicker, System.UI.Component, {    todayText : "Today",    todayTip : "{0} (Spacebar)",       minDate : null,       maxDate : null,     minText : "This date is before the minimum date",      maxText : "This date is after the maximum date",       format : "m/d/y",        disabledDays : null,       disabledDaysText : "",      disabledDatesRE : null,      disabledDatesText : "",     constrainToViewport : true,     monthNames : Date.monthNames,     dayNames : Date.dayNames,    nextText: 'Next Month (Control+Right)',      prevText: 'Previous Month (Control+Left)',     monthYearText: 'Choose a month (Control+Up/Down to move years)',     startDay : 0,      setValue : function(value){        var old = this.value;        this.value = value.clearTime(true);        if(this.el){            this.update(this.value);        }    },    getValue : function(){        return this.value;    },    focus : function(){        if(this.el){            this.update(this.activeDate);        }    },    onRender : function(container, position){        var m = [             '<table cellspacing="0">',                '<tr><td class="x-date-left"><a href="#" title="', this.prevText ,'">&#160;</a></td><td class="x-date-middle" align="center"></td><td class="x-date-right"><a href="#" title="', this.nextText ,'">&#160;</a></td></tr>',                '<tr><td colspan="3"><table class="x-date-inner" cellspacing="0"><thead><tr>'];        var dn = this.dayNames;        for(var i = 0; i < 7; i++){            var d = this.startDay+i;            if(d > 6){                d = d-7;            }            m.push("<th><span>", dn[d].substr(0,1), "</span></th>");        }        m[m.length] = "</tr></thead><tbody><tr>";        for(var i = 0; i < 42; i++) {            if(i % 7 == 0 && i != 0){                m[m.length] = "</tr><tr>";            }            m[m.length] = '<td><a href="#" hidefocus="on" class="x-date-date" tabIndex="1"><em><span></span></em></a></td>';        }        m[m.length] = '</tr></tbody></table></td></tr><tr><td colspan="3" class="x-date-bottom" align="center"></td></tr></table>';        var el = document.createElement("div");        el.className = "x-date-picker";        el.innerHTML = m.join("");        container.dom.insertBefore(el, position);        this.el = System.get(el);        new System.UI.ClickRepeater(this.el.child("td.x-date-left a"), {handler: this.showPrevMonth, scope: this});        new System.UI.ClickRepeater(this.el.child("td.x-date-right a"), {handler: this.showNextMonth, scope: this});        this.el.on("mousewheel", this.handleMouseWheel,  this);        var kn = new System.DomHelper.KeyNav(this.el, {            "left" : function(e){                e.ctrlKey ?                    this.showPrevMonth() :                    this.update(this.activeDate.add("d", -1));            },            "right" : function(e){                e.ctrlKey ?                    this.showNextMonth() :                    this.update(this.activeDate.add("d", 1));            },            "up" : function(e){                e.ctrlKey ?                    this.showNextYear() :                    this.update(this.activeDate.add("d", -7));            },            "down" : function(e){                e.ctrlKey ?                    this.showPrevYear() :                    this.update(this.activeDate.add("d", 7));            },            "pageUp" : function(e){                this.showNextMonth();            },            "pageDown" : function(e){                this.showPrevMonth();            },            "enter" : function(e){                e.stopPropagation();                return true;            },            scope : this        });        this.el.on("click", this.handleDateClick,  this, {delegate: "a.x-date-date"});        this.el.addKeyListener(System.Event.EventObject.SPACE, this.selectToday,  this);        this.el.unselectable();                this.cells = this.el.select("table.x-date-inner tbody td");        this.textNodes = this.el.query("table.x-date-inner tbody span");        var mmenu = new System.UI.Components.menu.Menu({            plain:true,            cls: "x-date-mmenu",            allowOtherMenus : true        });        var menuGroup = System.DomHelper.id()+"months";        for(var i = 0; i < 12; i++){            mmenu.add(new System.UI.Components.menu.CheckItem({                id: "mm-"+i,                text: this.monthNames[i],                group:menuGroup,                month: i            }));        }        mmenu.on({            "beforeshow" : function(){                mmenu.items.get("mm-"+(this.activeDate || this.value).getMonth()).setChecked(true);            },            "itemclick" : function(item){                var d = (this.activeDate || this.value).clone();                d.setMonth(item.month);                this.update(d);            },            "show" : function(m){                this.visibleRegion = m.el.getRegion().adjust(2, 2, -2, -2);            },            "mouseout" : function(m, e){                if(!this.visibleRegion.contains(e.getPoint())){                    m.hide();                }            },            scope: this        });        this.mbtn = new System.UI.Components.Button(this.el.child("td.x-date-middle", true), {            menu: mmenu,            text: "&#160;",            menuAlign: "c-c?",            tooltip: this.monthYearText        });        var today = (new Date()).dateFormat(this.format);        var todayBtn = new System.UI.Components.Button(this.el.child("td.x-date-bottom", true), {            text: String.format(this.todayText, today),            tooltip: String.format(this.todayTip, today),            handler: this.selectToday,            scope: this        });                if(System.UserAgent.ie){            this.el.repaint();        }        this.update(this.value);    },    showPrevMonth : function(e){        this.update(this.activeDate.add("mo", -1));    },     showNextMonth : function(e){        this.update(this.activeDate.add("mo", 1));    },    showPrevYear : function(){        this.update(this.activeDate.add("y", -1));    },    showNextYear : function(){        this.update(this.activeDate.add("y", 1));    },    handleMouseWheel : function(e){        var delta = e.getWheelDelta();        if(delta > 0){            this.showPrevMonth();            e.stopEvent();        } else if(delta < 0){            this.showNextMonth();            e.stopEvent();        }    },    handleDateClick : function(e, t){        e.stopEvent();        if(t.dateValue && !System.fly(t.parentNode).hasClass("x-date-disabled")){            this.setValue(new Date(t.dateValue));            this.fireEvent("select", this, this.value);        }    },    selectToday : function(){        this.setValue(new Date().clearTime());        this.fireEvent("select", this, this.value);    },    update : function(date){        var vd = this.activeDate;        this.activeDate = date;        if(vd && this.el){            var t = date.getTime();            if(vd.getMonth() == date.getMonth() && vd.getFullYear() == date.getFullYear()){                this.cells.removeClass("x-date-selected");                this.cells.each(function(c){                   if(c.dom.firstChild.dateValue == t){                       c.addClass("x-date-selected");                       setTimeout(function(){                            try{c.dom.firstChild.focus();}catch(e){}                       }, 50);                       return false;                   }                });                return;            }        }        var days = date.getDaysInMonth();        var firstOfMonth = date.getFirstDateOfMonth();        var startingPos = firstOfMonth.getDay()-this.startDay;        if(startingPos <= this.startDay){            startingPos += 7;        }        var pm = date.add("mo", -1);        var prevStart = pm.getDaysInMonth()-startingPos;        var cells = this.cells.elements;        var textEls = this.textNodes;        days += startingPos;                var day = 86400000;        var d = (new Date(pm.getFullYear(), pm.getMonth(), prevStart)).clearTime();        var today = new Date().clearTime().getTime();        var sel = date.clearTime().getTime();        var min = this.minDate ? this.minDate.clearTime() : Number.NEGATIVE_INFINITY;        var max = this.maxDate ? this.maxDate.clearTime() : Number.POSITIVE_INFINITY;        var ddMatch = this.disabledDatesRE;        var ddText = this.disabledDatesText;        var ddays = this.disabledDays ? this.disabledDays.join("") : false;        var ddaysText = this.disabledDaysText;        var format = this.format;        var setCellClass = function(cal, cell){            cell.title = "";            var t = d.getTime();            cell.firstChild.dateValue = t;            if(t == today){                cell.className += " x-date-today";                cell.title = cal.todayText;            }            if(t == sel){                cell.className += " x-date-selected";                setTimeout(function(){                    try{cell.firstChild.focus();}catch(e){}                }, 50);            }                        if(t < min) {                cell.className = " x-date-disabled";                cell.title = cal.minText;                return;            }            if(t > max) {                cell.className = " x-date-disabled";                cell.title = cal.maxText;                return;            }            if(ddays){                if(ddays.indexOf(d.getDay()) != -1){                    cell.title = ddaysText;                    cell.className = " x-date-disabled";                }            }            if(ddMatch && format){                var fvalue = d.dateFormat(format);                if(ddMatch.test(fvalue)){                    cell.title = ddText.replace("%0", fvalue);                    cell.className = " x-date-disabled";                }            }        };        var i = 0;        for(; i < startingPos; i++) {            textEls[i].innerHTML = (++prevStart);            d.setDate(d.getDate()+1);            cells[i].className = "x-date-prevday";            setCellClass(this, cells[i]);        }        for(; i < days; i++){            intDay = i - startingPos + 1;            textEls[i].innerHTML = (intDay);            d.setDate(d.getDate()+1);            cells[i].className = "x-date-active";            setCellClass(this, cells[i]);        }        var extraDays = 0;        for(; i < 42; i++) {             textEls[i].innerHTML = (++extraDays);             d.setDate(d.getDate()+1);             cells[i].className = "x-date-nextday";             setCellClass(this, cells[i]);        }        this.mbtn.setText(this.monthNames[date.getMonth()] + " " + date.getFullYear());        if(!this.internalRender){            var main = this.el.dom.firstChild;            var w = main.offsetWidth;            this.el.setWidth(w + this.el.getBorderWidth("lr"));            System.fly(main).setWidth(w);            this.internalRender = true;                        if(System.userAgent.opera && !this.secondPass){                main.rows[0].cells[1].style.width = (w - (main.rows[0].cells[0].offsetWidth+main.rows[0].cells[2].offsetWidth)) + "px";                this.secondPass = true;                this.update.defer(10, this, [date]);            }        }    }});})();