(function(){if(typeof(window['System'])=='undefined'){window['System']={};}if(typeof(window['System'].DomHelper)=='undefined'){throw new Error('errot include "System.Data",need "System.DomHelper" support!');}System.Data={};System.Data.SortTypes = {       none : function(s){        return s;    },     stripTagsRE : /<\/?[^>]+>/gi,     asText : function(s){        return String(s).replace(this.stripTagsRE, "");    },     asUCText : function(s){        return String(s).toUpperCase().replace(this.stripTagsRE, "");    },     asUCString : function(s) {     return String(s).toUpperCase();    },     asDate : function(s) {        if(!s){            return 0;        }        if(s instanceof Date){            return s.getTime();        }     return Date.parse(String(s));    },     asFloat : function(s) {     var val = parseFloat(String(s).replace(/,/g, ""));        if(isNaN(val)){ val = 0;}     return val;    },      asInt : function(s) {        var val = parseInt(String(s).replace(/,/g, ""));        if(isNaN(val)){ val = 0;}     return val;    }};System.Data.Record = function(data, id){ if(id || id === 0){  this.id=id; }else{  System.Data.Record.AUTO_ID=System.Data.Record.AUTO_ID+1;  this.id=System.Data.Record.AUTO_ID; }    this.data = data;};System.Data.Record.create = function(o){    var f = function(){        System.Data.Record.apply(this, arguments);    };        (function(o){  for(var m in o){   f.prototype[m]=o[m];  } })(System.Data.Record.prototype);    var p = f.prototype;    p.fields = new System.MixedCollection(false, function(field){        return field.name;    });    for(var i = 0, len = o.length; i < len; i=i+1){       p.fields.add(new System.Data.Field(o[i]));    }    f.getField = function(name){        return p.fields.get(name);      };    return f;};System.Data.Record.AUTO_ID = 1000;System.Data.Record.EDIT = 'edit';System.Data.Record.REJECT = 'reject';System.Data.Record.COMMIT = 'commit';System.Data.Record.prototype = {       dirty : false,    editing : false,    error: null,    modified: null,    join : function(store){        this.store = store;    },    set : function(name, value){        if(this.data[name] == value){            return;        }        this.dirty = true;        if(!this.modified){            this.modified = {};        }        if(typeof this.modified[name] == 'undefined'){            this.modified[name] = this.data[name];        }        this.data[name] = value;        if(!this.editing){            this.store.afterEdit(this);        }           },       get : function(name){        return this.data[name];     },      beginEdit : function(){        this.editing = true;        this.modified = {};     },       cancelEdit : function(){        this.editing = false;        delete this.modified;    },      endEdit : function(){        this.editing = false;        if(this.dirty && this.store){            this.store.afterEdit(this);        }    },       reject : function(){        var m = this.modified;        for(var n in m){            if(typeof m[n] != "function"){                this.data[n] = m[n];            }        }        this.dirty = false;        delete this.modified;        this.editing = false;        if(this.store){            this.store.afterReject(this);        }    },      commit : function(){        this.dirty = false;        delete this.modified;        this.editing = false;        if(this.store){            this.store.afterCommit(this);        }    },        hasError : function(){        return (this.error !== null);    },       clearError : function(){        this.error = null;    }};System.Data.Field = function(config){    if(typeof config == "string"){        config = {name: config};    }       (function(a,o){  for(var m in o){   a[m]=o[m];  } })(this,config);        if(!this.type){        this.type = "auto";    }        var st = System.Data.SortTypes;        if(typeof this.sortType == "string"){        this.sortType = st[this.sortType];    }      if(!this.sortType){        switch(this.type){            case "string":                this.sortType = st.asUCString;                break;            case "date":                this.sortType = st.asDate;                break;            default:                this.sortType = st.none;        }    }     var stripRe = /[\$,%]/g;       if(!this.convert){        var cv, dateFormat = this.dateFormat;        switch(this.type){            case "":            case "auto":            case undefined:                cv = function(v){ return v; };                break;            case "string":                cv = function(v){ return String(v); };                break;            case "int":                cv = function(v){                    return v !== undefined && v !== null && v !== '' ?                           parseInt(String(v).replace(stripRe, ""), 10) : '';                    };                break;            case "float":                cv = function(v){                    return v !== undefined && v !== null && v !== '' ?                           parseFloat(String(v).replace(stripRe, ""), 10) : '';                     };                break;            case "bool":            case "boolean":                cv = function(v){ return v === true || v === "true" || v == 1; };                break;            case "date":                cv = function(v){                    if(!v){                        return '';                    }                    if(v instanceof Date){                        return v;                    }                    if(dateFormat){                        if(dateFormat == "timestamp"){                            return new Date(v*1000);                        }                        return Date.parseDate(v, dateFormat);                    }                    var parsed = Date.parse(v);                    return parsed ? new Date(parsed) : null;                };             break;                    }        this.convert = cv;    }};System.Data.Field.prototype = {    dateFormat: null,    defaultValue: "",    mapping: null,    sortType : null,    sortDir : "ASC"};System.Data.DataReader = function(meta, recordType){    this.meta = meta;    this.recordType = recordType instanceof Array ?         System.Data.Record.create(recordType) : recordType;};System.Data.DataReader.prototype = {    };System.Data.XmlReader = function(meta, recordType){    System.Data.DataReader.call(this, meta, recordType);};System.Data.XmlReader.prototype={        read : function(response){        var doc = response.responseXML;        if(!doc) {            throw {message: "XmlReader.read: XML Document not available"};        }        return this.readRecords(doc);    },    readRecords : function(doc){                this.xmlData = doc;        var root = doc.documentElement || doc;     var q = System.DomHelper.DomQuery;     var recordType = this.recordType, fields = recordType.prototype.fields;     var sid = this.meta.id;     var totalRecords = 0, success = true;     if(this.meta.totalRecords){         totalRecords = q.selectNumber(this.meta.totalRecords, root, 0);     }                if(this.meta.success){            var sv = q.selectValue(this.meta.success, root, true);            success = sv !== false && sv !== 'false';     }     var records = [];     var ns = q.select(this.meta.record, root);        for(var i = 0, len = ns.length; i < len; i=i+1) {         var n = ns[i];         var values = {};         var id = sid ? q.selectValue(sid, n) : undefined;         for(var j = 0, jlen = fields.length; j < jlen; j=j+1){             var f = fields.items[j];                var v = q.selectValue(f.mapping || f.name, n, f.defaultValue);             v = f.convert(v);             values[f.name] = v;         }         var record = new recordType(values, id);         record.node = n;         records[records.length] = record;     }     return {         success : success,         records : records,         totalRecords : totalRecords || records.length     };    }};})();