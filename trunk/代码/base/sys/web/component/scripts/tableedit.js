(function(){ var dh=System.DomHelper; var util=Wade.util; var dom=Wade.dom;  Wade.component.TableEdit=function(tableName,encode,clickFn){  this.tableName = tableName;  this.table = dom.getElement(tableName);  this.header = this.table.rows[0];  this.rowIndex = 0;  this.isSelected = false;  this.encode = encode == null ? false : encode;  this.isChanged = false;    this.clickFn=clickFn;  if(this.table && this.table.nodeType){   System.EventManager.on(this.table,"click",this.clickRow,this);  } }; Wade.component.TableEdit.prototype={  setCellValue:function(hcell, cell, content) {   cell.id = hcell.id;   cell.style.display = hcell.style.display;   content = this.encodeCellValue(content);   cell.innerHTML = content;  },  encodeCellValue:function(content) {   if (this.encode && content != null) {    content = content.replace("&", "&amp;");    content = content.replace("<", "&lt;");    content = content.replace(">", "&gt;");   }   return content;  },  decodeCellValue:function(content) {   if (this.encode && content != null) {    content = content.replace("&lt;", "<");    content = content.replace("&gt;", ">");    content = content.replace("&amp;", "&");   }   return content;  },  getCell:function(row, cellName) {   var hcells = this.header.cells;   for (var i=0; i<hcells.length; i++) {    var cell = row.cells[i];    if (hcells[i].id == "col_" + cellName) return cell;   }   return null;  },  triggerCell:function(cellName, cellValue) {   var row = dom.getElementByTag(window.event.srcElement, "tr");   var cell = this.getCell(row, cellName);   var x_tag = this.getCell(row, "X_TAG");     cell.innerHTML = cellValue;   if (x_tag.innerHTML == "") {    x_tag.innerHTML = "2";   }  },  verifyTable:function(changed) {      if (changed != null && changed) {    if (!this.isChanged) {     alert("\u8868\u683C\u6570\u636E\u6CA1\u6709\u66F4\u65B0\uFF01");     return false;    }else {     return true;    }   }else {    if (!this.isSelected) {     alert("\u8BF7\u9009\u62E9\u8868\u683C\uFF01");     return false;    }   }   return true;  },    checkRow :function(cellName,isupdate,key) {   var cellNames = cellName.split(",");   var keys = key != null ? key.split(",") : "";   for (var j=0; j<cellNames.length; j++) {        var field = document.getElementById(cellNames[j]);       if(field && field.nodeType){if(!field.value || field.value==""){var desc=field.getAttribute("desc");if(!desc){desc=cellNames[j];}       alert("\u5B57\u6BB5\u201C" + desc + "\u201D\u7684\u503C\u4E0D\u80FD\u4E3A\u7A7A");return false;}}       else{alert("\u4E0D\u5B58\u5728\u6807\u8BC6\u4E3A\u201C" +cellNames[j]+ "\u201D\u7684\u8F93\u5165\u57DF");return false;}   }        for (var i=1; i<this.table.rows.length; i++) {    var row = this.table.rows[i];    if (row.style.display == "none") continue;    var existNum=0;var cNames=[],cValues=[];    for (var k=0; k<this.header.cells.length; k++) {     var cellName=this.header.cells[k].id.substring("col_".length);     if (isupdate != null && isupdate && i == this.rowIndex) {      for (var n=0; n<keys.length; n++) {           if(keys[n] == cellName) {        var fieldValue = dom.getElementValue(keys[n]);        if(fieldValue != this.decodeCellValue(trim(row.cells[k].innerHTML))){         var error = this.header.cells[k].innerHTML+"\u662F\u4E3B\u952E\u4E0D\u80FD\u4FEE\u6539\uFF01";         alert(error);         return false;        }       }              }        continue;          }     for (var j=0; j<cellNames.length; j++) {       if(cellNames[j]!=cellName){continue;}else{       var field = document.getElementById(cellNames[j]);       if(!field || !field.nodeType) continue;       var desc=field.getAttribute("desc");          var cellStr="";var cell=row.cells[k];          if(cell){cellStr=cell.innerText;}          if(cellStr.trim()== field.value.trim()){existNum++;cNames.push((desc?desc:cellName));cValues.push(cellStr);}      }     }    }    if(existNum==cellNames.length){alert("\u5173\u952E\u5B57\u6BB5\u201C" + cNames.join(",") + "\u201D\u5DF2\u7ECF\u5B58\u5728\u540C\u6837\u7684\u503C\u201C" + cValues.join(",") + "\u201D");return false;}    existNum=0;cNames=[];cNames=null;cValues=[];cValues=null;;   }   return true;  },  insertRow:function() {   var row = this.table.insertRow(this.table.rows.length);     var hcells = this.header.cells;   for (var i=0; i<hcells.length; i++) {    if (hcells[i].id == null || !util.startsWith(hcells[i].id, "col_")) continue;     var cell=dh.insertHtml("beforeend",row,"<td></td>");    var cellName = hcells[i].id.substring("col_".length);    var field = dom.getElement(cellName);       if (cellName == "X_TAG") {     this.setCellValue(hcells[i], cell, "0");    } else {     if (field != null) {      this.setCellValue(hcells[i], cell, field.value);      field.value = '';     } else {      this.setCellValue(hcells[i], cell, '');     }    }   }  },  updateRow:function() {   var row = this.table.rows[this.rowIndex];     var hcells = this.header.cells;   for (var i=0; i<hcells.length; i++) {    if (hcells[i].id == null || !util.startsWith(hcells[i].id, "col_")) continue;     var cell = row.cells[i];    var cellName = hcells[i].id.substring("col_".length);    var field = dom.getElement(cellName);       if (cellName == "X_TAG" && cell.innerText == "") {     this.setCellValue(hcells[i], cell, "2");    } else {     if (field != null) {      this.setCellValue(hcells[i], cell, field.value);      field.value = '';     }    }   }  },  deleteRow:function() {   var row = this.table.rows[this.rowIndex];     var isDelete = true;   var hcells = this.header.cells;   for (var i=0; i<hcells.length; i++) {    if (hcells[i].id == null || !util.startsWith(hcells[i].id, "col_")) continue;     var cell = row.cells[i];    var cellName = hcells[i].id.substring("col_".length);    var field = dom.getElement(cellName);     if (cellName == "X_TAG") {     if (cell.innerText == "" || cell.innerText == "2") {      this.setCellValue(hcells[i], cell, "1");      isDelete = false;     }    } else {     if (field != null) {      field.value = '';     }    }   }    if (isDelete) {    this.table.deleteRow(this.rowIndex);   } else {    row.style.display = "none";   }   this.isSelected = false;  },  clickRow:function(e) {      if(!e || !e.target) return;   for (var i=1; i<this.table.rows.length; i++) {    this.table.rows[i].className = null;   }   var row = System.fly(e.target).findParentNode("tr",4);   if (row == null || row.rowIndex == 0) return;    row.className = "selected";   this.rowIndex = row.rowIndex;   this.isSelected = true;   for (var i=0; i<this.header.cells.length; i++) {    var cellName = this.header.cells[i].id.substring("col_".length);    var field = dom.getElement(cellName);    if (field != null) {     var fieldValue = this.decodeCellValue(trim(row.cells[i].innerHTML));     if (field.tagName == "INPUT" && field.type != null && (field.type.toUpperCase() == "CHECKBOX" || field.type.toUpperCase() == "RADIO")) {      field.checked = fieldValue == field.value;     } else {      field.value = fieldValue;     }    }   }   if(typeof(this.clickFn)=="function"){    this.clickFn.apply(this,[e]);   }  },  getColsValue:function(cols, flag) {   var str = "";      var rows = this.table.rows;   for (var i=1; i<rows.length; i++) {    var cell = this.getCell(rows[i], cols);    if (cell == null) alert("column " + cols + " not found");        str = (flag == true) ? str + cell.innerText+ "," : str + "";   }   return str;  },   encodeValue:function(num, key, cols, def, flag) {   var str = "";      var rows = this.table.rows;   for (var i=0; i<num; i++) {    str = (flag != true) ? str + def  : str + "," + def;   }   for (var j=1; j<rows.length; j++) {    var key_value = this.getCell(rows[j], key);    var cols_value = this.getCell(rows[j], cols);    if (!key_value) alert("column " + key + " not found");    if (!cols_value) alert("column " + cols + " not found");    str = str.substring(0, key_value.innerText - 1) + cols_value.innerText + str.substring(key_value.innerText, num);   }   return str;  },  encodeTable:function(headstr) {   var str = "";   var rowcount = 0;    var rows = this.table.rows;   var hcells = this.header.cells;   var encodehead = headstr.split(",");    for (var i=1; i<rows.length; i++) {    if (this.getCell(rows[i], "X_TAG").innerText == "") continue;     var row = rows[i];    for (var j=0; j<encodehead.length; j++) {     var cell = this.getCell(row, encodehead[j]);     if (cell == null) alert("column " + encodehead[j] + " not found£¡");     str += util.getStrByPadLength(cell.innerText, true);    }    rowcount ++;   }   if(rowcount > 0) this.isChanged = true;   return this.tableName.substr(0, 4) + util.getStrByPadPrefix(rowcount) + util.getStrByPadPrefix(encodehead.length, 3) + str;  },  getTableData:function(headstr){   var rowcount = 0;    var rows = this.table.rows;   var hcells = this.header.cells;   var encodehead = headstr.split(",");      var ds=new Wade.DatasetList();   for (var i=1; i<rows.length; i++) {    if (this.getCell(rows[i], "X_TAG").innerText == "") continue;    var rowData=new Wade.DataMap();    var row = rows[i];    for (var j=0; j<encodehead.length; j++) {     var cell = this.getCell(row, encodehead[j]);     if (cell == null) alert("column " + encodehead[j] + " not found£¡");     rowData.put(encodehead[j],cell.innerText);    }    ds.add(rowData);    rowcount ++;   }   if(rowcount > 0) this.isChanged = true;   return ds;  },  getRowData:function(row,headstr){   var encodehead = headstr.split(",");   if(/^[-]?\d+$/.test(row))row=this.table.rows[row];   if(!row || !row.nodeType) return null;   if (this.getCell(row, "X_TAG").innerText == "") return null;      var rowData=new Wade.DataMap();   for (var j=0; j<encodehead.length; j++) {    var cell = this.getCell(row, encodehead[j]);    if (cell == null) alert("column " + encodehead[j] + " not found£¡");    rowData.put(encodehead[j],cell.innerText);   }   return rowData;    },    moveRowData:function(step, rowIndex) {   if (this.rowIndex == 0) return;   if (!rowIndex || "" == rowIndex) rowIndex = this.rowIndex;   if (!/^[-]?\d+$/.exec(step)) return;   if (!/^[-]?\d+$/.exec(rowIndex)) return;   if (parseInt(step) == 0) return;   var moveIndex = parseInt(rowIndex) + parseInt(step);   if (moveIndex <= 0)return ;   if (moveIndex > this.table.rows.length) return ;   if (parseInt(step) == 1 && moveIndex == this.table.rows.length) return ;      var row;   if (parseInt(step) != 1 && moveIndex == this.table.rows.length) {    row = this.table.insertRow();   } else {    row = this.table.insertRow(moveIndex < rowIndex ? moveIndex : moveIndex+1);   }   var hcells = this.header.cells;   for (var i=0; i<hcells.length; i++) {    var cell = row.insertCell(i);    this.setCellValue(hcells[i], cell, this.table.rows[moveIndex < rowIndex ? (rowIndex+1) : rowIndex].cells[i].innerText);   }   if (parseInt(step) != 1 && moveIndex+1 == this.table.rows.length) {    this.rowIndex = 1;    this.deleteRow();    this.rowIndex = this.table.rows.length-1;   } else {    if (moveIndex < rowIndex) {     this.rowIndex = rowIndex+1;     this.deleteRow();    } else {     this.deleteRow();     this.rowIndex = rowIndex+1;    }    this.rowIndex = moveIndex;   }   this.table.rows[this.rowIndex].className="selected";   this.isSelected = true;  }           }; window['TableEdit']=Wade.component.TableEdit;})();