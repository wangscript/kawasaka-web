(function(){if(typeof(Wade.component.tree)=='undefined'){Wade.component.tree=(function(){ var dh=System.DomHelper;  var dom = Wade.dom; var page=Wade.page; return {    treeRootClick : function(obj) {   var treeobj = obj.parentNode.parentNode;   var treechilds = treeobj.children;   var bodyobj = treechilds[treechilds.length - 1];   if (bodyobj.style.display == "") {    obj.className = "fold";    dom.hidden(bodyobj, true);   } else {    obj.className = "unfold";    dom.hidden(bodyobj, false);   }  },    treeNodeClick : function(obj) {   var liobj = obj.parentNode;   var lichilds = liobj.children;   var ulobj = lichilds[lichilds.length - 1];   if (ulobj.style.display == "") {    liobj.className = "fold";    dom.hidden(ulobj, true);   } else {    liobj.className = "unfold";    dom.hidden(ulobj, false);   }  },    treeSearchClick : function(obj) {   var searchobj = obj.parentNode.parentNode.children[0];   if (searchobj.style.display == "none") {    dom.hidden(searchobj, false);    obj.className = "searchSwitchOn";    obj.title = "\u5173\u95ED\u641C\u7D22";   } else {    dom.hidden(searchobj, true);    obj.className = "searchSwitchOff";    obj.title = "\u641C\u7D22";   }  },    treeNodeSearch : function(obj) {   var contobj = obj.parentNode.children[0];   var treeobj = obj.parentNode.parentNode;   if (!checkText(contobj, "\u641C\u7D22\u5185\u5BB9")) return false;   page.beginPageLoading();   Wade.component.tree.searchTreeChildNode(treeobj, contobj.value);   page.endPageLoading();   return true;  },  removeTreeNode:function(obj){   if(typeof(obj)=="string")obj=document.getElementById(obj);   if(!obj || !obj.nodeType)return;   obj=obj.parentNode;if(!obj || !obj.nodeType || !obj.tagName=="LI") return;   if(obj.parentNode)obj.parentNode.removeChild(obj);  },  removeTreeChildNodes:function(obj){   if(typeof(obj)=="string")obj=document.getElementById(obj);   if(!obj || !obj.nodeType)return;var node=obj;   obj=obj.parentNode;if(!obj || !obj.nodeType || !obj.tagName=="LI") return;   var li=obj;obj=dh.DomQuery.select("#" + dh.id(obj) + " ul:first");alert(obj);   if(obj && obj.length){obj=obj[0];if(obj.parentNode){    obj.parentNode.removeChild(obj);li.className="file";li=null;    node.onclick=null;node=null;   }}  },    searchTreeChildNode : function(object, keyword) {   var childs = object.children;   for (var i=0; i<childs.length; i++) {    var child = childs[i];    if (child.tagName == "A" && child.getAttribute("node") == "true") {     if (child.className == "result") {      child.className = "";     }     if (child.innerText.indexOf(keyword) != -1) {      child.className = "result";      Wade.component.tree.expandTreeParentNode(child);     }     continue;    }    Wade.component.tree.searchTreeChildNode(child, keyword);   }  },    expandTreeParentNode : function(object) {   if (object.className == "c_tree") {    if (object.children[0].className == "rootIfFordOn") {     var rootobj = object.children[0].children[0].children[1].children[0];     if (rootobj.className == "fold") {      if (rootobj.tagName == "SPAN") {       rootobj.click();      }     }    }    return;   }   if (object.className == "fold") {    if (object.tagName == "LI") {     object.children[0].click();    }   }   Wade.component.tree.expandTreeParentNode(object.parentNode);  },    treeRootCheckboxClick : function(chkobj) {   var rootchilds = chkobj.parentNode.parentNode.parentNode.parentNode.children;   var bodyobj = rootchilds[rootchilds.length - 1];   var ulchilds = bodyobj.children;   for (var i=0; i<ulchilds.length; i++) {    var lichilds = ulchilds[i].children;    for (var j=0; j<lichilds.length; j++) {     var chknodeobj = lichilds[j].children[1].children[0].children[0];     chknodeobj.checked = chkobj.checked;     Wade.component.tree.treeNodeCheckboxClick(chknodeobj);    }   }  },    treeNodeCheckboxClick : function(chkobj) {   var lichilds = chkobj.parentNode.parentNode.parentNode.children;   if (lichilds.length == 4) {    var childs = lichilds[3].children;    for (var i=0; i<childs.length; i++) {     var chknode = childs[i].children[1].children[0].children[0];     chknode.checked = chkobj.checked;     Wade.component.tree.treeNodeCheckboxClick(chknode);    }   }  },    treeTextClick : function() {   var selname = "SELECTED_TREE_TEXT";    var selelement = dom.getElement(selname);   if (selelement != null) {    selelement.id = null;    selelement.className = "text";   }   var srcelement = dom.getElementBySrc();   var txtelement = srcelement.parentNode;   if (txtelement != null) {    txtelement.id = selname;    txtelement.className = "text focus";   }  } };})();}})();