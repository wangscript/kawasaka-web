(function(){if(typeof(window['System'])=='undefined'){ window['System']={};}var domCount=0;var isOpera =System.UserAgent.opera,    isSafari = System.UserAgent.safari,    isGecko = System.UserAgent.gecko,    isIE = System.UserAgent.ie;var noBoxAdjust = System.isStrict ? {    select:1} : {    input:1, select:1, textarea:1};if(isIE || isGecko){    noBoxAdjust['button'] = 1;}var propCache = {};var camelRe = /(-[a-z])/gi;var camelFn = function(m, a){ return a.charAt(1).toUpperCase(); };var view = document['defaultView'];var unitPattern=/\d+(px|em|%|en|ex|pt|in|cm|mm|pc)$/i;var classReCache={};    System.DomHelper = function(){            var tempTableEl = null;    var emptyTags = /^(?:br|frame|hr|img|input|link|meta|range|spacer|wbr|area|param|col)$/i;              var patterns = {        HYPHEN: /(-[a-z])/i,         ROOT_TAG: /^body|html$/i,         OP_SCROLL:/^(?:inline|table-row)$/i    };                      var createHtml = function(o){        if(typeof o == 'string'){            return o;        }        var b = "";        if(!o.tag){            o.tag = "div";        }        b += "<" + o.tag;        for(var attr in o){           if(attr == "tag" || attr == "children" || attr == "cn" || attr == "html" || typeof o[attr] == "function"){ continue; }             if(attr == "style"){                var s = o["style"];                if(typeof s == "function"){                    s = s.call();                }                if(typeof s == "string"){                    b += ' style="' + s + '"';                }else if(typeof s == "object"){                    b += ' style="';                    for(var key in s){                        if(typeof s[key] != "function"){                            b += key + ":" + s[key] + ";";                        }                    }                    b += '"';                }            }else{                if(attr == "cls"){                    b += ' class="' + o["cls"] + '"';                }else if(attr == "htmlFor"){                    b += ' for="' + o["htmlFor"] + '"';                }else{                    b += " " + attr + '="' + o[attr] + '"';                }            }        }        if(emptyTags.test(o.tag)){            b += "/>";        }else{            b += ">";            var cn = o.children || o.cn;            if(cn){                if(cn instanceof Array){                    for(var i = 0, len = cn.length; i < len; i=i+1) {                        b += createHtml(cn[i], b);                    }                }else{                    b += createHtml(cn, b);                }            }            if(o.html){                b += o.html;            }            b += "</" + o.tag + ">";        }        return b;    };           var createDom = function(o, parentNode){        var el = document.createElement(o.tag);        var useSet = el.setAttribute ? true : false;         for(var attr in o){            if(attr == "tag" || attr == "children" || attr == "cn" || attr == "html" || attr == "style" || typeof o[attr] == "function"){ continue; }            if(attr=="cls"){                el.className = o["cls"];            }else{                if(useSet){ el.setAttribute(attr, o[attr]);}                else { el[attr] = o[attr];}            }        }        System.DomHelper.applyStyles(el, o.style);        var cn = o.children || o.cn;        if(cn){            if(cn instanceof Array){                for(var i = 0, len = cn.length; i < len; i=i+1) {                    createDom(cn[i], el);                }            }else{                createDom(cn, el);            }        }        if(o.html){            el.innerHTML = o.html;        }        if(parentNode){           parentNode.appendChild(el);        }        return el;    };    var ieTable = function(depth, s, h, e){        tempTableEl.innerHTML = [s, h, e].join('');        var i = 0, el = tempTableEl;                while(i < depth){            el = el.firstChild;            i=i+1;        }        return el;    };      var ts = '<table>',        te = '</table>',        tbs = ts+'<tbody>',        tbe = '</tbody>'+te,        trs = tbs + '<tr>',        tre = '</tr>'+tbe;        var insertIntoTable = function(tag, where, el, html){        if(!tempTableEl){            tempTableEl = document.createElement('div');        }        var node;        var before = null;        if(tag == 'td'){            if(where == 'afterbegin' || where == 'beforeend'){                 return;            }            if(where == 'beforebegin'){                before = el;                el = el.parentNode;            } else{                before = el.nextSibling;                el = el.parentNode;            }            node = ieTable(4, trs, html, tre);        }        else if(tag == 'tr'){            if(where == 'beforebegin'){                before = el;                el = el.parentNode;                node = ieTable(3, tbs, html, tbe);            } else if(where == 'afterend'){                before = el.nextSibling;                el = el.parentNode;                node = ieTable(3, tbs, html, tbe);            } else{                 if(where == 'afterbegin'){                    before = el.firstChild;                }                node = ieTable(4, trs, html, tre);            }        } else if(tag == 'tbody'){            if(where == 'beforebegin'){                before = el;                el = el.parentNode;                node = ieTable(2, ts, html, te);            } else if(where == 'afterend'){                before = el.nextSibling;                el = el.parentNode;                node = ieTable(2, ts, html, te);            } else{                if(where == 'afterbegin'){                    before = el.firstChild;                }                node = ieTable(3, tbs, html, tbe);            }        } else{             if(where == 'beforebegin' || where == 'afterend'){                 return;            }            if(where == 'afterbegin'){                before = el.firstChild;            }            node = ieTable(2, ts, html, te);        }        el.insertBefore(node, before);        return node;    };           var getXY = function() {        if (document.documentElement['getBoundingClientRect']) {             return function(el) {                if(el.dom){ el=el.dom;}                var box = el.getBoundingClientRect();                var rootNode = el.ownerDocument;                return [box.left + System.DomHelper.getDocumentScrollLeft(rootNode), box.top +                        System.DomHelper.getDocumentScrollTop(rootNode)];            };        } else {            return function(el) {                 if(el.dom){ el=el.dom;}                var pos = [el.offsetLeft, el.offsetTop];                var parentNode = el.offsetParent;                                var accountForBody = (isSafari &&                        System.DomHelper.getSytle(el,'position') == 'absolute' &&                        el.offsetParent == el.ownerDocument.body);                if (parentNode != el) {                    while (parentNode) {                        pos[0] += parentNode.offsetLeft;                        pos[1] += parentNode.offsetTop;                        if (!accountForBody && isSafari &&                                 System.DomHelper.getSytle(parentNode,'position') == 'absolute' ) {                             accountForBody = true;                        }                        parentNode = parentNode.offsetParent;                    }                }                if (accountForBody) {                     pos[0] -= el.ownerDocument.body.offsetLeft;                    pos[1] -= el.ownerDocument.body.offsetTop;                }                 parentNode = el.parentNode;                                while ( parentNode.tagName && !patterns.ROOT_TAG.test(parentNode.tagName) )                 {                    if (parentNode.scrollTop || parentNode.scrollLeft) {                                                if (!patterns.OP_SCROLL.test(System.DomHelper.getStyle(parentNode,'display'))) {                             if (!isOpera || System.DomHelper.getStyle(parentNode,'overflow') !== 'visible') {                                 pos[0] -= parentNode.scrollLeft;                                pos[1] -= parentNode.scrollTop;                            }                        }                    }                                        parentNode = parentNode.parentNode;                 }                return pos;             };          }    }();        var testElement = function(node, method) {        return node && node.nodeType == 1 && ( !method || method(node) );    };            return {        useDom : false,    getDom:function(el){        if(!el){return null;}        return el.dom?el.dom:(typeof(el)=="string"?document.getElementById(el):el);    },    id:function(el,value){        el=System.DomHelper.getDom(el);        domCount=domCount+1;var id=value || ("system-gen"+domCount);        return el?(el.id?el.id:(el.id=id)):id;    },      findParent : function(el,simpleSelector, maxDepth, returnEl){        var p = el, b = document.body, depth = 0, dq = System.DomHelper.DomQuery, stopEl;        maxDepth = maxDepth || 50;        if(typeof maxDepth != "number"){            stopEl = System.DomHelper.getDom(maxDepth);            maxDepth = 10;        }        while(p && p.nodeType == 1 && depth < maxDepth && p != b && p != stopEl){            if(dq.is(p, simpleSelector)){                return returnEl ? p : p;            }            depth=depth+1;            p = p.parentNode;        }        return null;    },        findParentNode : function(el,simpleSelector, maxDepth, returnEl){        var p = el ? el.parentNode:null;        return p ? System.DomHelper.findParent(el,simpleSelector, maxDepth, returnEl) : null;    },        remove : function(el){        if(el && el.parentNode){            el.parentNode.removeChild(el);        }    },      markup : function(o){        return createHtml(o);    },    addUnits : function(v, defaultUnit){        if(v === "" || v == "auto"){            return v;        }        if(v === undefined){            return '';        }        if(typeof v == "number" || !unitPattern.test(v)){            return v + (defaultUnit || 'px');        }        return v;    },    removeUnits :function(v){        if(typeof v == "number"){            return v;        }        if(v==="" || v === undefined){            return 0;        }        if(typeof v == "string" || !unitPattern.test(v)){            var unit=unitPattern.exec(v);            if(unit && unit.length && unit.length==2){                unit=unit[1];                return v.replace(unit,'');            }        }    },      addClass : function(el,className){        if(className instanceof Array){            for(var i = 0, len = className.length; i < len; i=i+1) {             System.DomHelper.addClass(el,className[i]);            }        }else{            if(el && className && !this.hasClass(el,className)){                el.className = el.className + " " + className;            }        }        return el;    },     radioClass : function(el,className){        if(!el){return;}        var siblings = el.parentNode.childNodes;        for(var i = 0; i < siblings.length; i=i+1) {         var s = siblings[i];         if(s.nodeType == 1){            System.DomHelper.removeClass(el,className);         }        }        this.addClass(el,className);        return el;    },      removeClass : function(el,className){        if(!el || !className || !el.className){            return el;        }        if(className instanceof Array){            for(var i = 0, len = className.length; i < len; i=i+1) {             this.removeClass(el,className[i]);            }        }else{            if(this.hasClass(el,className)){                var re = classReCache[className];                if (!re) {                   re = new RegExp('(?:^|\\s+)' + className + '(?:\\s+|$)', "g");                   classReCache[className] = re;                }                el.className =                    el.className.replace(re, " ");            }        }        return el;    },     toggleClass : function(el,className){        el=this.getDom(el);if(!el || !el.nodeType) return null;        if(this.hasClass(el,className)){            this.removeClass(el,className);        }else{            this.addClass(el,className);        }        return System.fly(el);    },     hasClass : function(el,className){        return el && className && (' '+el.className+' ').indexOf(' '+className+' ') != -1;    },     replaceClass : function(el,oldClassName, newClassName){        el=this.getDom(el);if(!el || !el.nodeType) return null;        this.removeClass(el,oldClassName);        this.addClass(el,newClassName);        return System.fly(el);    },       getStyle : function(){        return view && view.getComputedStyle ?            function(el,prop){                var v, cs, camel;                el=System.DomHelper.getDom(el);                if(!(el && el.nodeType)) return;                if(prop == 'float'){                    prop = "cssFloat";                }                if(v = el.style[prop]){                    return v;                }                if(cs = view.getComputedStyle(el, "")){                    if(!(camel = propCache[prop])){                        camel = propCache[prop] = prop.replace(camelRe, camelFn);                    }                    return cs[camel];                }                return null;            } :            function(el,prop){                var  v, cs, camel;                el=System.DomHelper.getDom(el);                if(!(el && el.nodeType)) return;                if(prop == 'opacity'){                    if(typeof el.style.filter == 'string'){                        var m = el.style.filter.match(/alpha\(opacity=(.*)\)/i);                        if(m){                            var fv = parseFloat(m[1]);                            if(!isNaN(fv)){                                return fv ? fv / 100 : 0;                            }                        }                    }                    return 1;                }else if(prop == 'float'){                    prop = "styleFloat";                }                if(!(camel = propCache[prop])){                    camel = propCache[prop] = prop.replace(camelRe, camelFn);                }                if(v = el.style[camel]){                    return v;                }                if(cs = el.currentStyle){                    return cs[camel];                }                return null;            };    }(),      setStyle : function(el,prop, value){        el=this.getDom(el);if(!(el && el.nodeType)) return;        if(typeof prop == "string"){            var camel;            if(!(camel = propCache[prop])){                camel = propCache[prop] = prop.replace(camelRe, camelFn);            }            if(camel == 'opacity') {                this.setOpacity(value);            }else{                el.style[camel] = value;            }        }else{            for(var style in prop){                if(typeof prop[style] != "function"){                   this.setStyle(style, prop[style]);                }            }        }        return System.fly(el);    },        setOpacity : function(el,opacity){        var s = el.style;        if(isIE){            s.zoom = 1;            s.filter = (s.filter || '').replace(/alpha\([^\)]*\)/gi,"") +                       (opacity == 1 ? "" : "alpha(opacity=" + opacity * 100 + ")");        }else{            s.opacity = opacity;        }        return el;    },        applyStyles : function(el, styles){        if(styles){           el = this.getDom(el);           if(typeof styles == "string"){               var re = /\s?([a-z\-]*)\:\s?([^;]*);?/gi;               var matches;               while ((matches = re.exec(styles)) !== null){                   System.DomHelper.setStyle(el,matches[1], matches[2]);               }           }else if (typeof styles == "object"){               for (var style in styles){                  System.DomHelper.setStyle(style, styles[style]);               }           }else if (typeof styles == "function"){                System.DomHelper.applyStyles(el, styles.call());           }        }    },     insertHtml : function(where, el, html){        where = where.toLowerCase();        if(isIE){            var tag = el.tagName.toLowerCase();            if(tag == "table" || tag == "tbody" || tag == "tr" || tag == 'td'){                var rs;                if((rs = insertIntoTable(tag, where, el, html))){                    return rs;                }            }            switch(where){                case "beforebegin":                    el.insertAdjacentHTML(where, html);                    return el.previousSibling;                case "afterbegin":                    el.insertAdjacentHTML(where, html);                    return el.firstChild;                case "beforeend":                    el.insertAdjacentHTML(where, html);                    return el.lastChild;                case "afterend":                    el.insertAdjacentHTML(where, html);                    return el.nextSibling;            }            throw 'Illegal insertion point -> "' + where + '"';        }        var range = el.ownerDocument.createRange();        var frag;        switch(where){             case "beforebegin":                range.setStartBefore(el);                frag = range.createContextualFragment(html);                el.parentNode.insertBefore(frag, el);                return el.previousSibling;             case "afterbegin":                if(el.firstChild){                    range.setStartBefore(el.firstChild);                    frag = range.createContextualFragment(html);                    el.insertBefore(frag, el.firstChild);                    return el.firstChild;                }else{                    el.innerHTML = html;                    return el.firstChild;                }                break;            case "beforeend":                if(el.lastChild){                    range.setStartAfter(el.lastChild);                    frag = range.createContextualFragment(html);                    el.appendChild(frag);                    return el.lastChild;                }else{                    el.innerHTML = html;                    return el.lastChild;                }                break;            case "afterend":                range.setStartAfter(el);                frag = range.createContextualFragment(html);                el.parentNode.insertBefore(frag, el.nextSibling);                return el.nextSibling;            }            throw 'Illegal insertion point -> "' + where + '"';    },     insertBefore : function(el, o, returnElement){        return this.doInsert(el, o, returnElement, "beforeBegin");    },    insertAfter : function(el, o, returnElement){        return this.doInsert(el, o, returnElement, "afterEnd", "nextSibling");    },    insertFirst : function(el, o, returnElement){        return this.doInsert(el, o, returnElement, "afterBegin");    },    doInsert : function(el, o, returnElement, pos, sibling){        el = System.DomHelper.getDom(el);        var newNode;        if(this.useDom){            newNode = createDom(o, null);            el.parentNode.insertBefore(newNode, sibling ? el[sibling] : el);        }else{            var html = createHtml(o);            newNode = this.insertHtml(pos, el, html);        }        return returnElement ? System.get(newNode, true) : newNode;    },    append : function(el, o, returnElement){        el = this.getDom(el);        var newNode;        if(this.useDom){            newNode = createDom(o, null);            el.appendChild(newNode);        }else{            var html = createHtml(o);            newNode = this.insertHtml("beforeEnd", el, html);        }        return returnElement ? System.get(newNode, true):newNode;     },       getX:function(el){        var f = function(el) {            return System.DomHelper.getXY(el)[0];        };                return this.batch(el, f, this, true);    },    getY:function(el){         var f = function(el) {            return System.DomHelper.getXY(el)[1];        };                return this.batch(el, f, this, true);       },    getXY: function(el) {        var f = function(el) {            if ( (el.parentNode === null || el.offsetParent === null ||                    System.DomHelper.getStyle(el,'display') == 'none') && el != el.ownerDocument.body) {                return false;            }            return getXY(el);        };                return System.DomHelper.batch(el, f, System.DomHelper, true);    },    setXY: function(el, pos, noRetry) {        var f = function(el) {            if(el.dom){ el=el.dom; }            var style_pos = this.getStyle(el, 'position');            if (style_pos == 'static') {                 this.setStyle(el, 'position', 'relative');                style_pos = 'relative';            }            var pageXY = this.getXY(el);            if (pageXY === false) {                 return false;             }                        var delta = [                 parseInt( this.getStyle(el, 'left'), 10 ),                parseInt( this.getStyle(el, 'top'), 10 )            ];                    if ( isNaN(delta[0]) ) {                delta[0] = (style_pos == 'relative') ? 0 : el.offsetLeft;            }             if ( isNaN(delta[1]) ) {                 delta[1] = (style_pos == 'relative') ? 0 : el.offsetTop;            }                 if (pos[0] !== null) { el.style.left = pos[0] - pageXY[0] + delta[0] + 'px'; }            if (pos[1] !== null) { el.style.top = pos[1] - pageXY[1] + delta[1] + 'px'; }                      if (!noRetry) {                var newXY = this.getXY(el);                               if ( (pos[0] !== null && newXY[0] != pos[0]) ||                     (pos[1] !== null && newXY[1] != pos[1]) ) {                   this.setXY(el, pos, true);               }            }                    };                System.DomHelper.batch(el, f, System.DomHelper, true);    } ,    setX: function(el, x) {        System.DomHelper.setXY(el, [x, null]);    },    setY: function(el, y) {        System.DomHelper.setXY(el, [null, y]);    } ,    getDocumentScrollLeft: function(doc) {        doc = doc || document;        return Math.max(doc.documentElement.scrollLeft, doc.body.scrollLeft);    },     getDocumentScrollTop: function(doc) {        doc = doc || document;        return Math.max(doc.documentElement.scrollTop, doc.body.scrollTop);    },        getDocumentHeight: function() {        var scrollHeight = (document['compatMode'] != 'CSS1Compat') ? document.body.scrollHeight : document.documentElement['scrollHeight'];        var h = Math.max(scrollHeight, System.DomHelper.getViewportHeight());        return h;    },    getDocumentWidth: function() {        var scrollWidth = (document['compatMode'] != 'CSS1Compat') ? document.body.scrollWidth : document.documentElement['scrollWidth'];        var w = Math.max(scrollWidth, System.DomHelper.getViewportWidth());        return w;    },    getViewportHeight: function() {        var height = window['self'].innerHeight;         var mode = document['compatMode'];            if ( (mode || isIE) && !isOpera ) {             height = (mode == 'CSS1Compat') ?                    document.documentElement['clientHeight'] :                     document.body.clientHeight;         }            return height;    },      getViewportWidth: function() {        var width = window['self'].innerWidth;          var mode = document['compatMode'];                if (mode || isIE) {             width = (mode == 'CSS1Compat') ?                    document.documentElement['clientWidth'] :                     document.body.clientWidth;         }        return width;    }, getViewWidth:function(docView){return docView?this.getDocumentWidth():this.getViewportWidth();}, getViewHeight:function(docView){return docView?this.getDocumentHeight():this.getViewportHeight();},    getRegion: function(el) {        var f = function(el) {            if ( (el.parentNode === null || el.offsetParent === null ||                    this.getStyle(el, 'display') == 'none') && el != el.ownerDocument.body) {                return false;            }               var region =(new  System.DomHelper.Region()).getRegion(el);            return region;        };                return System.DomHelper.batch(el, f, System.DomHelper, true);    },    batch: function(el, method, o, override) {        el = (el && (el.tagName || el.item)) ? el : System.DomHelper.getDom(el);         if (!el || !method) {            return false;        }         var scope = (override) ? o : window;               if (el.tagName || el.length === undefined) {             return method.call(scope, el, o);        }         var collection = [];         for (var i = 0, len = el.length; i < len; ++i) {            collection[collection.length] = method.call(scope, el[i], o);        }                return collection;    } ,     overwrite : function(el, o, returnElement){        el = System.DomHelper.getDom(el);        el.innerHTML = createHtml(o);        return returnElement ? System.get(el.firstChild, true) : el.firstChild;    },       isAncestor: function(haystack, needle) {        haystack = System.DomHelper.getDom(haystack);        needle = System.DomHelper.getDom(needle);                if (!haystack || !needle) {            return false;        }        if (haystack.contains && needle.nodeType && !isSafari) {             return haystack.contains(needle);        }        else if (haystack.compareDocumentPosition && needle.nodeType ) {            return !!(haystack.compareDocumentPosition(needle) & 16);        } else if (needle.nodeType) {                        return !!this.getAncestorBy(needle, function(el) {                return el == haystack;             });         }        return false;    },    getAncestorBy: function(node, method) {        while (node = node.parentNode) {             if (testElement(node, method) ) {                return node;            }        }         return null;    },  getAncestorByTagName:function(node,tagName){  node=System.DomHelper.getDom(node);if(!node){return null;}  var x=function(y){return y["tagName"]&&y["tagName"].toUpperCase()==tagName.toUpperCase();};  return System.DomHelper.getAncestorBy(node,x); },    inDocument: function(el) {        var f=function(el){return this.isAncestor(document.documentElement,el);};        return System.DomHelper.batch(el,f,System.DomHelper,true);    },      createTemplate : function(o){        var html = createHtml(o);        return new System.DomHelper.Template(html);    }    };}();System.id=System.DomHelper.id;System.simpleGet=System.DomHelper.getDom;System.DomHelper.Template = function(html){    if(html instanceof Array){        html = html.join("");    }else if(arguments.length > 1){        html = Array.prototype.join.call(arguments, "");    }        this.html = html;    };System.DomHelper.Template.prototype = {        applyTemplate : function(values){        if(this.compiled){            return this.compiled(values);        }        var useF = this.disableFormats !== true;        var fm = System.DomHelper.Template.Format, tpl = this;        var fn = function(m, name, format, args){            if(format && useF){                if(format.substr(0, 5) == "this."){                    return tpl.call(format.substr(5), values[name]);                }else{                    if(args){                             var re = /^\s*['"](.*)["']\s*$/;                        args = args.split(',');                        for(var i = 0, len = args.length; i < len; i=i+1){                            args[i] = args[i].replace(re, "$1");                        }                        args = [values[name]].concat(args);                    }else{                        args = [values[name]];                    }                    return fm[format].apply(fm, args);                }            }else{                return values[name] !== undefined ? values[name] : "";            }        };        return this.html.replace(this.re, fn);    },          set : function(html, compile){        this.html = html;        this.compiled = null;        if(compile){            this.compile();        }        return this;    },    disableFormats : false,      re : /\{([\w-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g,      compile : function(){        var fm = System.DomHelper.Template.Format;        var useF = this.disableFormats !== true;        var sep = isGecko ? "+" : ",";        var fn = function(m, name, format, args){            if(format && useF){                args = args ? ',' + args : "";                if(format.substr(0, 5) != "this."){                    format = "fm." + format + '(';                }else{                    format = 'this.call("'+ format.substr(5) + '", ';                    args = "";                }            }else{                args= ''; format = ("(values['" + name + "'] == undefined ? '' : ");            }            return "'"+ sep + format + "values['" + name + "']" + args + ")"+sep+"'";        };        var body;                if(isGecko){            body = "this.compiled = function(values){ return '" +                   this.html.replace(/(\r\n|\n)/g, '\\n').replace("'", "\\'").replace(this.re, fn) +                    "';};";        }else{            body = ["this.compiled = function(values){ return ['"];            body.push(this.html.replace(/(\r\n|\n)/g, '\\n').replace("'", "\\'").replace(this.re, fn));            body.push("'].join('');};");            body = body.join('');        }        eval(body);        return this;    },     call : function(fnName, value){        return this[fnName](value);    },      insertFirst: function(el, values, returnElement){        return this.doInsert('afterBegin', el, values, returnElement);    },       insertBefore: function(el, values, returnElement){        return this.doInsert('beforeBegin', el, values, returnElement);    },       insertAfter : function(el, values, returnElement){        return this.doInsert('afterEnd', el, values, returnElement);    },       append : function(el, values, returnElement){        return this.doInsert('beforeEnd', el, values, returnElement);    },    doInsert : function(where, el, values, returnEl){        el = System.DomHelper.getDom(el);        var newNode = System.DomHelper.insertHtml(where, el, this.applyTemplate(values));        return returnEl ? System.get(newNode,true): newNode;    },       overwrite : function(el, values, returnElement){        el = System.DomHelper.getDom(el);        el.innerHTML = this.applyTemplate(values);        return returnElement ? System.get(el.firstChild, true): el.firstChild;    }};System.DomHelper.Template.prototype.apply =System.DomHelper.Template.prototype.applyTemplate;System.DomHelper.Template.Format = (function(){    var trimRe = /^\s+|\s+$/g;    return {            ellipsis : function(value, len){            if(value && value.length > len){                return value.substr(0, len-3)+"...";            }            return value;        },          undef : function(value){            return typeof value != "undefined" ? value : "";        },          htmlEncode : function(value){            return !value ? value : String(value).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");        },            trim : function(value){            return String(value).replace(trimRe, "");        },            substr : function(value, start, length){            return String(value).substr(start, length);        },            lowercase : function(value){            return String(value).toLowerCase();        },            uppercase : function(value){            return String(value).toUpperCase();        },              capitalize : function(value){            return !value ? value : value.charAt(0).toUpperCase() + value.substr(1).toLowerCase();        },               call : function(value, fn){            if(arguments.length > 2){                var args = Array.prototype.slice.call(arguments, 2);                args.unshift(value);                return (eval(fn)).apply(window, args);            }else{                return (eval(fn)).call(window, value);            }        },            usMoney : function(v){            v = (Math.round((v-0)*100))/100;            v = (v == Math.floor(v)) ? v + ".00" : ((v*10 == Math.floor(v*10)) ? v + "0" : v);            return "$" + v ;        },             date : function(v, format){            if(!v){                return "";            }            if(!(v instanceof Date)){                v = new Date(Date.parse(v));            }            return v.dateFormat(format || "m/d/Y");        },             dateRenderer : function(format){            return function(v){                return System.DomHelper.Template.Format.date(v, format);              };        },             stripTagsRE : /<\/?[^>]+>/gi,             stripTags : function(v){            return !v ? v : String(v).replace(this.stripTagsRE, "");        },        toUtf8:function(v){            return !v?v:String(v).replace(/[^\u0000-\u00FF]/g,function($0){return escape($0).replace(/(%u)(\w{4})/gi,"&#x$2;");});        },        toGbk:function(v){            return !v?v:unescape(String(v).replace(/&#x/g,'%u').replace(/;/g,''));        }    };})();System.DomHelper.Template.from = function(el){    el = System.DomHelper.getDom(el);    return new System.DomHelper.Template(el.value || el.innerHTML);  };System.DomHelper.MasterTemplate = function(){    System.DomHelper.MasterTemplate.superclass.constructor.apply(this, arguments);    this.originalHtml = this.html;    var st = {};    var m, re = this.subTemplateRe;    re.lastIndex = 0;    var subIndex = 0;    while(m = re.exec(this.html)){        var name = m[1], content = m[2];        st[subIndex] = {            name: name,            index: subIndex,            buffer: [],            tpl : new System.DomHelper.Template(content)        };        if(name){            st[name] = st[subIndex];        }        st[subIndex].tpl.compile();        st[subIndex].tpl.call = this.call.createDelegate(this);        subIndex++;    }    this.subCount = subIndex;    this.subs = st;};System.extend(System.DomHelper.MasterTemplate, System.DomHelper.Template, {       subTemplateRe : /<tpl(?:\sname="([\w-]+)")?>((?:.|\n)*?)<\/tpl>/gi,     add : function(name, values){        if(arguments.length == 1){            values = arguments[0];            name = 0;        }        var s = this.subs[name];        s.buffer[s.buffer.length] = s.tpl.apply(values);        return this;    },    fill : function(name, values, reset){        var a = arguments;        if(a.length == 1 || (a.length == 2 && typeof a[1] == "boolean")){            values = a[0];            name = 0;            reset = a[1];        }        if(reset){            this.reset();        }        for(var i = 0, len = values.length; i < len; i++){            this.add(name, values[i]);        }        return this;    },    reset : function(){        var s = this.subs;        for(var i = 0; i < this.subCount; i++){            s[i].buffer = [];        }        return this;    },    applyTemplate : function(values){        var s = this.subs;        var replaceIndex = -1;        this.html = this.originalHtml.replace(this.subTemplateRe, function(m, name){            return s[++replaceIndex].buffer.join("");        });        return System.DomHelper.MasterTemplate.superclass.applyTemplate.call(this, values);    },        apply : function(){        return this.applyTemplate.apply(this, arguments);    },       compile : function(){return this;}});System.DomHelper.MasterTemplate.prototype.addAll = System.DomHelper.MasterTemplate.prototype.fill;System.DomHelper.MasterTemplate.from = function(el){    el = System.DomHelper.getDom(el);    return new System.DomHelper.MasterTemplate(el.value || el.innerHTML);  };System.DomHelper.DomQuery = function(){    var cache = {}, simpleCache = {}, valueCache = {};    var nonSpace = /\S/;    var trimRe = /^\s+|\s+$/g;    var tplRe = /\{(\d+)\}/g;    var modeRe = /^(\s?[\/>]\s?|\s|$)/;    var tagTokenRe = /^(#)?([\w-\*]+)/;        function child(p, index){        var i = 0;        var n = p.firstChild;        while(n){            if(n.nodeType == 1){               i=i+1;               if(i == index){                   return n;               }            }            n = n.nextSibling;        }        return null;    }        function next(n){        while((n = n.nextSibling) && n.nodeType != 1){         return n;        }    }        function prev(n){        while((n = n.previousSibling) && n.nodeType != 1){        return n;        }    }        function clean(d){        var n = d.firstChild, ni = -1;      while(n){          var nx = n.nextSibling;          if(n.nodeType == 3 && !nonSpace.test(n.nodeValue)){              d.removeChild(n);          }else{           ni=ni+1;              n.nodeIndex = ni;          }          n = nx;      }      return this;  }    function byClassName(c, a, v, re, cn){        if(!v){            return c;        }        var r = [];        for(var i=0,ci; ci = c[i]; i=i+1){            cn = ci.className;            if(cn && (' '+cn+' ').indexOf(v) != -1){                r[r.length] = ci;            }        }        return r;    }    function attrValue(n, attr){        if(!n.tagName && typeof n.length != "undefined"){            n = n[0];        }        if(!n){            return null;        }        if(attr == "for"){            return n.htmlFor;        }        if(attr == "class" || attr == "className"){            return n.className;        }        return n.getAttribute(attr) || n[attr];              }        function getNodes(ns, mode, tagName){        var result = [], cs;        if(!ns){            return result;        }        mode = mode ? mode.replace(trimRe, "") : "";        tagName = tagName || "*";        if(typeof ns.getElementsByTagName != "undefined"){            ns = [ns];           }        if(mode != "/" && mode != ">"){            for(var i = 0, ni; ni = ns[i]; i=i+1){                cs = ni.getElementsByTagName(tagName);                for(var j = 0, ci; ci = cs[j]; j=j+1){                    result[result.length] = ci;                }            }        }else{            for(var i = 0, ni; ni = ns[i]; i=i+1){                var cn = ni.getElementsByTagName(tagName);                for(var j = 0, cj; cj = cn[j]; j=j+1){                    if(cj.parentNode == ni){                        result[result.length] = cj;                    }                }            }        }        return result;    }        function concat(a, b){        if(b.slice){            return a.concat(b);        }        for(var i = 0, l = b.length; i < l; i=i+1){            a[a.length] = b[i];        }        return a;    }        function byTag(cs, tagName){        if(cs.tagName || cs == document){            cs = [cs];        }        if(!tagName){            return cs;        }        var r = []; tagName = tagName.toLowerCase();        for(var i = 0, ci; ci = cs[i]; i=i+1){            if(ci.nodeType == 1 && ci.tagName.toLowerCase()==tagName){                r[r.length] = ci;            }        }        return r;     }        function byId(cs, attr, id){        if(cs.tagName || cs == document){            cs = [cs];        }        if(!id){            return cs;        }        var r = [];        for(var i = 0,ci; ci = cs[i]; i=i+1){            if(ci && ci.id == id){                r[r.length] = ci;                return r;            }        }        return r;     }        function byAttribute(cs, attr, value, op, custom){        var r = [], st = custom=="{";        var f = System.DomHelper.DomQuery.operators[op];        for(var i = 0; ci = cs[i]; i=i+1){            var a;            if(st){                a = System.DomHelper.DomQuery.getStyle(ci, attr);            }            else if(attr == "class" || attr == "className"){                a = ci.className;            }else if(attr == "for"){                a = ci.htmlFor;            }else if(attr == "href"){                a = ci.getAttribute("href", 2);            }else{                a = ci.getAttribute(attr);            }            if((f && f(a, value)) || (!f && a)){                r[r.length] = ci;            }        }        return r;    }        function byPseudo(cs, name, value){        return System.DomHelper.DomQuery.pseudos[name](cs, value);    }        var isIE = window['ActiveXObject'] ? true : false;    var key = 30803;    function nodupIEXml(cs){     key=key+1;        var d = key;        cs[0].setAttribute("_nodup", d);        var r = [cs[0]];        for(var i = 1, len = cs.length; i < len; i=i+1){            var c = cs[i];            if(!c.getAttribute("_nodup") != d){                c.setAttribute("_nodup", d);                r[r.length] = c;            }        }        for(var i = 0, len = cs.length; i < len; i=i+1){            cs[i].removeAttribute("_nodup");        }        return r;    }    function nodup(cs){        if(!cs){            return [];        }        var len = cs.length, c, i, r = cs, cj;        if(!len || typeof cs.nodeType != "undefined" || len == 1){            return cs;        }        if(isIE && typeof cs[0].selectSingleNode != "undefined"){            return nodupIEXml(cs);        }        key=key+1;var d = key;        cs[0]._nodup = d;        for(i = 1; c = cs[i]; i=i+1){            if(c._nodup != d){                c._nodup = d;            }else{                r = [];                for(var j = 0; j < i; j=j+1){                    r[r.length] = cs[j];                }                for(j = i+1; cj = cs[j]; j=j+1){                    if(cj._nodup != d){                        cj._nodup = d;                        r[r.length] = cj;                    }                }                return r;            }        }        return r;    }    function quickDiffIEXml(c1, c2){        key=key+1;var d = key;        for(var i = 0, len = c1.length; i < len; i=i+1){            c1[i].setAttribute("_qdiff", d);        }        var r = [];        for(var i = 0, len = c2.length; i < len; i=i+1){            if(c2[i].getAttribute("_qdiff") != d){                r[r.length] = c2[i];            }        }        for(var i = 0, len = c1.length; i < len; i=i+1){           c1[i].removeAttribute("_qdiff");        }        return r;    }    function quickDiff(c1, c2){        var len1 = c1.length;        if(!len1){            return c2;        }        if(isIE && c1[0].selectSingleNode){            return quickDiffIEXml(c1, c2);        }        key=key+1;var d = key;        for(var i = 0; i < len1; i=i+1){            c1[i]._qdiff = d;        }        var r = [];        for(var i = 0, len = c2.length; i < len; i=i+1){            if(c2[i]._qdiff != d){                r[r.length] = c2[i];            }        }        return r;    }        function quickId(ns, mode, root, id){        if(ns == root){           var d = root.ownerDocument || root;           return d.getElementById(id);        }        ns = getNodes(ns, mode, "*");        return byId(ns, null, id);    }        return {        getStyle : function(el, name){            return System.DomHelper.getStyle(el,name);        },                compile : function(path, type){                        while(path.substr(0, 1)=="/"){                path = path.substr(1);            }            type = type || "select";                        var fn = ["var f = function(root){\n var mode; var n = root || document;\n"];            var q = path, mode, lq;            var tk = System.DomHelper.DomQuery.matchers;            var tklen = tk.length;            var mm;            while(q && lq != q){                lq = q;                var tm = q.match(tagTokenRe);                if(type == "select"){                    if(tm){                        if(tm[1] == "#"){                            fn[fn.length] = 'n = quickId(n, mode, root, "'+tm[2]+'");';                        }else{                            fn[fn.length] = 'n = getNodes(n, mode, "'+tm[2]+'");';                        }                        q = q.replace(tm[0], "");                    }else if(q.substr(0, 1) != '@'){                        fn[fn.length] = 'n = getNodes(n, mode, "*");';                    }                }else{                    if(tm){                        if(tm[1] == "#"){                            fn[fn.length] = 'n = byId(n, null, "'+tm[2]+'");';                        }else{                            fn[fn.length] = 'n = byTag(n, "'+tm[2]+'");';                        }                        q = q.replace(tm[0], "");                    }                }                while(!(mm = q.match(modeRe))){                    var matched = false;                    for(var j = 0; j < tklen; j=j+1){                        var t = tk[j];                        var m = q.match(t.re);                        if(m){                            fn[fn.length] = t.select.replace(tplRe, function(x, i){                                                    return m[i];                                                });                            q = q.replace(m[0], "");                            matched = true;                            break;                        }                    }                                        if(!matched){                        throw 'Error parsing selector, parsing failed at "' + q + '"';                    }                }                if(mm[1]){                    fn[fn.length] = 'mode="'+mm[1]+'";';                    q = q.replace(mm[1], "");                }            }            fn[fn.length] = "return nodup(n);\n}";            eval(fn.join(""));            return f;        },                        select : function(path, root, type){            if(!root || root == document){                root = document;            }            if(typeof root == "string"){                root = document.getElementById(root);            }            var paths = path.split(",");            var results = [];            for(var i = 0, len = paths.length; i < len; i=i+1){                var p = paths[i].replace(trimRe, "");                if(!cache[p]){                    cache[p] = System.DomHelper.DomQuery.compile(p);                    if(!cache[p]){                        throw p + " is not a valid selector";                    }                }                var result = cache[p](root);                if(result && result != document){                    results = results.concat(result);                }            }            return results;        },                        selectNode : function(path, root){            return System.DomHelper.DomQuery.select(path, root)[0];        },                        selectValue : function(path, root, defaultValue){            path = path.replace(trimRe, "");            if(!valueCache[path]){                valueCache[path] = System.DomHelper.DomQuery.compile(path, "select");            }            var n = valueCache[path](root);            n = n[0] ? n[0] : n;            var v = (n && n.firstChild ? n.firstChild.nodeValue : null);            return (v === null ? defaultValue : v);        },                        selectNumber : function(path, root, defaultValue){            var v = System.DomHelper.DomQuery.selectValue(path, root, defaultValue || 0);            return parseFloat(v);        },                        is : function(el, ss){            if(typeof el == "string"){                el = document.getElementById(el);            }            var isArray = (el instanceof Array);            var result = System.DomHelper.DomQuery.filter(isArray ? el : [el], ss);            return isArray ? (result.length == el.length) : (result.length > 0);        },                        filter : function(els, ss, nonMatches){            ss = ss.replace(trimRe, "");            if(!simpleCache[ss]){                simpleCache[ss] = System.DomHelper.DomQuery.compile(ss, "simple");            }            var result = simpleCache[ss](els);            return nonMatches ? quickDiff(result, els) : result;        },                        matchers : [{                re: /^\.([\w-]+)/,                select: 'n = byClassName(n, null, " {1} ");'            }, {                re: /^\:([\w-]+)(?:\(((?:[^\s>\/]*|.*?))\))?/,                select: 'n = byPseudo(n, "{1}", "{2}");'            },{                re: /^(?:([\[\{])(?:@)?([\w-]+)\s?(?:(=|.=)\s?['"]?(.*?)["']?)?[\]\}])/,                select: 'n = byAttribute(n, "{2}", "{4}", "{3}", "{1}");'            }, {                re: /^#([\w-]+)/,                select: 'n = byId(n, null, "{1}");'            },{                re: /^@([\w-]+)/,                select: 'return {firstChild:{nodeValue:attrValue(n, "{1}")}};'            }        ],                        operators : {            "=" : function(a, v){                return a == v;            },            "!=" : function(a, v){                return a != v;            },            "^=" : function(a, v){                return a && a.substr(0, v.length) == v;            },            "$=" : function(a, v){                return a && a.substr(a.length-v.length) == v;            },            "*=" : function(a, v){                return a && a.indexOf(v) !== -1;            },            "%=" : function(a, v){                return (a % v) == 0;            }        },                        pseudos : {            "first-child" : function(c){                var r = [], n;                for(var i = 0, ci; ci = n = c[i]; i=i+1){                    while((n = n.previousSibling) && n.nodeType != 1);                    if(!n){                        r[r.length] = ci;                    }                }                return r;            },                        "last-child" : function(c){                var r = [];                for(var i = 0, ci; ci = n = c[i]; i=i+1){                    while((n = n.nextSibling) && n.nodeType != 1);                    if(!n){                        r[r.length] = ci;                    }                }                return r;            },                        "nth-child" : function(c, a){                var r = [];                if(a != "odd" && a != "even"){                    for(var i = 0, ci; ci = c[i]; i=i+1){                        var m = child(ci.parentNode, a);                        if(m == ci){                            r[r.length] = m;                        }                    }                    return r;                }                var p;                                for(var i = 0, l = c.length; i < l; i=i+1){                    var cp = c[i].parentNode;                    if(cp != p){                        clean(cp);                        p = cp;                    }                }                                for(var i = 0, ci; ci = c[i]; i=i+1){                    var m = false;                    if(a == "odd"){                        m = ((ci.nodeIndex+1) % 2 == 1);                    }else if(a == "even"){                        m = ((ci.nodeIndex+1) % 2 == 0);                    }                    if(m){                        r[r.length] = ci;                    }                }                return r;            },                        "only-child" : function(c){                var r = [];                for(var i = 0, ci; ci = c[i]; i=i+1){                    if(!prev(ci) && !next(ci)){                        r[r.length] = ci;                    }                }                return r;            },                        "empty" : function(c){                var r = [];                for(var i = 0, ci; ci = c[i]; i=i+1){                    var cns = ci.childNodes, j = 0, cn, empty = true;                    while(cn = cns[j]){                        j=j+1;                        if(cn.nodeType == 1 || cn.nodeType == 3){                            empty = false;                            break;                        }                    }                    if(empty){                        r[r.length] = ci;                    }                }                return r;            },                        "contains" : function(c, v){                var r = [];                for(var i = 0, ci; ci = c[i]; i=i+1){                    if(ci.innerHTML.indexOf(v) !== -1){                        r[r.length] = ci;                    }                }                return r;            },            "nodeValue" : function(c, v){                var r = [];                for(var i = 0, ci; ci = c[i]; i=i+1){                    if(ci.firstChild && ci.firstChild.nodeValue == v){                        r[r.length] = ci;                    }                }                return r;            },            "checked" : function(c){                var r = [];                for(var i = 0, ci; ci = c[i]; i=i+1){                    if(ci.checked == true){                        r[r.length] = ci;                    }                }                return r;            },                        "not" : function(c, ss){                return System.DomHelper.DomQuery.filter(c, ss, true);            },                        "odd" : function(c){                return this["nth-child"](c, "odd");            },                        "even" : function(c){                return this["nth-child"](c, "even");            },                        "nth" : function(c, a){                return c[a-1] || [];            },                        "first" : function(c){                return c[0] || [];            },                        "last" : function(c){                return c[c.length-1] || [];            },                        "has" : function(c, ss){                var s = System.DomHelper.DomQuery.select;                var r = [];                for(var i = 0, ci; ci = c[i]; i=i+1){                    if(s(ss, ci).length > 0){                        r[r.length] = ci;                    }                }                return r;            },                        "next" : function(c, ss){                var is = System.DomHelper.DomQuery.is;                var r = [];                for(var i = 0, ci; ci = c[i]; i=i+1){                    var n = next(ci);                    if(n && is(n, ss)){                        r[r.length] = ci;                    }                }                return r;            },                        "prev" : function(c, ss){                var is = System.DomHelper.DomQuery.is;                var r = [];                for(var i = 0, ci; ci = c[i]; i=i+1){                    var n = prev(ci);                    if(n && is(n, ss)){                        r[r.length] = ci;                    }                }                return r;            }        }          };}();System.query=System.DomHelper.DomQuery.select;System.DomHelper.Element=function(element, forceNew){    var dom = (typeof element == "string") ? document.getElementById(element) : element;    if(!dom){ return null;}    if(!forceNew && System.DomHelper.Element.cache[dom.id]){         return System.DomHelper.Element.cache[dom.id];    }        this.dom = dom;      this.id = dom.id || System.DomHelper.id(dom);};System.DomHelper.Element.prototype={    originalDisplay : "",    visibilityMode : 1,     defaultUnit : "px",    setVisibilityMode : function(visMode){        this.visibilityMode = visMode;        return this;    },     enableDisplayMode : function(display){        this.setVisibilityMode(System.DomHelper.Element.DISPLAY);        if(typeof display != "undefined") this.originalDisplay = display;        return this;    },    findParentNode : function(simpleSelector, maxDepth, returnEl){        return System.DomHelper.findParentNode(this.dom,simpleSelector, maxDepth, returnEl);    },    up : function(simpleSelector, maxDepth){        return this.findParentNode(simpleSelector, maxDepth, true);    },        is : function(simpleSelector){        return System.DomHelper.DomQuery.is(this.dom, simpleSelector);        },        animate : function(args, duration, onComplete, easing, animType){        this.anim(args, {duration: duration, callback: onComplete, easing: easing}, animType);        return this;    },        anim : function(args, opt, animType, defaultDur, defaultEase, cb){        animType = animType || 'run';        opt = opt || {};        var anim = System.AnimHandler[animType](            this.dom, args,            (opt.duration || defaultDur) || .35,            (opt.easing || defaultEase) || 'easeOut',            function(){                System.callback(cb, this);                System.callback(opt.callback, opt.scope || this, [this, opt]);            },            this        );        opt.anim = anim;        return anim;    },      preanim : function(a, i){        return !a[i] ? false : (typeof a[i] == "object" ? a[i]: {duration: a[i+1], callback: a[i+2], easing: a[i+3]});    },    clean : function(forceReclean){        if(this.isCleaned && forceReclean !== true){            return this;        }        var ns = /\S/;        var d = this.dom, n = d.firstChild, ni = -1;      while(n){          var nx = n.nextSibling;          if(n.nodeType == 3 && !ns.test(n.nodeValue)){              d.removeChild(n);          }else{              n.nodeIndex = ++ni;          }          n = nx;      }      this.isCleaned = true;      return this;  },        calcOffsetsTo : function(el){        el = System.get(el), d = el.dom;        var restorePos = false;        if(el.getStyle('position') == 'static'){            el.position('relative');            restorePos = true;        }        var x = 0, y =0;        var op = this.dom;        while(op && op != d && op.tagName != 'HTML'){            x+= op.offsetLeft;            y+= op.offsetTop;            op = op.offsetParent;        }        if(restorePos){            el.position('static');        }        return [x, y];    },      scrollIntoView : function(container, hscroll){        var c = System.DomHelper.getDom(container) || document.body;        var el = this.dom;        var o = this.calcOffsetsTo(c),            l = o[0],            t = o[1],            b = t+el.offsetHeight,            r = l+el.offsetWidth;                var ch = c.clientHeight;        var ct = parseInt(c.scrollTop, 10);        var cl = parseInt(c.scrollLeft, 10);        var cb = ct + ch;        var cr = cl + c.clientWidth;        if(t < ct){         c.scrollTop = t;        }else if(b > cb){            c.scrollTop = b-ch;        }        if(hscroll !== false){            if(l < cl){                c.scrollLeft = l;            }else if(r > cr){                c.scrollLeft = r-c.clientWidth;            }        }        return this;    },    scrollChildIntoView : function(child){        System.fly(child, '_scrollChildIntoView').scrollIntoView(this);    },       autoHeight : function(animate, duration, onComplete, easing){        var oldHeight = this.getHeight();        this.clip();        this.setHeight(1);         setTimeout(function(){            var height = parseInt(this.dom.scrollHeight, 10);             if(!animate){                this.setHeight(height);                this.unclip();                if(typeof onComplete == "function"){                    onComplete();                }            }else{                this.setHeight(oldHeight);                 this.setHeight(height, animate, duration, function(){                    this.unclip();                    if(typeof onComplete == "function") onComplete();                }.createDelegate(this), easing);            }        }.createDelegate(this), 0);        return this;    },       contains : function(el){        if(!el){return false;}        return System.DomHelper.isAncestor(this.dom, el.dom ? el.dom : el);    },        isVisible : function(deep) {        var vis = !(this.getStyle("visibility") == "hidden" || this.getStyle("display") == "none");        if(deep !== true || !vis){            return vis;        }        var p = this.dom.parentNode;        while(p && p.tagName.toLowerCase() != "body"){            if(!System.fly(p, '_isVisible').isVisible()){                return false;            }            p = p.parentNode;        }        return true;    },    select : function(selector, unique){        return System.DomHelper.DomQuery.select("#" + System.DomHelper.id(this.dom) + " " + selector, unique);    },    query : function(selector, unique){        return System.DomHelper.DomQuery.select("#" + System.DomHelper.id(this.dom) + " " + selector);    },    child : function(selector, returnDom){        var n = System.DomHelper.DomQuery.selectNode("#" + System.DomHelper.id(this.dom) + " " + selector);        return returnDom ? n : System.get(n);    },    down : function(selector, returnDom){        var n = System.DomHelper.DomQuery.selectNode("#" + System.DomHelper.id(this.dom) + " > " + selector);        return returnDom ? n : System.get(n);    },    initDD : function(group, config, overrides){        var dd =null;        if(System.UI.dd){             dd=new System.UI.dd.DD(System.DomHelper.id(this.dom), group, config);             return System.apply(dd, overrides);        }             return null;    },     initDDProxy : function(group, config, overrides){        var dd =null;        if(System.UI.dd){             dd=new System.UI.dd.DDProxy(System.DomHelper.id(this.dom), group, config);             return System.apply(dd, overrides);        }             return null;        },        initDDTarget : function(group, config, overrides){        var dd =null;        if(System.UI.dd){             dd=new System.UI.dd.DDTarget(System.DomHelper.id(this.dom), group, config);             return System.apply(dd, overrides);        }             return null;         },      setVisible : function(visible, animate){        if(!animate || !System.AnimHandler){            if(this.visibilityMode == System.DomHelper.Element.DISPLAY){                this.setDisplayed(visible);            }else{                this.fixDisplay();                this.dom.style.visibility = visible ? "visible" : "hidden";            }        }else{                       var dom = this.dom;            var visMode = this.visibilityMode;            if(visible){                this.setOpacity(.01);                this.setVisible(true);            }            this.anim({opacity: { to: (visible?1:0) }},                  this.preanim(arguments, 1),                  null, .35, 'easeIn', function(){                     if(!visible){                         if(visMode == El.DISPLAY){                             dom.style.display = "none";                         }else{                             dom.style.visibility = "hidden";                         }                         System.get(dom).setOpacity(1);                     }                 });        }        return this;    },        setDisplayed : function(value) {        if(typeof value == "boolean"){           value = value ? this.originalDisplay : "none";        }        this.setStyle("display", value);        return this;    },        focus : function() {        try{            this.dom.focus();        }catch(e){}        return this;    },    blur : function() {        try{            this.dom.blur();        }catch(e){}        return this;    },     addClass : function(className){        System.DomHelper.addClass(this.dom,className);    },       radioClass : function(className){        System.DomHelper.radioClass(this.dom,className);    },    removeClass : function(className){        System.DomHelper.removeClass(this.dom,className);        return this;    },        toggleClass : function(className){        System.DomHelper.toggleClass(this.dom,className);        return this;    },      hasClass : function(className){        return System.DomHelper.hasClass(this.dom,className);    },    replaceClass : function(oldClassName, newClassName){        System.DomHelper.removeClass(this.dom,oldClassName);        System.DomHelper.addClass(this.dom,newClassName);        return this;    },    getStyles : function(){        var a = arguments, len = a.length, r = {};        for(var i = 0; i < len; i++){            r[a[i]] = this.getStyle(a[i]);        }        return r;    },    getStyle : function(prop){       return System.DomHelper.getStyle(this.dom,prop);     },     setStyle : function(prop, value){        System.DomHelper.setStyle(this.dom,prop,value);        return this;    },     applyStyles : function(style){        System.DomHelper.applyStyles(this.dom, style);        return this;    },     addStyles : function(sides, styles){        var val = 0;        for(var i = 0, len = sides.length; i < len; i++){             var w = parseInt(this.getStyle(styles[sides.charAt(i)]), 10);             if(!isNaN(w)) val += w;        }        return val;    },          getX : function(){       return System.DomHelper.getX(this.dom);    },       getY : function(){        return System.DomHelper.getY(this.dom);    },           getXY : function(){        return System.DomHelper.getXY(this.dom);    },        setX : function(x, animate){        if(!animate || !System.AnimHandler){            System.DomHelper.setX(this.dom, x);        }else{            this.setXY([x, this.getY()], this.preanim(arguments, 1));        }        return this;    },      setY : function(y, animate){        if(!animate || !System.AnimHandler){            System.DomHelper.setY(this.dom, y);        }else{            this.setXY([this.getX(), y], this.preanim(arguments, 1));        }        return this;    },      setXY : function(pos, animate){        if(!animate || !System.AnimHandler){            System.DomHelper.setXY(this.dom, pos);        }else{            this.anim({points: {to: pos}}, this.preanim(arguments, 1), 'motion');        }        return this;    },     getHeight : function(contentHeight){        var h = this.dom.offsetHeight || 0;        return contentHeight !== true ? h : h-this.getBorderWidth("tb")-this.getPadding("tb");    },    getWidth : function(contentWidth){        var w = this.dom.offsetWidth || 0;        return contentWidth !== true ? w : w-this.getBorderWidth("lr")-this.getPadding("lr");    },        adjustWidth : function(width){        if(typeof width == "number"){            if(this.autoBoxAdjust && !this.isBorderBox()){               width -= (this.getBorderWidth("lr") + this.getPadding("lr"));            }            if(width < 0){                width = 0;            }        }        return width;    },        adjustHeight : function(height){        if(typeof height == "number"){           if(this.autoBoxAdjust && !this.isBorderBox()){               height -= (this.getBorderWidth("tb") + this.getPadding("tb"));           }           if(height < 0){               height = 0;           }        }        return height;    },       setWidth : function(width, animate){        width = this.adjustWidth(width);        if(!animate || !System.AnimHandler){            this.dom.style.width = this.addUnits(width);         }else{            this.anim({width: {to: width}}, this.preanim(arguments, 1));        }        return this;    },        setHeight : function(height, animate){        height = this.adjustHeight(height);        if(!animate || !System.AnimHandler){            this.dom.style.height = this.addUnits(height);        }else{            this.anim({height: {to: height}}, this.preanim(arguments, 1));        }        return this;    },         getComputedHeight : function(){        var h = Math.max(this.dom.offsetHeight, this.dom.clientHeight);        if(!h){            h = parseInt(this.getStyle('height'), 10) || 0;            if(!this.isBorderBox()){                h += this.getFrameWidth('tb');            }        }        return h;    },        getComputedWidth : function(){        var w = Math.max(this.dom.offsetWidth, this.dom.clientWidth);        if(!w){            w = parseInt(this.getStyle('width'), 10) || 0;            if(!this.isBorderBox()){                w += this.getFrameWidth('lr');            }        }        return w;    },        getSize : function(contentSize){        return {width: this.getWidth(contentSize), height: this.getHeight(contentSize)};    },        setSize : function(width, height, animate){        if(typeof width == "object"){             height = width.height; width = width.width;        }        width = this.adjustWidth(width); height = this.adjustHeight(height);        if(!animate || !System.AnimHandler){            this.dom.style.width = this.addUnits(width);            this.dom.style.height = this.addUnits(height);         }else{            this.anim({width: {to: width}, height: {to: height}}, this.preanim(arguments, 2));        }        return this;    },    getViewSize : function(){        var d = this.dom, doc = document, aw = 0, ah = 0;        if(d == doc || d == doc.body){            return {width : D.getViewWidth(), height: D.getViewHeight()};        }else{            return {                width : d.clientWidth,                height: d.clientHeight            };        }    },                 setLeft : function(left){        this.setStyle("left", System.DomHelper.addUnits(left));        return this;    },        setTop : function(top){        this.setStyle("top", System.DomHelper.addUnits(top));        return this;    },        setRight : function(right){        this.setStyle("right", System.DomHelper.addUnits(right));        return this;    },        setBottom : function(bottom){        this.setStyle("bottom", System.DomHelper.addUnits(bottom));        return this;    },      setLocation : function(x, y, animate){        this.setXY([x, y], this.preanim(arguments, 2));        return this;    },       getMargins : function(side){        if(!side){            return {                top: parseInt(this.getStyle("margin-top"), 10) || 0,                left: parseInt(this.getStyle("margin-left"), 10) || 0,                bottom: parseInt(this.getStyle("margin-bottom"), 10) || 0,                right: parseInt(this.getStyle("margin-right"), 10) || 0            };        }else{            return this.addStyles(side, System.DomHelper.Element.margins);         }    },         repaint : function(){           var dom = this.dom;        this.addClass("x-repaint");        setTimeout(function(){            System.DomHelper.removeClass(dom,"x-repaint");        }, 1);        return this;    },     moveTo : function(x, y, animate){        this.setXY([x, y], this.preanim(arguments, 2));        return this;    },    getValue : function(asNumber){        return asNumber ? parseInt(this.dom.value, 10) : this.dom.value;    },        contains : function(el){        if(!el){return false;}        return System.DomHelper.isAncestor(this.dom, el.dom ? el.dom : el);    },           getRegion : function(){        return System.DomHelper.getRegion(this.dom);    },      setBounds : function(x, y, width, height, animate){        if(!animate || !System.AnimHandler){            this.setSize(width, height);            this.setLocation(x, y);        }else{            width = this.adjustWidth(width); height = this.adjustHeight(height);            this.anim({points: {to: [x, y]}, width: {to: width}, height: {to: height}},                           this.preanim(arguments, 4), 'motion');        }        return this;    },            setRegion : function(region, animate){        this.setBounds(region.left, region.top, region.right-region.left, region.bottom-region.top, this.preanim(arguments, 1));        return this;    },    addListener : function(eventName, fn, scope, options){       System.EventManager.on(this.dom,  eventName, fn, scope || this, options);    },    removeListener : function(eventName, fn){        System.EventManager.removeListener(this.dom,  eventName, fn);        return this;    },    removeAllListeners : function(){        if(System.Event) System.Event.Event.purgeElement(this.dom);        return this;    },    relayEvent : function(eventName, observable){        this.on(eventName, function(e){            observable.fireEvent(eventName, e);        });      },    setOpacity : function(opacity, animate){        if(!animate || !System.AnimHandler){            var s = this.dom.style;            if(System.UserAgent.ie){                s.zoom = 1;                s.filter = (s.filter || '').replace(/alpha\([^\)]*\)/gi,"") +                           (opacity == 1 ? "" : "alpha(opacity=" + opacity * 100 + ")");            }else{                s.opacity = opacity;            }        }else{            this.anim({opacity: {to: opacity}}, this.preanim(arguments, 1), null, .35, 'easeIn');        }        return this;    },        getLeft : function(local){        if(!local){            return this.getX();        }else{            return parseInt(this.getStyle("left"), 10) || 0;        }    },        getRight : function(local){        if(!local){            return this.getX() + this.getWidth();        }else{            return (this.getLeft(true) + this.getWidth()) || 0;        }    },        getTop : function(local) {        if(!local){            return this.getY();        }else{            return parseInt(this.getStyle("top"), 10) || 0;        }    },       getBottom : function(local){        if(!local){            return this.getY() + this.getHeight();        }else{            return (this.getTop(true) + this.getHeight()) || 0;        }    },       position : function(pos, zIndex, x, y){        if(!pos){           if(this.getStyle('position') == 'static'){               this.setStyle('position', 'relative');           }        }else{            this.setStyle("position", pos);        }        if(zIndex){            this.setStyle("z-index", zIndex);        }        if(x !== undefined && y !== undefined){            this.setXY([x, y]);        }else if(x !== undefined){            this.setX(x);        }else if(y !== undefined){            this.setY(y);        }    },        clearPositioning : function(value){        value = value ||'';        this.setStyle({            "left": value,            "right": value,            "top": value,            "bottom": value,            "z-index": "",            "position" : "static"        });        return this;    },       getPositioning : function(){        var l = this.getStyle("left");        var t = this.getStyle("top");        return {            "position" : this.getStyle("position"),            "left" : l,            "right" : l ? "" : this.getStyle("right"),            "top" : t,            "bottom" : t ? "" : this.getStyle("bottom"),            "z-index" : this.getStyle("z-index")        };    },       getBorderWidth : function(side){        return this.addStyles(side, System.DomHelper.Element.borders);    },       getPadding : function(side){        return this.addStyles(side, System.DomHelper.Element.paddings);    },        setPositioning : function(pc){        this.applyStyles(pc);        if(pc.right == "auto"){            this.dom.style.right = "";        }        if(pc.bottom == "auto"){            this.dom.style.bottom = "";        }        return this;    },    fixDisplay : function(){        if(this.getStyle("display") == "none"){            this.setStyle("visibility", "hidden");            this.setStyle("display", this.originalDisplay);             if(this.getStyle("display") == "none"){                 this.setStyle("display", "block");            }        }    },     setLeftTop : function(left, top){        this.dom.style.left = this.addUnits(left);        this.dom.style.top = this.addUnits(top);        return this;    },        move : function(direction, distance, animate){        var xy = this.getXY();        direction = direction.toLowerCase();        switch(direction){            case "l":            case "left":                this.moveTo(xy[0]-distance, xy[1], this.preanim(arguments, 2));                break;           case "r":           case "right":                this.moveTo(xy[0]+distance, xy[1], this.preanim(arguments, 2));                break;           case "t":           case "top":           case "up":                this.moveTo(xy[0], xy[1]-distance, this.preanim(arguments, 2));                break;           case "b":           case "bottom":           case "down":                this.moveTo(xy[0], xy[1]+distance, this.preanim(arguments, 2));                break;        }        return this;    },    clip : function(){        if(!this.isClipped){           this.isClipped = true;           this.originalClip = {               "o": this.getStyle("overflow"),               "x": this.getStyle("overflow-x"),               "y": this.getStyle("overflow-y")           };           this.setStyle("overflow", "hidden");           this.setStyle("overflow-x", "hidden");           this.setStyle("overflow-y", "hidden");        }        return this;    },       unclip : function(){        if(this.isClipped){            this.isClipped = false;            var o = this.originalClip;            if(o.o){this.setStyle("overflow", o.o);}            if(o.x){this.setStyle("overflow-x", o.x);}            if(o.y){this.setStyle("overflow-y", o.y);}        }        return this;    },       getAnchorXY : function(anchor, local, s){        var w, h, vp = false;        if(!s){            var d = this.dom;            if(d == document.body || d == document){                vp = true;                w = System.DomHelper.getViewWidth(); h = System.DomHelper.getViewHeight();            }else{                w = this.getWidth(); h = this.getHeight();            }        }else{            w = s.width;  h = s.height;        }        var x = 0, y = 0, r = Math.round;        switch((anchor || "tl").toLowerCase()){            case "c":                x = r(w*.5);                y = r(h*.5);            break;            case "t":                x = r(w*.5);                y = 0;            break;            case "l":                x = 0;                y = r(h*.5);            break;            case "r":                x = w;                y = r(h*.5);            break;            case "b":                x = r(w*.5);                y = h;            break;            case "tl":                x = 0;                y = 0;            break;            case "bl":                x = 0;                y = h;            break;            case "br":                x = w;                y = h;            break;            case "tr":                x = w;                y = 0;            break;        }        if(local === true){            return [x, y];        }        if(vp){            var sc = this.getScroll();            return [x + sc.left, y + sc.top];        }                var o = this.getXY();        return [x+o[0], y+o[1]];    },    getAlignToXY : function(el, p, o){        el = System.get(el), d = this.dom;        if(!el.dom){            throw "Element.alignTo with an element that doesn't exist";        }        var c = false;         var p1 = "", p2 = "";        o = o || [0,0];        if(!p){            p = "tl-bl";        }else if(p == "?"){            p = "tl-bl?";        }else if(p.indexOf("-") == -1){            p = "tl-" + p;        }        p = p.toLowerCase();        var m = p.match(/^([a-z]+)-([a-z]+)(\?)?$/);        if(!m){           throw "Element.alignTo with an invalid alignment " + p;        }        p1 = m[1], p2 = m[2], c = m[3] ? true : false;                  var a1 = this.getAnchorXY(p1, true);        var a2 = el.getAnchorXY(p2, false);        var x = a2[0] - a1[0] + o[0];        var y = a2[1] - a1[1] + o[1];        if(c){                        var w = this.getWidth(), h = this.getHeight(), r = el.getRegion();                        var dw = System.DomHelper.getViewWidth()-5, dh = System.DomHelper.getViewHeight()-5;                     var p1y = p1.charAt(0), p1x = p1.charAt(p1.length-1);           var p2y = p2.charAt(0), p2x = p2.charAt(p2.length-1);           var swapY = ((p1y=="t" && p2y=="b") || (p1y=="b" && p2y=="t"));           var swapX = ((p1x=="r" && p2x=="l") || (p1x=="l" && p2x=="r"));           var doc = document;           var scrollX = (doc.documentElement.scrollLeft || doc.body.scrollLeft || 0)+5;           var scrollY = (doc.documentElement.scrollTop || doc.body.scrollTop || 0)+5;           if((x+w) > dw){               x = swapX ? r.left-w : dw-w;           }           if(x < scrollX){               x = swapX ? r.right : scrollX;           }           if((y+h) > dh){               y = swapY ? r.top-h : dh-h;           }           if (y < scrollY){               y = swapY ? r.bottom : scrollY;           }        }        return [x,y];    },    getConstrainToXY : function(){        var os = {top:0, left:0, bottom:0, right: 0};        return function(el, local, offsets){            el = System.get(el);            offsets = offsets ? System.applyIf(offsets, os) : os;            var vw, vh, vx = 0, vy = 0;            if(el.dom == document.body || el.dom == document){                vw = System.DomHelper.getViewWidth();                vh = System.DomHelper.getViewHeight();            }else{                vw = el.dom.clientWidth;                vh = el.dom.clientHeight;                if(!local){                    var vxy = el.getXY();                    vx = vxy[0];                    vy = vxy[1];                }            }            var s = el.getScroll();            vx += offsets.left + s.left;            vy += offsets.top + s.top;            vw -= offsets.right;            vh -= offsets.bottom;            var vr = vx+vw;            var vb = vy+vh;            var xy = !local ? this.getXY() : [this.getLeft(true), this.getTop(true)];            var x = xy[0], y = xy[1];            var w = this.dom.offsetWidth, h = this.dom.offsetHeight;                        var moved = false;                        if((x + w) > vr){                x = vr - w;                moved = true;            }            if((y + h) > vb){                y = vb - h;                moved = true;            }                        if(x < vx){                x = vx;                moved = true;            }            if(y < vy){                y = vy;                moved = true;            }            return moved ? [x, y] : false;        };    }(),        alignTo : function(element, position, offsets, animate){        var xy = this.getAlignToXY(element, position, offsets);        this.setXY(xy, this.preanim(arguments, 3));        return this;    },        anchorTo : function(el, alignment, offsets, animate, monitorScroll, callback){        var action = function(){            this.alignTo(el, alignment, offsets, animate);            System.callback(callback, this);        };        System.EventManager.onWindowResize(action, this);        var tm = typeof monitorScroll;        if(tm != 'undefined'){            System.EventManager.on(window, 'scroll', action, this,                {buffer: tm == 'number' ? monitorScroll : 50});        }        action.call(this);         return this;    },        clearOpacity : function(){        if (window.ActiveXObject) {            this.dom.style.filter = "";        } else {            this.dom.style.opacity = "";            this.dom.style["-moz-opacity"] = "";            this.dom.style["-khtml-opacity"] = "";        }        return this;    },            hide : function(animate){        this.setVisible(false, this.preanim(arguments, 0));        return this;    },            show : function(animate){        this.setVisible(true, this.preanim(arguments, 0));        return this;    },            addUnits : function(size){        return System.DomHelper.addUnits(size, this.defaultUnit);    } ,        getCenterXY : function(){        return this.getAlignToXY(document, 'c-c');    },        center : function(centerIn){        this.alignTo(centerIn || document, 'c-c');        return this;    } ,    beginMeasure : function(){        var el = this.dom;        if(el.offsetWidth || el.offsetHeight){            return this;         }        var changed = [];        var p = this.dom, b = document.body;         while((!el.offsetWidth && !el.offsetHeight) && p && p.tagName && p != b){            var pe = System.get(p);            if(pe.getStyle('display') == 'none'){                changed.push({el: p, visibility: pe.getStyle("visibility")});                p.style.visibility = "hidden";                p.style.display = "block";            }            p = p.parentNode;        }        this._measureChanged = changed;        return this;                   },        endMeasure : function(){        var changed = this._measureChanged;        if(changed){            for(var i = 0, len = changed.length; i < len; i++) {             var r = changed[i];             r.el.style.visibility = r.visibility;                r.el.style.display = "none";            }            this._measureChanged = null;        }        return this;    },    getScroll : function(){        var d = this.dom, doc = document;        if(d == doc || d == doc.body){            var l = window.pageXOffset || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0;            var t = window.pageYOffset || doc.documentElement.scrollTop || doc.body.scrollTop || 0;            return {left: l, top: t};        }else{            return {left: d.scrollLeft, top: d.scrollTop};        }    },         update : function(html, loadScripts, callback){        if(typeof html == "undefined"){            html = "";        }        if(loadScripts !== true){            this.dom.innerHTML = html;            if(typeof callback == "function"){                callback();            }            return this;        }        var id = System.DomHelper.id();        var dom = this.dom;                html += '<span id="' + id + '"></span>';                if(System.EventHandler){            System.EventHandler.onAvailable(id, function(){                var hd = document.getElementsByTagName("head")[0];                var re = /(?:<script([^>]*)?>)((\n|\r|.)*?)(?:<\/script>)/ig;                var srcRe = /\ssrc=([\'\"])(.*?)\1/i;                var typeRe = /\stype=([\'\"])(.*?)\1/i;                                var match;                while(match = re.exec(html)){                    var attrs = match[1];                    var srcMatch = attrs ? attrs.match(srcRe) : false;                    if(srcMatch && srcMatch[2]){                       var s = document.createElement("script");                       s.src = srcMatch[2];                       var typeMatch = attrs.match(typeRe);                       if(typeMatch && typeMatch[2]){                           s.type = typeMatch[2];                       }                       hd.appendChild(s);                    }else if(match[2] && match[2].length > 0){                       eval(match[2]);                    }                }                var el = document.getElementById(id);                if(el){el.parentNode.removeChild(el);}                if(typeof callback == "function"){                    callback();                }            });        }         dom.innerHTML = html.replace(/(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)/ig, "");        return this;    },    createProxy : function(config, renderTo, matchBox){        if(renderTo){            renderTo = System.DomHelper.getDom(renderTo);        }else{            renderTo = document.body;        }        config = typeof config == "object" ?            config : {tag : "div", cls: config};        var proxy = System.DomHelper.append(renderTo, config, true);        if(matchBox){           proxy.setBox(this.getBox());        }        return proxy;    },    unselectable : function(){        this.dom.unselectable = "on";        this.swallowEvent("selectstart", true);        this.applyStyles("-moz-user-select:none;-khtml-user-select:none;");        this.addClass("x-unselectable");        return this;    },      swallowEvent : function(eventName, preventDefault){        var fn = function(e){            e.stopPropagation();            if(preventDefault){                e.preventDefault();            }        };        if(eventName instanceof Array){            for(var i = 0, len = eventName.length; i < len; i++){                 this.on(eventName[i], fn);            }            return this;        }        this.on(eventName, fn);        return this;    } ,    wrap: function(config, returnDom){        if(!config){            config = {tag: "div"};        }        var newEl = System.DomHelper.insertBefore(this.dom, config, !returnDom);        newEl.dom ? newEl.dom.appendChild(this.dom) : newEl.appendChild(this.dom);        return newEl;    }, getFrameWidth : function(sides){        return this.getPadding(sides) + this.getBorderWidth(sides);    },        getBox : function(contentBox, local){        var xy;        if(!local){            xy = this.getXY();        }else{            var left = parseInt(this.getStyle("left"), 10) || 0;            var top = parseInt(this.getStyle("top"), 10) || 0;            xy = [left, top];        }        var el = this.dom, w = el.offsetWidth, h = el.offsetHeight, bx;        if(!contentBox){            bx = {x: xy[0], y: xy[1], 0: xy[0], 1: xy[1], width: w, height: h};        }else{            var l = this.getBorderWidth("l")+this.getPadding("l");            var r = this.getBorderWidth("r")+this.getPadding("r");            var t = this.getBorderWidth("t")+this.getPadding("t");            var b = this.getBorderWidth("b")+this.getPadding("b");            bx = {x: xy[0]+l, y: xy[1]+t, 0: xy[0]+l, 1: xy[1]+t, width: w-(l+r), height: h-(t+b)};        }        bx.right = bx.x + bx.width;        bx.bottom = bx.y + bx.height;        return bx;    },    setBox : function(box, adjust, animate){        var w = box.width, h = box.height;        if((adjust && !this.autoBoxAdjust) && !this.isBorderBox()){           w -= (this.getBorderWidth("lr") + this.getPadding("lr"));           h -= (this.getBorderWidth("tb") + this.getPadding("tb"));        }        this.setBounds(box.x, box.y, w, h, this.preanim(arguments, 2));        return this;    },    isBorderBox : function(){        return noBoxAdjust[this.dom.tagName.toLowerCase()] || System.isBorderBox;    },         createShim : function(){        var el = document.createElement('iframe');        el.frameBorder = 'no';        el.className = 'ext-shim';        if(isIE && System.isSecure){            el.src = System.SSL_SECURE_URL;        }        var shim = System.get(this.dom.parentNode.insertBefore(el, this.dom));        shim.autoBoxAdjust = false;        return shim;    },      remove : function(){        if(this.dom.parentNode){            this.dom.parentNode.removeChild(this.dom);        }        delete System.DomHelper.Element.cache[this.dom.id];    },    addClassOnOver : function(className, preventFlicker){        this.on("mouseover", function(){            System.fly(this, '_internal').addClass(className);        }, this.dom);        var removeFn = function(e){            if(preventFlicker !== true || !e.within(this, true)){                System.fly(this, '_internal').removeClass(className);            }        };        this.on("mouseout", removeFn, this.dom);        return this;    },    addClassOnFocus : function(className){        this.on("focus", function(){            System.fly(this, '_internal').addClass(className);        }, this.dom);        this.on("blur", function(){            System.fly(this, '_internal').removeClass(className);        }, this.dom);        return this;    },      addClassOnClick : function(className){        var dom = this.dom;        this.on("mousedown", function(){            System.fly(dom, '_internal').addClass(className);            var d = System.get(document);            var fn = function(){                System.fly(dom, '_internal').removeClass(className);                d.removeListener("mouseup", fn);            };            d.on("mouseup", fn);        });        return this;    },     swallowEvent : function(eventName, preventDefault){        var fn = function(e){            e.stopPropagation();            if(preventDefault){                e.preventDefault();            }        };        if(eventName instanceof Array){            for(var i = 0, len = eventName.length; i < len; i++){                 this.on(eventName[i], fn);            }            return this;        }        this.on(eventName, fn);        return this;    },     fitToParent : function(monitorResize, targetParent){        var p = System.get(targetParent || this.dom.parentNode);        this.setSize(p.getComputedWidth()-p.getFrameWidth('lr'), p.getComputedHeight()-p.getFrameWidth('tb'));        if(monitorResize === true && System.EventManager){            System.EventManager.onWindowResize(this.fitToParent.createDelegate(this, []));        }        return this;    },        getNextSibling : function(){        var n = this.dom.nextSibling;        while(n && n.nodeType != 1){            n = n.nextSibling;        }        return n;    },     getPrevSibling : function(){        var n = this.dom.previousSibling;        while(n && n.nodeType != 1){            n = n.previousSibling;        }        return n;    },      appendChild: function(el){        el = System.get(el);        el.appendTo(this);        return this;    },       createChild: function(config, insertBefore, returnDom){        config = config || {tag:'div'};        if(insertBefore){            return System.DomHelper.insertBefore(insertBefore, config, returnDom !== true);        }        return System.DomHelper[!this.dom.firstChild ? 'overwrite' : 'append'](this.dom, config,  returnDom !== true);    },    appendTo: function(el){        el = System.DomHelper.getDom(el);        el.appendChild(this.dom);        return this;    },     insertBefore: function(el){        el = System.DomHelper.getDom(el);        el.parentNode.insertBefore(this.dom, el);        return this;    },      insertAfter: function(el){        el = System.DomHelper.getDom(el);        el.parentNode.insertBefore(this.dom, el.nextSibling);        return this;    },      insertFirst: function(el, returnDom){        el = el || {};        if(typeof el == 'object' && !el.nodeType){             return this.createChild(el, this.dom.firstChild, returnDom);        }else{            el = System.DomHelper.getDom(el);            this.dom.insertBefore(el, this.dom.firstChild);            return !returnDom ? System.get(el) : el;        }    },      insertSibling: function(el, where, returnDom){        where = where ? where.toLowerCase() : 'before';        el = el || {};        var rt, refNode = where == 'before' ? this.dom : this.dom.nextSibling;        if(typeof el == 'object' && !el.nodeType){             if(where == 'after' && !this.dom.nextSibling){                rt = System.DomHelper.append(this.dom.parentNode, el, !returnDom);            }else{                rt = System.DomHelper[where == 'after' ? 'insertAfter' : 'insertBefore'](this.dom, el, !returnDom);            }        }else{            rt = this.dom.parentNode.insertBefore(System.DomHelper.getDom(el),                        where == 'before' ? this.dom : this.dom.nextSibling);            if(!returnDom){                rt = System.get(rt);            }        }        return rt;    },      replace: function(el){        el = System.get(el);        this.insertBefore(el);        el.remove();        return this;    },    insertHtml : function(where, html){        return System.DomHelper.insertHtml(where, this.dom, html);    },    set : function(o, useSet){        var el = this.dom;        useSet = typeof useSet == 'undefined' ? (el.setAttribute ? true : false) : useSet;        for(var attr in o){            if(attr == "style" || typeof o[attr] == "function") continue;            if(attr=="cls"){                el.className = o["cls"];            }else{                if(useSet) el.setAttribute(attr, o[attr]);                else el[attr] = o[attr];            }        }        System.DomHelper.applyStyles(el, o.style);        return this;    },     addKeyListener : function(key, fn, scope){        var config;        if(typeof key != "object" || key instanceof Array){            config = {                key: key,                fn: fn,                scope: scope             };        }else{            config = {                key : key.key,                shift : key.shift,                ctrl : key.ctrl,                alt : key.alt,                fn: fn,                scope: scope            };        }        return new System.DomHelper.KeyMap(this, config);    },       addKeyMap : function(config){        return new System.DomHelper.KeyMap(this, config);    },    isScrollable : function(){        var dom = this.dom;        return dom.scrollHeight > dom.clientHeight || dom.scrollWidth > dom.clientWidth;    },    scroll : function(direction, distance, animate){         if(!this.isScrollable()){             return;         }         var el = this.dom;         var l = el.scrollLeft, t = el.scrollTop;         var w = el.scrollWidth, h = el.scrollHeight;         var cw = el.clientWidth, ch = el.clientHeight;         direction = direction.toLowerCase();         var scrolled = false;         var a = this.preanim(arguments, 2);         switch(direction){             case "l":             case "left":                 if(w - l > cw){                     var v = Math.min(l + distance, w-cw);                     this.scrollTo("left", v, a);                     scrolled = true;                 }                 break;            case "r":            case "right":                 if(l > 0){                     var v = Math.max(l - distance, 0);                     this.scrollTo("left", v, a);                     scrolled = true;                 }                 break;            case "t":            case "top":            case "up":                 if(t > 0){                     var v = Math.max(t - distance, 0);                     this.scrollTo("top", v, a);                     scrolled = true;                 }                 break;            case "b":            case "bottom":            case "down":                 if(h - t > ch){                     var v = Math.min(t + distance, h-ch);                     this.scrollTo("top", v, a);                     scrolled = true;                 }                 break;         }         return scrolled;    },    translatePoints : function(x, y){        if(typeof x == 'object' || x instanceof Array){            y = x[1]; x = x[0];        }        var p = this.getStyle('position');        var o = this.getXY();        var l = parseInt(this.getStyle('left'), 10);        var t = parseInt(this.getStyle('top'), 10);        if(isNaN(l)){            l = (p == "relative") ? 0 : this.dom.offsetLeft;        }        if(isNaN(t)){            t = (p == "relative") ? 0 : this.dom.offsetTop;        }        return {left: (x - o[0] + l), top: (y - o[1] + t)};    },    getScroll : function(){        var d = this.dom, doc = document;        if(d == doc || d == doc.body){            var l = window.pageXOffset || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0;            var t = window.pageYOffset || doc.documentElement.scrollTop || doc.body.scrollTop || 0;            return {left: l, top: t};        }else{            return {left: d.scrollLeft, top: d.scrollTop};        }    },    getAttributeNS : isIE ? function(ns, name){        var d = this.dom;        var type = typeof d[ns+":"+name];        if(type != 'undefined' && type != 'unknown'){            return d[ns+":"+name];        }        return d[name];    } : function(ns, name){        var d = this.dom;        return d.getAttributeNS(ns, name) || d.getAttribute(ns+":"+name) || d.getAttribute(name) || d[name];    }              };(function(){System.DomHelper.Element.prototype.on = System.DomHelper.Element.prototype.addListener;  System.DomHelper.Element.prototype.un = System.DomHelper.Element.prototype.removeListener;System.DomHelper.Element.prototype.autoBoxAdjust = true;System.DomHelper.Element.prototype.autoDisplayMode = true;var docEl;System.apply(System.DomHelper.Element,{    unitPattern:/\d+(px|em|%|en|ex|pt|in|cm|mm|pc)$/i,    boxMarkup : '<div class="{0}-tl"><div class="{0}-tr"><div class="{0}-tc"></div></div></div><div class="{0}-ml"><div class="{0}-mr"><div class="{0}-mc"></div></div></div><div class="{0}-bl"><div class="{0}-br"><div class="{0}-bc"></div></div></div>',    VISIBILITY : 1,    DISPLAY : 2,    borders : {l: "border-left-width", r: "border-right-width", t: "border-top-width", b: "border-bottom-width"},    paddings : {l: "padding-left", r: "padding-right", t: "padding-top", b: "padding-bottom"},    margins : {l: "margin-left", r: "margin-right", t: "margin-top", b: "margin-bottom"},    cache:{},    get:function(el){        var ex, elm, id;        if(!el){ return null; }        if(typeof el == "string"){             if(!(elm = document.getElementById(el))){                return null;            }            if(ex = System.DomHelper.Element.cache[el]){                ex.dom = elm;            }else{                ex = System.DomHelper.Element.cache[el] = new System.DomHelper.Element(elm);            }            return ex;        }else if(el.tagName){             if(!(id = el.id)){                id = System.DomHelper.id(el);            }            if(ex = System.DomHelper.Element.cache[id]){                ex.dom = el;            }else{                ex = System.DomHelper.Element.cache[id] = new System.DomHelper.Element(el);            }            return ex;        }else if(el instanceof System.DomHelper.Element){            if(el != docEl){                el.dom = document.getElementById(el.id) || el.dom;                                                                               System.DomHelper.Element.cache[el.id] = el;             }            return el;        }else if(el.isComposite){            return el;        }else if(el instanceof Array){            return System.DomHelper.Element.select(el);        }else if(el == document){                if(!docEl){                var f = function(){};                f.prototype = System.DomHelper.Element.prototype;                docEl = new f();                docEl.dom = document;            }            return docEl;        }        return null;    },    uncache : function(el){        for(var i = 0, a = arguments, len = a.length; i < len; i++) {            if(a[i]){                delete System.DomHelper.Element.cache[a[i].id || a[i]];            }        }    }});System.DomHelper.Element.Flyweight = function(dom){    this.dom = dom;};System.DomHelper.Element.Flyweight.prototype =System.DomHelper.Element.prototype;System.DomHelper.Element._flyweights = {};System.DomHelper.Element.fly = function(el, named){    named = named || '_global';    el = System.DomHelper.getDom(el);    if(!el){        return null;    }    if(!System.DomHelper.Element._flyweights[named]){        System.DomHelper.Element._flyweights[named] = new System.DomHelper.Element.Flyweight();    }    System.DomHelper.Element._flyweights[named].dom = el;    return System.DomHelper.Element._flyweights[named];};System.get=System.DomHelper.Element.get;System.fly = System.DomHelper.Element.fly;})();   System.DomHelper.Fx = {    slideIn : function(anchor, o){        var el = this.getFxEl();        o = o || {};        el.queueFx(o, function(){            anchor = anchor || "t";            this.fixDisplay();            var r = this.getFxRestore();            var b = this.getBox();            this.setSize(b);            var wrap = this.fxWrap(r.pos, o, "hidden");            var st = this.dom.style;            st.visibility = "visible";            st.position = "absolute";            var after = function(){                el.fxUnwrap(wrap, r.pos, o);                st.width = r.width;                st.height = r.height;                el.afterFx(o);            };            var a, pt = {to: [b.x, b.y]}, bw = {to: b.width}, bh = {to: b.height};            switch(anchor.toLowerCase()){                case "t":                    wrap.setSize(b.width, 0);                    st.left = st.bottom = "0";                    a = {height: bh};                break;                case "l":                    wrap.setSize(0, b.height);                    st.right = st.top = "0";                    a = {width: bw};                break;                case "r":                    wrap.setSize(0, b.height);                    wrap.setX(b.right);                    st.left = st.top = "0";                    a = {width: bw, points: pt};                break;                case "b":                    wrap.setSize(b.width, 0);                    wrap.setY(b.bottom);                    st.left = st.top = "0";                    a = {height: bh, points: pt};                break;                case "tl":                    wrap.setSize(0, 0);                    st.right = st.bottom = "0";                    a = {width: bw, height: bh};                break;                case "bl":                    wrap.setSize(0, 0);                    wrap.setY(b.y+b.height);                    st.right = st.top = "0";                    a = {width: bw, height: bh, points: pt};                break;                case "br":                    wrap.setSize(0, 0);                    wrap.setXY([b.right, b.bottom]);                    st.left = st.top = "0";                    a = {width: bw, height: bh, points: pt};                break;                case "tr":                    wrap.setSize(0, 0);                    wrap.setX(b.x+b.width);                    st.left = st.bottom = "0";                    a = {width: bw, height: bh, points: pt};                break;            }            this.dom.style.visibility = "visible";            wrap.show();            arguments.callee.anim = wrap.fxanim(a,                o,                'motion',                .5,                'easeOut', after);        });        return this;    },    slideOut : function(anchor, o){        var el = this.getFxEl();        o = o || {};        el.queueFx(o, function(){            anchor = anchor || "t";            var r = this.getFxRestore();            var b = this.getBox();            this.setSize(b);            var wrap = this.fxWrap(r.pos, o, "visible");            var st = this.dom.style;            st.visibility = "visible";            st.position = "absolute";            wrap.setSize(b);            var after = function(){                if(o.useDisplay){                    el.setDisplayed(false);                }else{                    el.hide();                }                el.fxUnwrap(wrap, r.pos, o);                st.width = r.width;                st.height = r.height;                el.afterFx(o);            };            var a, zero = {to: 0};            switch(anchor.toLowerCase()){                case "t":                    st.left = st.bottom = "0";                    a = {height: zero};                break;                case "l":                    st.right = st.top = "0";                    a = {width: zero};                break;                case "r":                    st.left = st.top = "0";                    a = {width: zero, points: {to:[b.right, b.y]}};                break;                case "b":                    st.left = st.top = "0";                    a = {height: zero, points: {to:[b.x, b.bottom]}};                break;                case "tl":                    st.right = st.bottom = "0";                    a = {width: zero, height: zero};                break;                case "bl":                    st.right = st.top = "0";                    a = {width: zero, height: zero, points: {to:[b.x, b.bottom]}};                break;                case "br":                    st.left = st.top = "0";                    a = {width: zero, height: zero, points: {to:[b.x+b.width, b.bottom]}};                break;                case "tr":                    st.left = st.bottom = "0";                    a = {width: zero, height: zero, points: {to:[b.right, b.y]}};                break;            }            arguments.callee.anim = wrap.fxanim(a,                o,                'motion',                .5,                "easeOut", after);        });        return this;    },    puff : function(o){        var el = this.getFxEl();        o = o || {};        el.queueFx(o, function(){            this.clearOpacity();            this.show();            var r = this.getFxRestore();            var st = this.dom.style;            var after = function(){                if(o.useDisplay){                    el.setDisplayed(false);                }else{                    el.hide();                }                el.clearOpacity();                el.setPositioning(r.pos);                st.width = r.width;                st.height = r.height;                st.fontSize = '';                el.afterFx(o);            };            var width = this.getWidth();            var height = this.getHeight();            arguments.callee.anim = this.fxanim({                    width : {to: this.adjustWidth(width * 2)},                    height : {to: this.adjustHeight(height * 2)},                    points : {by: [-(width * .5), -(height * .5)]},                    opacity : {to: 0},                    fontSize: {to:200, unit: "%"}                },                o,                'motion',                .5,                "easeOut", after);        });        return this;    },    switchOff : function(o){        var el = this.getFxEl();        o = o || {};        el.queueFx(o, function(){            this.clearOpacity();            this.clip();            var r = this.getFxRestore();            var st = this.dom.style;            var after = function(){                if(o.useDisplay){                    el.setDisplayed(false);                }else{                    el.hide();                }                el.clearOpacity();                el.setPositioning(r.pos);                st.width = r.width;                st.height = r.height;                el.afterFx(o);            };            this.fxanim({opacity:{to:0.3}}, null, null, .1, null, function(){                this.clearOpacity();                (function(){                    this.fxanim({                        height:{to:1},                        points:{by:[0, this.getHeight() * .5]}                    }, o, 'motion', 0.3, 'easeIn', after);                }).defer(100, this);            });        });        return this;    },     highlight : function(color, o){        var el = this.getFxEl();        o = o || {};        el.queueFx(o, function(){            color = color || "ffff9c";            attr = o.attr || "backgroundColor";            this.clearOpacity();            this.show();            var origColor = this.getColor(attr);            var restoreColor = this.dom.style[attr];            endColor = (o.endColor || origColor) || "ffffff";            var after = function(){                el.dom.style[attr] = restoreColor;                el.afterFx(o);            };            var a = {};            a[attr] = {from: color, to: endColor};            arguments.callee.anim = this.fxanim(a,                o,                'color',                1,                'easeIn', after);        });        return this;    },    frame : function(color, count, o){        var el = this.getFxEl();        o = o || {};        el.queueFx(o, function(){            color = color || "#C3DAF9";            if(color.length == 6){                color = "#" + color;            }            count = count || 1;            duration = o.duration || 1;            this.show();            var b = this.getBox();            var animFn = function(){                var proxy = this.createProxy({                     tag:"div",                     style:{                        visbility:"hidden",                        position:"absolute",                        "z-index":"35000",                                                 border:"0px solid " + color                     }                  });                var scale = System.isBorderBox ? 2 : 1;                proxy.animate({                    top:{from:b.y, to:b.y - 20},                    left:{from:b.x, to:b.x - 20},                    borderWidth:{from:0, to:10},                    opacity:{from:1, to:0},                    height:{from:b.height, to:(b.height + (20*scale))},                    width:{from:b.width, to:(b.width + (20*scale))}                }, duration, function(){                    proxy.remove();                });                if(--count > 0){                     animFn.defer((duration/2)*1000, this);                }else{                    el.afterFx(o);                }            };            animFn.call(this);        });        return this;    },     pause : function(seconds){        var el = this.getFxEl();        var o = {};        el.queueFx(o, function(){            setTimeout(function(){                el.afterFx(o);            }, seconds * 1000);        });        return this;    },    fadeIn : function(o){        var el = this.getFxEl();        o = o || {};        el.queueFx(o, function(){            this.setOpacity(0);            this.fixDisplay();            this.dom.style.visibility = 'visible';            var to = o.endOpacity || 1;            arguments.callee.anim = this.fxanim({opacity:{to:to}},                o, null, .5, "easeOut", function(){                if(to == 1){                    this.clearOpacity();                }                el.afterFx(o);            });        });        return this;    },    fadeOut : function(o){        var el = this.getFxEl();        o = o || {};        el.queueFx(o, function(){            arguments.callee.anim = this.fxanim({opacity:{to:o.endOpacity || 0}},                o, null, .5, "easeOut", function(){                if(this.visibilityMode == System.DomHelper.Element.DISPLAY || o.useDisplay){                     this.dom.style.display = "none";                }else{                     this.dom.style.visibility = "hidden";                }                this.clearOpacity();                el.afterFx(o);            });        });        return this;    },    scale : function(w, h, o){        this.shift(Ext.apply({}, o, {            width: w,            height: h        }));        return this;    },    shift : function(o){        var el = this.getFxEl();        o = o || {};        el.queueFx(o, function(){            var a = {}, w = o.width, h = o.height, x = o.x, y = o.y,  op = o.opacity;            if(w !== undefined){                a.width = {to: this.adjustWidth(w)};            }            if(h !== undefined){                a.height = {to: this.adjustHeight(h)};            }            if(x !== undefined || y !== undefined){                a.points = {to: [                    x !== undefined ? x : this.getX(),                    y !== undefined ? y : this.getY()                ]};            }            if(op !== undefined){                a.opacity = {to: op};            }            if(o.xy !== undefined){                a.points = {to: o.xy};            }            arguments.callee.anim = this.fxanim(a,                o, 'motion', .35, "easeOut", function(){                el.afterFx(o);            });        });        return this;    },    ghost : function(anchor, o){        var el = this.getFxEl();        o = o || {};        el.queueFx(o, function(){            anchor = anchor || "b";            var r = this.getFxRestore();            var w = this.getWidth(),                h = this.getHeight();            var st = this.dom.style;            var after = function(){                if(o.useDisplay){                    el.setDisplayed(false);                }else{                    el.hide();                }                el.clearOpacity();                el.setPositioning(r.pos);                st.width = r.width;                st.height = r.height;                el.afterFx(o);            };            var a = {opacity: {to: 0}, points: {}}, pt = a.points;            switch(anchor.toLowerCase()){                case "t":                    pt.by = [0, -h];                break;                case "l":                    pt.by = [-w, 0];                break;                case "r":                    pt.by = [w, 0];                break;                case "b":                    pt.by = [0, h];                break;                case "tl":                    pt.by = [-w, -h];                break;                case "bl":                    pt.by = [-w, h];                break;                case "br":                    pt.by = [w, h];                break;                case "tr":                    pt.by = [w, -h];                break;            }            arguments.callee.anim = this.fxanim(a,                o,                'motion',                .5,                "easeOut", after);        });        return this;    },    syncFx : function(){        this.fxDefaults = System.apply(this.fxDefaults || {}, {            block : false,            concurrent : true,            stopFx : false        });        return this;    },    sequenceFx : function(){        this.fxDefaults = System.apply(this.fxDefaults || {}, {            block : false,            concurrent : false,            stopFx : false        });        return this;    },    nextFx : function(){        var ef = this.fxQueue[0];        if(ef){            ef.call(this);        }    },    hasActiveFx : function(){        return this.fxQueue && this.fxQueue[0];    },    stopFx : function(){        if(this.hasActiveFx()){            var cur = this.fxQueue[0];            if(cur && cur.anim && cur.anim.isAnimated()){                this.fxQueue = [cur];                                 cur.anim.stop(true);            }        }        return this;    },    beforeFx : function(o){        if(this.hasActiveFx() && !o.concurrent){           if(o.stopFx){               this.stopFx();               return true;           }           return false;        }        return true;    },    hasFxBlock : function(){        var q = this.fxQueue;        return q && q[0] && q[0].block;    },    queueFx : function(o, fn){        if(!this.fxQueue){            this.fxQueue = [];        }        if(!this.hasFxBlock()){            System.applyIf(o, this.fxDefaults);            if(!o.concurrent){                var run = this.beforeFx(o);                fn.block = o.block;                this.fxQueue.push(fn);                if(run){                    this.nextFx();                }            }else{                fn.call(this);            }        }        return this;    },    fxWrap : function(pos, o, vis){        var wrap;        if(!o.wrap || !(wrap = System.get(o.wrap))){            var wrapXY;            if(o.fixPosition){                wrapXY = this.getXY();            }            var div = document.createElement("div");            div.style.visibility = vis;            wrap = System.get(this.dom.parentNode.insertBefore(div, this.dom));            wrap.setPositioning(pos);            if(wrap.getStyle("position") == "static"){                wrap.position("relative");            }            this.clearPositioning('auto');            wrap.clip();            wrap.dom.appendChild(this.dom);            if(wrapXY){                wrap.setXY(wrapXY);            }        }        return wrap;    },    fxUnwrap : function(wrap, pos, o){        this.clearPositioning();        this.setPositioning(pos);        if(!o.wrap){            wrap.dom.parentNode.insertBefore(this.dom, wrap.dom);            wrap.remove();        }    },    getFxRestore : function(){        var st = this.dom.style;        return {pos: this.getPositioning(), width: st.width, height : st.height};    },    afterFx : function(o){        if(o.afterStyle){            this.applyStyles(o.afterStyle);        }        if(o.afterCls){            this.addClass(o.afterCls);        }        if(o.remove === true){            this.remove();        }        System.callback(o.callback, o.scope, [this]);        if(!o.concurrent){            this.fxQueue.shift();            this.nextFx();        }    },    getFxEl : function(){                 return System.get(this.dom);    },    fxanim : function(args, opt, animType, defaultDur, defaultEase, cb){        animType = animType || 'run';        opt = opt || {};        var anim = System.AnimHandler[animType](            this.dom, args,            (opt.duration || defaultDur) || .35,            (opt.easing || defaultEase) || 'easeOut',            function(){                System.callback(cb, this);            },            this        );        opt.anim = anim;        return anim;    }};System.DomHelper.Fx.resize = System.DomHelper.Fx.scale;System.apply(System.DomHelper.Element.prototype, System.DomHelper.Fx);System.DomHelper.KeyNav = function(el, config){    this.el = System.get(el);    System.apply(this, config);    if(!this.disabled){        this.disabled = true;        this.enable();    }};System.DomHelper.KeyNav.prototype = {    disabled : false,    defaultEventAction: "stopEvent",    prepareEvent : function(e){        var k = e.getKey();        var h = this.keyToHandler[k];        if( isSafari && h && k >= 37 && k <= 40){            e.stopEvent();        }    },    relay : function(e){        var k = e.getKey();        var h = this.keyToHandler[k];        if(h && this[h]){            if(this.doRelay(e, this[h], h) !== true){                e[this.defaultEventAction]();            }        }    },    doRelay : function(e, h, hname){        return h.call(this.scope || this, e);    },    enter : false,    left : false,    right : false,    up : false,    down : false,    tab : false,    esc : false,    pageUp : false,    pageDown : false,    del : false,    home : false,    end : false,    keyToHandler : {        37 : "left",        39 : "right",        38 : "up",        40 : "down",        33 : "pageUp",        34 : "pageDown",        46 : "del",        36 : "home",        35 : "end",        13 : "enter",        27 : "esc",        9  : "tab"    }, enable: function(){  if(this.disabled){            if(isIE){                this.el.on("keydown", this.relay,  this);            }else{                this.el.on("keydown", this.prepareEvent,  this);                this.el.on("keypress", this.relay,  this);            }      this.disabled = false;  } }, disable: function(){  if(!this.disabled){      if(isIE){                this.el.un("keydown", this.relay);            }else{                this.el.un("keydown", this.prepareEvent);                this.el.un("keypress", this.relay);            }      this.disabled = true;  } }};System.DomHelper.KeyMap = function(el, config, eventName){    this.el  = System.get(el);    this.eventName = eventName || "keydown";    this.bindings = [];    if(config){        this.addBinding(config);    }    this.enable();};System.DomHelper.KeyMap.prototype={ addBinding : function(config){        if(config instanceof Array){            for(var i = 0, len = config.length; i < len; i++){                this.addBinding(config[i]);            }            return;        }        var keyCode = config.key,            shift = config.shift,            ctrl = config.ctrl,            alt = config.alt,            fn = config.fn || config.handler,            scope = config.scope;        if(typeof keyCode == "string"){            var ks = [];            var keyString = keyCode.toUpperCase();            for(var j = 0, len = keyString.length; j < len; j++){                ks.push(keyString.charCodeAt(j));            }            keyCode = ks;        }        var keyArray = keyCode instanceof Array;        var handler = function(e){            if((!shift || e.shiftKey) && (!ctrl || e.ctrlKey) &&  (!alt || e.altKey)){                var k = e.getKey();                if(keyArray){                    for(var i = 0, len = keyCode.length; i < len; i++){                        if(keyCode[i] == k){                          if(this.stopEvent){                              e.stopEvent();                          }                          fn.call(scope || window, k, e);                          return;                        }                    }                }else{                    if(k == keyCode){                        if(this.stopEvent){                           e.stopEvent();                        }                        fn.call(scope || window, k, e);                    }                }            }        };        this.bindings.push(handler); },    on : function(key, fn, scope){        var keyCode, shift, ctrl, alt;        if(typeof key == "object" && !(key instanceof Array)){            keyCode = key.key;            shift = key.shift;            ctrl = key.ctrl;            alt = key.alt;        }else{            keyCode = key;        }        this.addBinding({            key: keyCode,            shift: shift,            ctrl: ctrl,            alt: alt,            fn: fn,            scope: scope        })    },    handleKeyDown : function(e){     if(this.enabled){          var b = this.bindings;         for(var i = 0, len = b.length; i < len; i++){             b[i].call(this, e);         }     } }, isEnabled : function(){     return this.enabled; }, enable: function(){  if(!this.enabled){      this.el.on(this.eventName, this.handleKeyDown, this);      this.enabled = true;  } }, disable: function(){  if(this.enabled){      this.el.removeListener(this.eventName, this.handleKeyDown, this);      this.enabled = false;  } }  };System.DomHelper.CSS = function(){ var rules = null;    var doc = document;   return {      createStyleSheet : function(cssText){       var ss;       if(isIE){           ss = doc.createStyleSheet();           ss.cssText = cssText;       }else{           var head = doc.getElementsByTagName("head")[0];           var rules = doc.createElement("style");           rules.setAttribute("type", "text/css");           try{                rules.appendChild(doc.createTextNode(cssText));           }catch(e){               rules.cssText = cssText;            }           head.appendChild(rules);           ss = rules.styleSheet ? rules.styleSheet : (rules.sheet || doc.styleSheets[doc.styleSheets.length-1]);       }       this.cacheStyleSheet(ss);       return ss;   },     removeStyleSheet : function(id){       var existing = doc.getElementById(id);       if(existing){           existing.parentNode.removeChild(existing);       }   },     swapStyleSheet : function(id, url){       this.removeStyleSheet(id);       var ss = doc.createElement("link");       ss.setAttribute("rel", "stylesheet");       ss.setAttribute("type", "text/css");       ss.setAttribute("id", id);       ss.setAttribute("href", url);       doc.getElementsByTagName("head")[0].appendChild(ss);   },     refreshCache : function(){       return this.getRules(true);   },     cacheStyleSheet : function(ss){       if(!rules){           rules = {};       }       try{           var ssRules = ss.cssRules || ss.rules;           for(var j = ssRules.length-1; j >= 0; j=j-1){               rules[ssRules[j].selectorText] = ssRules[j];           }       }catch(e){}   },    getRules : function(refreshCache){     if(rules === null || refreshCache){      rules = {};      var ds = doc.styleSheets;      for(var i =0, len = ds.length; i < len; i=i+1){          try{              this.cacheStyleSheet(ds[i]);          }catch(e){}          }     }     return rules;    },        getRule : function(selector, refreshCache){     var rs = this.getRules(refreshCache);     if(!(selector instanceof Array)){         return rs[selector];     }     for(var i = 0; i < selector.length; i=i+1){   if(rs[selector[i]]){    return rs[selector[i]];   }  }  return null;    },     updateRule : function(selector, property, value){     if(!(selector instanceof Array)){      var rule = this.getRule(selector);      if(rule){       rule.style[property.replace(camelRe, camelFn)] = value;       return true;      }     }else{      for(var i = 0; i < selector.length; i=i+1){       if(this.updateRule(selector[i], property, value)){        return true;       }      }     }     return false;    },    loadCssFile : function(cssPath, uniqueId)    {      if(/\w+\.\w+(\?|$)/.test(cssPath))      {        if(!(typeof(uniqueId)=="string" && uniqueId!=="")){         uniqueId = "Css_"+ cssPath.replace(/\W/g, "");        }        if(document.getElementById(uniqueId)){ return;}        var link  = document.createElement("LINK");        link.href = cssPath; link.id = uniqueId;        link.type = "text/css";        link.rel  = "Stylesheet";        uniqueId  = document.getElementsByTagName("HEAD")[0];        uniqueId.insertBefore(link, uniqueId.firstChild);      }    }   }; }();System.DomHelper.Region=function(C,D,A,B){ this.top=C; this[1]=C; this.right=D; this.bottom=A; this.left=B; this[0]=B;};System.DomHelper.Region.prototype={    contains:function(A){     return(A.left>=this.left&&A.right<=this.right&&A.top>=this.top&&A.bottom<=this.bottom);    },    getArea:function(){     return((this.bottom-this.top)*(this.right-this.left));    },    intersect:function(E){     var C=Math.max(this.top,E.top);     var D=Math.min(this.right,E.right);     var A=Math.min(this.bottom,E.bottom);     var B=Math.max(this.left,E.left);     if(A>=C&&D>=B){return new System.DomHelper.Region(C,D,A,B);}else{return null;}    },    union:function(E){     var C=Math.min(this.top,E.top);     var D=Math.max(this.right,E.right);     var A=Math.max(this.bottom,E.bottom);     var B=Math.min(this.left,E.left);     return new System.DomHelper.Region(C,D,A,B);    },    toString:function(){     return("Region {"+"top: "+this.top+", right: "+this.right+", bottom: "+this.bottom+", left: "+this.left+"}");    },    getRegion:function(D){     var F=System.DomHelper.getXY(D);     var C=F[1];     var E=F[0]+D.offsetWidth;     var A=F[1]+D.offsetHeight;     var B=F[0];     return new System.DomHelper.Region(C,E,A,B);    }};System.DomHelper.Point=function(A,B){ if(typeof(A)=='string'){B=A[1];A=A[0];} this.x=this.right=this.left=this[0]=A; this.y=this.top=this.bottom=this[1]=B;};System.DomHelper.Point.prototype=new System.DomHelper.Region();System.DomHelper.TextMetrics = function(){    var shared;    return {        measure : function(el, text, fixedWidth){         if(!shared){         shared = System.DomHelper.TextMetrics.Instance(el, fixedWidth);            }         shared.bind(el);         shared.setFixedWidth(fixedWidth || 'auto');   return shared.getSize(text);        },   createInstance : function(el, fixedWidth){           return System.DomHelper.TextMetrics.Instance(el, fixedWidth);        }   };}();System.DomHelper.TextMetrics.Instance = function(bindTo, fixedWidth){   var ml = new System.DomHelper.Element(document.createElement('div'));  document.body.appendChild(ml.dom); ml.position('absolute'); ml.setLeftTop(-1000, -1000);   ml.hide();   if(fixedWidth){      mi.setWidth(fixedWidth); } var instance = {  getSize : function(text){           ml.update(text);           var s = ml.getSize();        ml.update('');             return s;    },  bind : function(el){     ml.setStyle(System.fly(el).getStyles('font-size','font-style', 'font-weight', 'font-family','line-height'));        },  setFixedWidth : function(width){       ml.setWidth(width);  },  getWidth : function(text){    ml.dom.style.width = 'auto';    return this.getSize(text).width;    },    getHeight : function(text){            return this.getSize(text).height;  } }; instance.bind(bindTo);    return instance;};System.DomHelper.Element.measureText = System.DomHelper.TextMetrics.measure;System.onLoad(function(){    var bd = document.body;    if(!bd){ return; }    var cls = isIE ? "sfw-ie"            : isGecko ? "sfw-gecko"            : isOpera ? "sfw-opera"            : isSafari ? "sfw-safari" : "";    if(System.isBorderBox){        cls += ' sfw-border-box';    }    if(System.isStrict){        cls += ' sfw-strict';    }    System.DomHelper.addClass(bd,cls);});})();