(function(){if('undefined'==typeof(System)){alert('缺少需要的脚本环境');return;};Include('support/data.js');  var Event=System.EventManager;System.DrawTool=(function(){    return {        rate:10,                  drawMode:"arrow",         overPoint:false,           globalPropertyTypes:new System.MixedCollection(),        globalProperties:new System.MixedCollection(),        globalTemplate:"",        init:function(){         var dp=document.getElementById("draw_panel");if(dp){             dp.innerHTML='<v:group id="draw_panel_gp" style="width:200px;height:200px;" coordsize="2000,2000" coordorigin="0,0"></v:group>';         }dp=null;        }    };})();System.onReady(System.DrawTool.init,System.DrawTool,true);System.DrawTool.VmlDD = function(id, sGroup, config) {    System.UI.dd.DD.apply(this,[id,sGroup,config]);};System.extend(System.DrawTool.VmlDD, System.UI.dd.DD, {     b4Drag: function(e) {        this.setDragElPos(e.getPageX(),e.getPageY());    },       alignElWithMouse: function(el, iPageX, iPageY) {                var oCoord = this.getTargetCoord(iPageX*System.DrawTool.rate, iPageY*System.DrawTool.rate);        var fly = el.dom ? el : System.fly(el);        if (!this.deltaSetXY) {            var aCoord = [parseInt(oCoord.x/System.DrawTool.rate), parseInt(oCoord.y/System.DrawTool.rate)];            fly.setXY(aCoord);            var newLeft = fly.getLeft(true);            var newTop  = fly.getTop(true);            this.deltaSetXY = [ newLeft - oCoord.x, newTop - oCoord.y ];        } else {            fly.setLeftTop(oCoord.x + this.deltaSetXY[0], oCoord.y + this.deltaSetXY[1]);        }        fly=null;        this.cachePosition(oCoord.x, oCoord.y);        this.autoScroll(parseInt(oCoord.x/System.DrawTool.rate), parseInt(oCoord.y/System.DrawTool.rate), el.offsetHeight, el.offsetWidth);        return oCoord;    }});System.DrawTool.FillRectangeDD=function(id,sGroup,config){    System.DrawTool.VmlDD.apply(this,[id,sGroup,config]);};System.extend(System.DrawTool.FillRectangeDD,System.DrawTool.VmlDD, {    init: function(id, sGroup, config) {        this.initTarget(id, sGroup, config);        Event.on(this.id, "mousedown", this.fillRectangeMouseDown, this);     },    fillRectangeMouseDown:function(e,oDD){        if(System.DrawTool.drawMode!='arrow'){                        System.DrawTool.util.setDrawMode('arrow');                        System.DrawTool.FillRectange.setArrowMode();        }                    this.handleMouseDown.apply(this,[e,oDD]);                            },    setOuterHandleElId: function(id) {        if (typeof id !== "string") {            id = System.id(id);        }        Event.on(id, "mousedown",this.fillRectangeMouseDown, this);        this.setHandleElId(id);        this.hasOuterHandles = true;        System.CG();    },       unreg: function() {        Event.un(this.id, "mousedown",this.fillRectangeMouseDown);        this._domRef = null;        this.DDM._remove(this);        System.CG();    }});System.DrawTool.VmlResizable = function(el, config){    System.UI.Resizable.apply(this,[el,config]);    };System.extend(System.DrawTool.VmlResizable,System.UI.Resizable, {     resizeTo : function(width, height){        this.el.setSize(width, height);        this.fireEvent("resize", this, width, height, null);    },    resizeElement : function(){        var box = this.proxy.getBox();        if(this.updateBox){            this.el.setBox(box, false, this.animate, this.duration, null, this.easing);        }else{             this.el.setSize(box.width, box.height, this.animate, this.duration, null, this.easing);        }        this.afterResize(box.width,box.height);        this.proxy.hide();        return box;    },    afterResize:function(width,height){    }});var DT_cache={    currentShapeGroupID:1,        shapeTypeCollection:new System.MixedCollection(),     lineTypeCollection:new System.MixedCollection(),    shapeCollection:new System.MixedCollection(),     lineCollection:new System.MixedCollection()  };System.DrawTool.util=(function(){      return {                        convertCoordinate:function(coord,gap,onlySize){            var dp=System.get('draw_panel');            if(dp){                 var l=dp.getLeft(),t=dp.getTop();                 if(typeof(coord)!='undefined' && coord!=null                     && (coord instanceof Array) && coord.length==2 ){                    if(onlySize!==true){                        coord[0]=coord[0]-l;                        coord[1]=coord[1]-t;                    }                    if(typeof(gap)!='undefined' && gap!=null && (gap instanceof Array) && gap.length==2){                        coord[0]=coord[0]+gap[0];                        coord[1]=coord[1]+gap[1];                    }                    coord[0]=parseInt(coord[0] * System.DrawTool.rate);                    coord[1]=parseInt(coord[1] * System.DrawTool.rate);                  }                                    }dp=null;            return coord;        },                        restoreCoordinate:function(coord,gap,onlySize){            var dp=System.get('draw_panel');            if(dp){                 var l=dp.getLeft(),t=dp.getTop();                 if(typeof(coord)!='undefined' && coord!=null                     && (coord instanceof Array) && coord.length==2){                    coord[0]=coord[0]/System.DrawTool.rate;                    coord[1]=coord[1]/System.DrawTool.rate;                    if(typeof(gap)!='undefined' && gap!=null && (gap instanceof Array) && gap.length==2){                        coord[0]=coord[0]+gap[0];                        coord[1]=coord[1]+gap[1];                    }                    if(onlySize!==true){                        coord[0]=coord[0]+l;                        coord[1]=coord[1]+t;                    }                    coord[0]=parseInt(coord[0]);                    coord[1]=parseInt(coord[1]);                 }            }dp=null;            return coord;                    },                createXmlDocument:function(xmlstr){            var xmlDocument;            if(System.UserAgent.ie){                xmlDocument = new ActiveXObject("Msxml2.FreeThreadedDOMDocument");                xmlDocument.async=false;                xmlDocument.resolveExternals = false;                xmlDocument.loadXML(xmlstr);            }else{               xmlDocument = (new DOMParser()).parseFromString(xmlstr, "text/xml");            }                   return xmlDocument;            },                showShapesPoints:function(){         DT_cache.shapeCollection.each(function(item){            if(item){item.showPoints();}         });          },                hideShapesPoints:function(){         DT_cache.shapeCollection.each(function(item){            if(item){item.hidePoints();}         });                 },                setDrawMode:function(mode){            System.DrawTool.toolBar.setDrawMode(mode);         },                hideFillRectange:function(e){            if(typeof(e)!='undefined' && e.target && e.target.id=='draw_panel'){                System.DrawTool.FillRectange.hide();                System.DrawTool.FillRectange.clearBindCollection();                 System.DrawTool.propertyPanel.clearPanel();             }        },        hideFillLine:function(e){            if(typeof(e)!='undefined' && e.target && e.target.id=='draw_panel'){                System.DrawTool.FillLine.hide();                System.DrawTool.FillLine.clearBindCollection();                  System.DrawTool.propertyPanel.clearPanel();            }        },        showGlobalProperties:function(e){         if(typeof(e)!='undefined' && e.target && e.target.id=='draw_panel'){          System.DrawTool.propertyPanel.createGlobalPropertiesList();         }        },               unFocusShapeTextBox:function(e,force){            if((typeof(e)!='undefined' && e!=null && e.target && e.target.id=='draw_panel') || force===true){                var elId=this.getInputDivBoxObjectElID();                if(System.DrawTool.FillRectange.bindCollection.length>0 &&                    System.DrawTool.FillRectange.bindCollection[0]==elId){                    var bindEl,sp;                    bindEl=System.get(System.DrawTool.FillRectange.bindCollection[0]);                      if(bindEl){                        sp=System.DrawTool.shapeUtil.getShapeByElId(bindEl.dom.id);                        if(sp)sp.unFocusTextBox();                      }                 }bindEl=null;           } elId=null;       },       unFocusLineTextBox:function(e,force){            if((typeof(e)!='undefined' && e!=null && e.target && e.target.id=='draw_panel') || force===true){                var elId=this.getInputDivBoxObjectElID();                if(System.DrawTool.FillLine.bindCollection.length>0 &&                    System.DrawTool.FillLine.bindCollection[0]==elId){                    var bindEl,lobj;                    bindEl=System.get(System.DrawTool.FillLine.bindCollection[0]);                      if(bindEl){                        lobj=System.DrawTool.lineUtil.getLineByElId(bindEl.dom.id);                        if(lobj)lobj.unFocusTextBox();                      }                 }bindEl=null;           } elId=null;       },       createInputDivBox:function(l,t,objectelid){         this.removeInputDivBox();         var tpl=new System.DomHelper.Template('<div id="drawPanel_InputDivBox" drawtool:objectelid="' + objectelid + '" style="word-break:break-all;position:absolute;border:solid 1px black;width:100px;height:20px;background-color:#ffffff;left:{left};top:{top}" contenteditable="true" onselectstart="return true;"></div>');         var divBox=tpl.append('draw_panel',{            left:l,            top:t         });          tpl=null;          divBox=null;       },       removeInputDivBox:function(){        var divBox=System.get('drawPanel_InputDivBox');        if(divBox)divBox.remove();        divBox=null;       },       getInputDivBoxObjectElID:function(){        var r,divBox=System.get('drawPanel_InputDivBox');        if(divBox)r=divBox.getAttributeNS('drawtool','objectelid');        divBox=null;return r;       },       getInputDivBoxContent:function(){         var r=null;         var divBox=System.get('drawPanel_InputDivBox');         if(divBox)r=divBox.dom.innerText;         divBox=null;         return r;       },       setInputDivBoxContent:function(str){        var divBox=System.get('drawPanel_InputDivBox');         if(divBox)r=divBox.update(str);         divBox=null;       }        }    })();System.DrawTool.shapeUtil=(function(){        return {                shapePrefix:'panelShape_',                pointsPrefix:'_points_',                getShapeByElId:function(shapeID){            if(!shapeID || typeof(shapeID)!='string') return null;            var arr=shapeID.split('_');            arr=arr[arr.length-1];            return  DT_cache.shapeCollection.item(arr);        },         formatData:function(_shapeID,strData){            if(strData==null || typeof(strData)!='string') return null;                        var arr=strData.split('|');                        var points=new System.MixedCollection(),tarr;            if(arr  && arr.length && arr.length>0){                var key;                for(var i=0;i<arr.length;i++){                    tarr=arr[i].split(',');                    if(tarr && tarr.length && tarr.length==2){                        key='p' + i;                        points.add(key,new System.DrawTool.ShapePoint(_shapeID,key,i,tarr[0],tarr[1]));                    }                }                key=null;            }            arr=null;            return points;        },                createPoint:function(pointsGroupID,config){             var tpl=new System.DomHelper.Template('<v:group id="{id}" testInfo="abc" pointInfo:shapeID="{shapeID}" pointInfo:pointKey="{pointKey}"  style="position:relative;z-index:101;left:{left};top:{top};width:10;height:10;" coordsize = "{coordSizeX},{coordSizeY}">'+                                         '<v:line style="z-index:101;" from="0,0" to="10,10" strokecolor="blue"></v:line>'+                                         '<v:line style="z-index:101;" from="0,10" to="10,0" strokecolor="blue"></v:line>'+                                         '<v:oval style="position:relative;left:-3;top:-3;width:16;height:16;z-index:101;" onmousedown="System.DrawTool.lineUtil.startDraw(this);" onmouseover="System.DrawTool.overPoint=true;this.stroked=true;this.firstChild.opacity=1;" onmouseout="System.DrawTool.overPoint=false;this.stroked=false;this.firstChild.opacity=0;" fillcolor="red" stroked="false"><v:fill opacity="0" /></v:oval>' +                                         '</v:group>');                           tpl.append(pointsGroupID,config);             config=null;             tpl=null;               System.CG();                                  },        delShapeObject:function(key){            var spObj=DT_cache.shapeCollection.get(key);            if(spObj){                if(spObj.lines){                                        var arr=new Array();                    for(var i=0;i<spObj.lines.length;i++){                        arr.push([spObj.lines[i][0],spObj.lines[i][1]]);                    }                    var lineObj;                    for(var i=0;i<arr.length;i++){                        lineObj=DT_cache.lineCollection.get(arr[i][0]);                        if(lineObj){                            lineObj.removeFromPanel();                        }                        System.DrawTool.lineUtil.delLineObject(arr[i][0]);                        lineObj=null;                    }                    arr=null;                }                                spObj.destory();                spObj=null;                DT_cache.shapeCollection.replace(key,null);            }            System.CG();        }    };})();System.DrawTool.ShapeTypeGroup=function(_id,_name){    this.id=_id;    this.name=_name;};System.DrawTool.ShapeType=function(_groupID,_id,_points,_width,_height,_vml){    this.groupID=_groupID;    this.index=_id;    this.points=_points;    this.width=_width;    this.height=_height;    this.vml=_vml;};System.DrawTool.Shape=function(_shapetype,w,h,l,t,index){    this.index=index?index:DT_cache.shapeCollection.length;    this.width=w;    this.height=h;    this.left=l;      this.top=t;    this.shapetype=_shapetype;        var stype=DT_cache.shapeTypeCollection.get(this.shapetype);      if(stype){       this.points=System.DrawTool.shapeUtil.formatData(this.index,stype.points);       this.configWidth=stype.width;       this.configHeight=stype.height;    }stype=null;    };System.DrawTool.Shape.prototype=(function(){    var util=System.DrawTool.util;    var spUtil=System.DrawTool.shapeUtil;    return {                        appendToPanel:function(vmldata){                 if(typeof(vmldata)=='undefined' || vmldata==''){                    var stype=DT_cache.shapeTypeCollection.get(this.shapetype);if(stype){                    vmldata=stype.vml;                }}                         var stpl=new System.DomHelper.Template('<v:group id="{id}" drawtool:shapetype="{shapetype}" style="z-index:10;width:{width};height:{height};left:{left};top:{top};position:relative;z-index:{id};border:none;" coordsize="200,200" >{vmldata}</v:group>');                           var el=stpl.append('draw_panel_gp',{                                    id:(spUtil.shapePrefix + this.index),                                    shapetype:this.shapetype,                                    width: this.addUnits(this.width),                                    height:this.addUnits(this.height),                                    left: this.addUnits(this.left),                                    top: this.addUnits(this.top),                                    vmldata:vmldata                                });                                                                                                                                                       this.bindMouseDownEventHandler();                this.createPoints();                this.setShadow();                this.createTextBox(this.description);                if(System.DrawTool.drawMode!='arrow'){                    System.DrawTool.util.setDrawMode('arrow');                }                  el=null;                System.CG();                return this.index;            },            removeFromPanel:function(){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                    el.remove();                    System.DrawTool.propertyPanel.clearPanel();                }el=null;                System.CG();            },            mouseDownEventHandler:function(e){                if(System.DrawTool.overPoint) return;                                                util.unFocusShapeTextBox(null,true);                util.unFocusLineTextBox(null,true);                                                System.DrawTool.propertyPanel.updatePropertyFieldsValue();                                System.DrawTool.FillRectange.bindToShape(this);                if(System.DrawTool.drawMode!='arrow'){                    System.DrawTool.util.setDrawMode('arrow');                    System.DrawTool.FillRectange.show();                                    }                                System.DrawTool.FillLine.hide();                System.DrawTool.FillLine.clearBindCollection();                var dd = System.DrawTool.FillRectange.getDD();                if(dd)dd.fillRectangeMouseDown.apply(dd,[e]);dd=null;                                                System.DrawTool.propertyPanel.createShapePropertiesList(this);                                System.CG();            },            bindMouseDownEventHandler:function(){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                  el.on('mousedown',this.mouseDownEventHandler);                  }el=null;            },            removeMouseDownEventHandler:function(){               var el=System.get(spUtil.shapePrefix + this.index);               if(el){                 el.un('mousedown',this.mouseDownEventHandler);                }el=null;            },            getSize:function(){                return [this.width,this.height];            },            getLeftTop:function(){                return [this.left,this.top];            },                        setSize:function(w,h){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                    var oldWidth=this.width,oldHeight=this.height;                    el.setSize(w,h);                        this.width=w;                    this.height=h;                                        var restoreSize=util.restoreCoordinate([w,h],null,true);                                         var itemPrefix=spUtil.shapePrefix + this.index + spUtil.pointsPrefix;                    var pg=System.get(itemPrefix);                    if(pg){pg.dom.coordsize = restoreSize[0]+ ','+ restoreSize[1];pg.setSize(restoreSize[0],restoreSize[1]);}                                                            var rateW=w/this.configWidth,rateH=h/this.configHeight;                    var coordX=parseInt(rateW*this.pointCoordSizeX),coordY=parseInt(rateH*this.pointCoordSizeY);                    var diffTop=parseInt((10*this.configHeight)/h),diffLeft=parseInt((5*this.configWidth)/w);                    if(this.points && this.points.keys && this.points.keys.length>0){                            var key,item;                            for(var i=0,len=this.points.length;i<len;i++){                                key=this.points.keys[i];                                item=this.points.get(key);                                item.reposition(diffLeft,diffTop,coordX,coordY);                            }key=null;item=null;                                           }                                                                                                   if(typeof(this.lines)!='undefined' && (this.lines instanceof Array)){                        var lineObj,rateX=this.width/oldWidth,rateY=this.height/oldHeight;                        for(var i=0;i<this.lines.length;i++){                            lineObj=DT_cache.lineCollection.get(this.lines[i][0]);                            if(lineObj){                                                            switch(this.lines[i][1]){                                case 'start':                                    lineObj.rePositionStartPoints(rateX,rateY,[this.left,this.top]);                                break;                                case 'end':                                    lineObj.rePositionEndPoints(rateX,rateY,[this.left,this.top]);                                break;                            }}lineObj=null;                        }                    }                                        restoreSize=null;itemPrefix=null;pg=null;                                     }el=null;                System.CG();            },            setLeftTop:function(l,t){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                    var diffXY=[l-this.left,t-this.top];                          el.setLeftTop(l,t);                        this.left=l;                    this.top=t;                                                             if(typeof(this.lines)!='undefined' && (this.lines instanceof Array)){                        var lineObj;                        for(var i=0;i<this.lines.length;i++){                            lineObj=DT_cache.lineCollection.get(this.lines[i][0]);                            if(lineObj){switch(this.lines[i][1]){                                case 'start':                                    lineObj.reDrawStartPoints(diffXY);                                break;                                case 'end':                                   lineObj.reDrawEndPoints(diffXY);                                break;                            }}lineObj=null;                        }                    }                }el=null;                },            addUnits:function(size){                return System.DomHelper.addUnits(size,this.defaultUnit);            },            removeUnits:function(sizeWithUnit){                return System.DomHelper.removeUnits(sizeWithUnit);            },            getCenterPointXY:function(){                 return [parseInt(this.left+this.width/2),parseInt(this.top + this.height/2)];            },            createPoints:function(){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                   var itemPrefix=spUtil.shapePrefix + this.index + spUtil.pointsPrefix;                   var w=this.removeUnits(this.width)/10,h=this.removeUnits(this.height)/10;                   this.pointCoordSizeX=parseInt(w/10);this.pointCoordSizeY=parseInt(h/10);                   var str='<v:group id="' + itemPrefix + '" style="z-index:100;position:relative;width:' + w + ';height:' + h + ';top:0;left:0;display:none;" coordsize = "' + w + ','+ h +'">';                       str+= '</v:group>';                   el.insertHtml('beforeend',str);                  if(this.points && this.points.keys && this.points.keys.length>0){                            var key,item;                            for(var i=0,len=this.points.length;i<len;i++){                                key=this.points.keys[i];                                item=this.points.get(key);                                item.create(this.pointCoordSizeX,this.pointCoordSizeY);                            }key=null;item=null;                  }                                     this.pointsCreated=true;                  itemPrefix=null;                }el=null;                System.CG();            },            drawPoints:function(){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                    alert(this.points);                }el=null;                        },            showPoints:function(){                var itemPrefix=spUtil.shapePrefix + this.index + spUtil.pointsPrefix;                var pg=System.get(itemPrefix);if(pg){                    pg.visibilityMode=2;                    pg.show();                }pg=null;                itemPrefix=null;            },            hidePoints:function(){                var itemPrefix=spUtil.shapePrefix + this.index + spUtil.pointsPrefix;                var pg=System.get(itemPrefix);if(pg){                    pg.visibilityMode=2;                    pg.hide();                }pg=null;                itemPrefix=null;            },                        setShadow:function(){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                                 var shapeEl=el.child("*[name=shapeElement]");                    if(shapeEl){                        var shapeShadow=shapeEl.child("shadow[name=shapeShadow]");                        if(!shapeShadow){                                                      shapeEl.insertHtml('beforeend','<v:shadow name="shapeShadow" on="T" type="single" color="#7D7D7D" offset="5px,5px"/>');                                                    }shapeShadow=null;                    }shapeEl=null;                }el=null;            },                        removeShadow:function(){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                                 var shapeEl=el.child("*[name=shapeElement]");                    if(shapeEl){                        var shapeShadow=shapeEl.child("shadow[name=shapeShadow]");                        if(shapeShadow){                                                        shapeShadow.remove();                        }shapeShadow=null;                    }shapeEl=null;                }el=null;                        },                        createTextBox:function(str){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                     var shapeEl=el.child("*[name=shapeElement]");                    if(shapeEl){                        var shapeText=shapeEl.child("textbox[name=shapeText]");                        if(!shapeText){                                                      shapeText=shapeEl.insertHtml('afterbegin','<v:textbox name="shapeText" style="word-break:break-all;text-align:center;vertical-align:middle;font-size:12px;"></v:textbox>');                                                    }if(shapeText && str && str!=''){                            shapeText=System.fly(shapeText);shapeText.update(str);                        }this.setTextBoxCenter();                        shapeText=null;                    }shapeEl=null;                }el=null;                       },            setTextBoxCenter:function(){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                                 var shapeEl=el.child("*[name=shapeElement]");                    if(shapeEl){                        var shapeText=shapeEl.child("textbox[name=shapeText]");                        if(shapeText){                                                      var h=this.height/System.DrawTool.rate,th=shapeText.getHeight();                            shapeText.dom.inset='0pt ' + parseInt(h/2-th/2) +'pt 0pt 0pt';                                            }shapeText=null;                    }shapeEl=null;                }el=null;                               },                        focusTextBox:function(){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                                 var shapeEl=el.child("*[name=shapeElement]");                    if(shapeEl){                        var shapeText=shapeEl.child("textbox[name=shapeText]");                        if(shapeText){                                                    this.removeMouseDownEventHandler();                           var cxy=util.restoreCoordinate(this.getCenterPointXY(),[0,0],true);                           util.createInputDivBox(cxy[0]-50,cxy[1]-10,el.id);                           util.setInputDivBoxContent(shapeText.dom.innerText);                            shapeText.update('');                           cxy=null;                                           }shapeText=null;                    }shapeEl=null;                }el=null;                                     },                        unFocusTextBox:function(){                var el=System.get(spUtil.shapePrefix + this.index);                if(el){                                 var shapeEl=el.child("*[name=shapeElement]");                    if(shapeEl){                         var shapeText=shapeEl.child("textbox[name=shapeText]");                        if(shapeText){                              var ct=util.getInputDivBoxContent();                           if(ct && ct!=null){                            shapeText.update(ct);                             this.description=ct;                            this.setTextBoxCenter();                           }ct=null;                              util.removeInputDivBox();                                               this.bindMouseDownEventHandler();                                              }shapeText=null;                    }shapeEl=null;                }el=null;                          },            destory:function(){                if(this.lines)this.lines.clear();                this.lines=null;                if(this.points)this.points.clear();                this.points=null;                if(this.properties)this.properties.clear();                this.properties=null;                                                this.configWidth=null;                this.configHeight=null;                this.shapetype=null;            }        };})();System.DrawTool.ShapePoint=function(_shapeID,_key,_index,_configLeft,_configTop){   this.shapeID=_shapeID;   this.key=_key;   this.index=_index;   this.configLeft=_configLeft;   this.configTop=_configTop;   this.Left=_configLeft;   this.Top=_configTop;      };System.DrawTool.ShapePoint.prototype=(function(){    var spUtil=System.DrawTool.shapeUtil;    return {        setLeftTop:function(left,top){            var id=spUtil.shapePrefix + this.shapeID + spUtil.pointsPrefix + this.key;            var pt=System.get(id);            if(pt){                pt.dom.style.left=left;                pt.dom.style.top=top;                this.Left=left;                this.Top=top;            }pt=null;            id=null;        },        setCoordSize:function(coordX,coordY){             var id=spUtil.shapePrefix + this.shapeID + spUtil.pointsPrefix + this.key;            var pt=System.get(id);            if(pt){                pt.dom.coordSize=coordX + ',' + coordY;            }pt=null;            id=null;                   },        create:function(coordX,coordY){            var id=spUtil.shapePrefix + this.shapeID + spUtil.pointsPrefix + this.key;            var config={                id:id,                shapeID:this.shapeID,                pointKey:this.key,                left:parseInt(this.configLeft-5),                top:parseInt(this.configTop-10),                coordSizeX:coordX,                coordSizeY:coordY            };id=null;            spUtil.createPoint(spUtil.shapePrefix + this.shapeID+ spUtil.pointsPrefix ,config);        },        reposition:function(diffLeft,diffTop,coordX,coordY){            var left=this.configLeft-diffLeft,top=this.configTop-diffTop;            this.setLeftTop(left,top);left=null;top=null;            this.setCoordSize(coordX,coordY);        }       }})();System.DrawTool.lineType=function(_groupID){    this.groupID=_groupID;};System.DrawTool.lineUtil=(function(){    var util=System.DrawTool.util;    var spUtil=System.DrawTool.shapeUtil;        var startPoint,firstPoint,lastPoint,endPoint;    var shapeID,currentLine;    var pointMarginSize=20;        return {        linePrefix:'panelLine_',        getLineByElId:function(lineID){            if(!lineID || typeof(lineID)!='string') return null;            var arr=lineID.split('_');            arr=arr[arr.length-1];            return  DT_cache.lineCollection.item(arr);        },                        getMarginPoint:function(centerXY,nearPoint,shapeSize,shapeLeftTop){                        var s=Math.abs(nearPoint[1]-centerXY[1])/Math.abs(nearPoint[0]-centerXY[0]);            var shapeSin=shapeSize[1]/shapeSize[0];            var returnPoint,aspect;                        if(s<shapeSin){               if(nearPoint[0]>centerXY[0]){                 aspect='right';               }else{                aspect='left';               }            }else if(s>shapeSin){                if(nearPoint[1]>centerXY[1]){                  aspect='bottom';                }else{                  aspect='top';}            }                        switch(aspect){                case 'left':                    returnPoint=[shapeLeftTop[0] - pointMarginSize * System.DrawTool.rate,nearPoint[1]];                break;                case 'top':                    returnPoint=[nearPoint[0],shapeLeftTop[1]-pointMarginSize * System.DrawTool.rate];                break;                case 'right':                    returnPoint=[shapeLeftTop[0] + shapeSize[0] + pointMarginSize * System.DrawTool.rate,nearPoint[1]];                break;                case 'bottom':                    returnPoint=[nearPoint[0],shapeLeftTop[1] +shapeSize[1] +pointMarginSize * System.DrawTool.rate];                break;            }                                 return returnPoint;          },                startDraw:function(oval){                        startPoint=null;firstPoint=null;lastPoint=null;endPoint=null;            var gp=System.get('draw_panel_gp');            if(gp){                 var o=System.get(oval);if(o){                    var dp=System.get("draw_panel");                    if(dp){                         dp.on("mousemove",this.onDraw);                         dp.on("mouseup",this.endDraw);                                     var lr=o.getWidth()/2,tr=o.getHeight()/2;                                                  startPoint=util.convertCoordinate([o.getLeft(),o.getTop()],[lr,tr]);                                                  currentLine=new System.DrawTool.PolyLine(startPoint);                                                                           var p=o.dom.parentNode;                        p=System.fly(p);if(p){shapeID=p.getAttributeNS("pointInfo","shapeID");                            var pobj=DT_cache.shapeCollection.get(shapeID);                            if(pobj){                                currentLine.startShapeID=shapeID;                                firstPoint=System.DrawTool.lineUtil.getMarginPoint(pobj.getCenterPointXY(),startPoint,pobj.getSize(),pobj.getLeftTop());                               }                        }p=null;                    }dp=null;                                                  }                 o=null;                            }gp=null;        },        onDraw:function(e){               if(startPoint){                var xy=e.getXY();                          endPoint=util.convertCoordinate(xy);                if(currentLine){                    if(firstPoint){                        currentLine.firstPoint=firstPoint;                    }                    currentLine.endPoint=endPoint;                    currentLine.draw();                }            }                      },                endDraw:function(e){             var startShapeID=shapeID;               var dp=System.get('draw_panel');             if(dp){                     if(startShapeID){                    var spobj=DT_cache.shapeCollection.get(startShapeID);                    if(spobj){                        if(!spobj.lines)spobj.lines=new Array();                        spobj.lines.push([currentLine.index,'start']);                    }                }                                                var target=System.fly(e.target);                var p=target.dom.parentNode;                if(target){                    var lr=target.getWidth()/2,tr=target.getHeight()/2;                                        p=System.fly(p);if(p){                         shapeID=p.getAttributeNS("pointInfo","shapeID");                         if(typeof(shapeID)!='undefined'){                            var pobj=DT_cache.shapeCollection.get(shapeID);                            if(pobj){                              endPoint=util.convertCoordinate([target.getLeft(),target.getTop()],[lr,tr]);                              if(currentLine){                                currentLine.endShapeID=shapeID;                                 if(!pobj.lines)pobj.lines=new Array();                                 pobj.lines.push([currentLine.index,'end']);                              }                              lastPoint=System.DrawTool.lineUtil.getMarginPoint(pobj.getCenterPointXY(),endPoint,pobj.getSize(),pobj.getLeftTop());                                  }                                }                    }lr=null;tr=null;                }target=null;                    dp.un("mousemove",this.onDraw);             dp.un("mouseup",this.endDraw);                if(currentLine){                    if(typeof(p)!="undefined"){                        currentLine.lastPoint=lastPoint;                         currentLine.draw();                     }                    currentLine.setSolid();                    currentLine.setArrow();                                        DT_cache.lineCollection.add(DT_cache.lineCollection.length,currentLine);                 }                p=null;             }dp=null;shapeID=null;             System.CG();        },        delLineObject:function(key){            var lineObj=DT_cache.lineCollection.get(key);            if(lineObj){                if(lineObj.startShapeID){                    var startShape=DT_cache.shapeCollection.get(lineObj.startShapeID);                    if(startShape && startShape.lines){                        var index=-1;                        for(var i=0;i<startShape.lines.length;i++){                            if(startShape.lines[i][0]==lineObj.index) index=i;                        }                        if(index >= 0)startShape.lines.splice(index,1);}                }                                if(lineObj.endShapeID){                    var endShape=DT_cache.shapeCollection.get(lineObj.endShapeID);                    if(endShape && endShape.lines){                        var index=-1;                        for(var i=0;i<endShape.lines.length;i++){                            if(endShape.lines[i][0]==lineObj.index) index=i;                        }                        if(index >= 0)endShape.lines.splice(index,1);}                }                lineObj.destory();                lineObj=null;                 DT_cache.lineCollection.replace(key,null);            }            System.CG();        }    };})();System.DrawTool.PolyLine=function(_startPoint,_endPoint,_index){    this.index=_index?_index:DT_cache.lineCollection.length;    this.startPoint=_startPoint;    this.endPoint=_endPoint;    this.firstPoint=null;    this.lastPoint=null;        this.startShapeID=null;    this.endShapeID=null;    };System.DrawTool.PolyLine.prototype=(function(){    var util=System.DrawTool.util;    var lineUtil=System.DrawTool.lineUtil;        return {               draw:function(){            var gp=System.get('draw_panel_gp');            if(gp){                 var l=System.get(lineUtil.linePrefix + this.index);                if(l){                    var p1=this.startPoint,p2=this.endPoint;                    var pointsStr=this.startPoint[0] + ',' + this.startPoint[1] + ' ';                    if(this.firstPoint){                        p1=this.firstPoint;                        pointsStr+=this.firstPoint[0] + ',' + this.firstPoint[1] + ' ';                    }                                        if(this.lastPoint) p2=this.lastPoint;                                                var mp1=[p2[0],p1[1]],mp2=[p1[0],p2[1]];                                                this.movePoint=mp1;                       if(this.modifyMovePoint && (this.modifyMovePoint instanceof Array)) this.movePoint=this.modifyMovePoint;                    pointsStr+=this.movePoint[0] + ',' + this.movePoint[1] + ' ';                                        if(this.lastPoint){                        pointsStr+=this.lastPoint[0] + ',' + this.lastPoint[1] + ' ';                    }                                        pointsStr+=this.endPoint[0] + ','+ this.endPoint[1];                    l.dom.points.value= pointsStr;pointsStr=null;                                        this.setLabelPosition();                }else if(typeof(this.endPoint)!="undefined"){                    var html='<v:PolyLine id="' + lineUtil.linePrefix + this.index + '"  style="position:relative;cursor:pointer;z-index:-1;" Points="' + this.startPoint[0] + ',' + this.startPoint[1] + ' ' + this.endPoint[0] + ','+ this.endPoint[1] + '" ><v:stroke name="lineStroke" dashstyle="dash" /><v:fill name="lineFill" opacity="0" /></v:PolyLine>';                                gp.insertHtml('beforeend',html);html=null;                                        this.bindMouseDownEventHandler();                                        Event.on(lineUtil.linePrefix + this.index,'dblclick',this.dblClickEventHandler);                }l=null;             }gp=null;             System.CG();             },              rePositionStartPoints:function(rateX,rateY,shapeLeftTop){            this.startPoint[0]=(rateX)*(this.startPoint[0]-shapeLeftTop[0])+shapeLeftTop[0];            this.startPoint[1]=(rateY)*(this.startPoint[1]-shapeLeftTop[1])+shapeLeftTop[1];            if(this.firstPoint){                var pobj=DT_cache.shapeCollection.get(this.startShapeID);if(pobj){                            this.firstPoint=lineUtil.getMarginPoint(pobj.getCenterPointXY(),this.startPoint,pobj.getSize(),pobj.getLeftTop());                }            }            this.draw();       },              rePositionEndPoints:function(rateX,rateY,shapeLeftTop){            this.endPoint[0]=(rateX)*(this.endPoint[0]-shapeLeftTop[0])+shapeLeftTop[0];            this.endPoint[1]=(rateY)*(this.endPoint[1]-shapeLeftTop[1])+shapeLeftTop[1];            if(this.lastPoint){                var pobj=DT_cache.shapeCollection.get(this.endShapeID);if(pobj){                            this.lastPoint=lineUtil.getMarginPoint(pobj.getCenterPointXY(),this.endPoint,pobj.getSize(),pobj.getLeftTop());                }pobj=null;            }            this.draw();              },              reDrawStartPoints:function(diffXY){           if(typeof(diffXY)!='undefined' && (diffXY instanceof Array)){            this.startPoint[0]+=diffXY[0];            this.startPoint[1]+=diffXY[1];            if(this.firstPoint){                this.firstPoint[0]+=diffXY[0];                this.firstPoint[1]+=diffXY[1];            }            this.draw();           }       },              reDrawEndPoints:function(diffXY){           if(typeof(diffXY)!='undefined' && (diffXY instanceof Array)){            if(typeof(this.endPoint)!="undefined"){             this.endPoint[0]+=diffXY[0];             this.endPoint[1]+=diffXY[1];            }            if(this.lastPoint){                this.lastPoint[0]+=diffXY[0];                this.lastPoint[1]+=diffXY[1];            }            this.draw();           }              },              setSolid:function(){            var l=System.get(lineUtil.linePrefix + this.index);            if(l){                 var stroke=l.child('stroke[name=lineStroke]');                 if(stroke){                    stroke.dom.dashstyle='';                 }stroke=null;            }l=null;       },              setArrow:function(){             var l=System.get(lineUtil.linePrefix + this.index);            if(l){                 var stroke=l.child('stroke[name=lineStroke]');                 if(stroke){                    stroke.dom.endArrow='Classic';                 }stroke=null;            }l=null;              },       bindMouseDownEventHandler:function(){        var l=System.get(lineUtil.linePrefix + this.index);        if(l){            l.on('mousedown',this.mouseDownEventHandler);        }l=null;       },       mouseDownEventHandler:function(e){                          util.unFocusLineTextBox(null,true);             util.unFocusShapeTextBox(null,true);                                           System.DrawTool.propertyPanel.updatePropertyFieldsValue();                        System.DrawTool.FillLine.bindToLine(this);            if(System.DrawTool.drawMode!='arrow'){                System.DrawTool.util.setDrawMode('arrow');                System.DrawTool.FillLine.show();            }                        System.DrawTool.FillRectange.hide();            System.DrawTool.FillRectange.clearBindCollection();                                    System.DrawTool.propertyPanel.createLinePropertiesList(this);        },         dblClickEventHandler:function(e){           if(System.DrawTool.FillLine.bindCollection.length>0){              var bindEl,lobj;             bindEl=System.get(System.DrawTool.FillLine.bindCollection[0]);             if(bindEl){                 lobj=lineUtil.getLineByElId(bindEl.dom.id);                 if(lobj){                    var xy=lobj.getCenterXY();                    if(lobj.movePoint)xy=lobj.movePoint;                    util.createInputDivBox(xy[0]/System.DrawTool.rate-50,xy[1]/System.DrawTool.rate-10,bindEl.id);                    lobj.focusTextBox();                 }             }bindEl=null;            }         },         getCenterXY:function(){            var sp=this.startPoint,ep=this.endPoint;            if(this.firstPoint)sp=this.firstPoint;            if(this.lastPoint) ep=this.endPoint;                        return [(sp[0]+ep[0])/2,(sp[1]+ep[1])/2];         },         createLabel:function(str){            var lbID= lineUtil.linePrefix + this.index + '_lineLabel';                        var dplc=System.get('draw_panel_gp');               if(dplc){                var lineLabel=dplc.insertHtml('afterbegin','<v:rect id="' + lbID + '"  style="z-index:99;"><v:fill opacity="0" /><v:textbox name="lineText" inset="0pt,0pt,0pt,0pt"></v:textbox></v:rect>');                if(lineLabel && str && str!=''){                    lineLabel=System.fly(lineLabel);                    var tb=lineLabel.child('*[name=lineText]');                    if(tb)tb.update(str);tb=null;                }lineLabel=null;             }             dplc=null;tbID=null;         },         setLabelPosition:function(){            var lbID= lineUtil.linePrefix + this.index + '_lineLabel';            var lb=System.get(lbID);            if(lb){                var xy=this.getCenterXY();                if(this.movePoint)xy=this.movePoint;                lb.setLeftTop(xy[0],xy[1]);            }lb=null;lbID=null;         },         focusTextBox:function(){            var lbID= lineUtil.linePrefix + this.index + '_lineLabel';            var lineLabel=System.get(lbID);            if(lineLabel){                var tb=lineLabel.child('*[name=lineText]');                if(tb){                    var txt=tb.dom.innerText;                    util.setInputDivBoxContent(txt);                    tb.update('');                 }tb=null;            }         },         unFocusTextBox:function(){            var el=System.get(lineUtil.linePrefix + this.index);            if(el){                       var lbID= lineUtil.linePrefix + this.index + '_lineLabel';                    var lineLabel=System.get(lbID);                    if(!lineLabel || lineLabel==null){                        this.createLabel();                        lineLabel=System.get(lbID);                    }                    if(lineLabel){                             var tb=lineLabel.child('*[name=lineText]');                        if(tb){                            var ct=util.getInputDivBoxContent();                            if(ct && ct!=null){                                tb.update(ct);                                 this.description=ct;                            }ct=null;                        }tb=null;                    }lineLabel=null;tbID=null;                                         this.setLabelPosition();                                           util.removeInputDivBox();                                       this.bindMouseDownEventHandler();                                  }el=null;          },         removeFromPanel:function(){            var el;            el=System.get(lineUtil.linePrefix + this.index + '_lineLabel');            if(el){                el.remove();            }            el=System.get(lineUtil.linePrefix + this.index);            if(el){                 el.remove();            }el=null;            System.DrawTool.propertyPanel.clearPanel();         },         destory:function(){            if(this.properties)this.properties.clear();            this.properties=null;                        this.movePoint=null;this.modifyMovePoint=null;            this.startPoint=null;this.endPoint=null;            this.firstPoint=null;this.lastPoint=null;                 }    };    })();System.DrawTool.itemMapGhost=(function(){    var ghostElID='tempItemMap';    var resized=false;    var listWidth,listHeight;    var DT_MG_cache={path:null,vmldata:null};    return {                init:function(){           var div={id:ghostElID,                    style:{                        'height':'0px',                        'width':'0px',                        'border':'none',                        'position':'absolute',                        'left':'0',                        'top':'0',                        'visibility':'hidden',                        'cursor':'move',                        'z-index':'99'                        }};            var body=System.query('body');if(body && body.length && body.length>0){                body=body[0];var tmap=System.DomHelper.append(body,div,null);                               var dd=new System.UI.dd.DD(System.id(tmap),"WindowDrag");                                dd.startDrag=this.startDrag;                dd.onDrag=this.onDrag;                dd.endDrag=this.endDrag;                dd=null;tmap=null;            }         div=null;body=null;                     Event.on(document,'mouseup',function(){                var div=System.get('tempItemMap');if(div){div.hide();}div=null;            });                    },                startDrag:function(e){            var el=System.get(ghostElID);                        listWidth=el.getWidth();listHeight=el.getHeight();            el=null;        },                onDrag:function(e){                       var dpc=System.get('draw_panelContainer');if(dpc){                var dpxy=dpc.getXY(),xy=e.getXY();                var el=System.get(ghostElID);                var th=el.getHeight(),tw=el.getWidth();                if(xy[0]>(dpxy[0]+30) && xy[1]>(dpxy[1]+30)){                    if(!resized){                        var dw=el.getAttributeNS('drawtool','width');                        var dh=el.getAttributeNS('drawtool','height');                        el.setSize(parseInt(dw),parseInt(dh));                        resized=true;dw=null;dh=null;                     }                    el.setStyle('border','dotted 1px #00FF00');                    el.setStyle('cursor','default');                }else{                     if(resized){                          el.setSize(listWidth,listHeight);resized=false;                     }                     el.setStyle('border','none');                     el.setStyle('cursor','move');                                     }dpxy=null;xy=null;th=null;tw=null;el=null;            }dpc=null;        },                endDrag:function(e){            resized=false;                        var el=System.get(ghostElID);            el.setStyle('border','none');            var xy=e.getXY();var tw=el.getWidth();var th=el.getHeight();var tl,tt,l,t;            tl=el.getLeft();tt=el.getTop();            var dp=System.get('draw_panel');if(dp){l=dp.getLeft();t=dp.getTop();};            var dpg=System.get('draw_panel_gp');            var shapeEl=el.child('group:first-child');            if(shapeEl!=null){                                 var sp=new System.DrawTool.Shape(shapeEl.getAttributeNS('drawtool','shapetype'),                                                 parseInt(tw * System.DrawTool.rate),                                                 parseInt(th * System.DrawTool.rate),                                                 parseInt((tl-l)*System.DrawTool.rate),                                                 parseInt((tt-t)*System.DrawTool.rate)                                                );                DT_cache.shapeCollection.add(DT_cache.shapeCollection.length,sp);                 sp.appendToPanel();                 el=null;dp=null;            }                        if(shapeEl)shapeEl.remove();            shapeEl=null;            System.CG();            return;        },        getGhostEl:function(){            return System.get(ghostElID);        }    };})();System.onReady(System.DrawTool.itemMapGhost.init,System.DrawTool.itemMapGhost,true);System.DrawTool.FillRectange=(function (){    var util=System.DrawTool.util;    var spUtil=System.DrawTool.shapeUtil;        var fillRectangeID='fillRectange';     var fillRect,rectMM,oval,line;    var rectWN,rectNN,rectEN,rectEE,rectES,rectSS,rectWS,rectWW;    return {              bindCollection:null,              init:function(){         this.appendToPanel();       },              bindToShape:function(el){        if(!el || typeof(el)=='undefine') return false;        var element=System.fly(el);        var elId=element.dom.id;        var sp=spUtil.getShapeByElId(elId);         var t=element.getTop(),l=element.getLeft();               var w=element.getWidth(),h=element.getHeight();        if(sp){w=System.DomHelper.removeUnits(sp.width);h=System.DomHelper.removeUnits(sp.height);}         var restoreSize=util.restoreCoordinate([w,h],[1.55,1.55],true);                fillRect=System.get(fillRectangeID);        if(fillRect){            var xy=[l,t];xy=util.convertCoordinate(xy,[1.55,1.55]);             fillRect.setLeftTop(xy[0],xy[1]);            this.resizeByMMSize(restoreSize[0],restoreSize[1]);xy=null;        }         rectMM=System.get(fillRectangeID + '_rectMM');        if(rectMM){            rectMM.setSize(restoreSize[0],restoreSize[1]);        }                rectMM=null;fillRect=null;        w=null;h=null;t=null;l=null;restoreSize=null;        this.bindCollection.clear();        this.bindCollection.push(elId);        elId=null;element=null;                if(!this.isVisible())this.show();        System.DrawTool.FillLine.hide();       },       bindToShapes:function(){                   },              resizeByMMSize:function(width,height){          oval=System.get(fillRectangeID + '_oval');          if(oval){            oval.setLeft((width/2)-4);          }          line=System.get(fillRectangeID + '_line');          if(line){             line.setLeft(width/2);          }          rectNN=System.get(fillRectangeID + '_rectNN');          if(rectNN){            rectNN.setLeft((width/2)-3);          }          rectEN=System.get(fillRectangeID + '_rectEN');          if(rectEN){            rectEN.setLeft(width-3);          }          rectEE=System.get(fillRectangeID + '_rectEE');          if(rectEE){            rectEE.setLeft(width-3);            rectEE.setTop((height/2)-3);          }          rectES=System.get(fillRectangeID + '_rectES');          if(rectES){            rectES.setLeft(width-3);            rectES.setTop(height-3);          }          rectSS=System.get(fillRectangeID + '_rectSS');          if(rectSS){            rectSS.setLeft((width/2)-3);            rectSS.setTop(height-3);          }          rectWS=System.get(fillRectangeID + '_rectWS');          if(rectWS){            rectWS.setTop(height-3);          }          rectWW=System.get(fillRectangeID + '_rectWW');          if(rectWW){            rectWW.setTop((height/2)-3);          }          oval=null;line=null;rectNN=null;          rectEN=null;rectEE=null;rectES=null;          rectSS=null;rectWS=null;rectWW=null;                        },              resizeBindShape:function(width,height){            if(this.bindCollection.length>0){                var bindEl,sp,w,h,xy;                for(var i=0;i<this.bindCollection.length;i++){                    bindEl=System.get(this.bindCollection[i]);                    if(bindEl){                        sp=spUtil.getShapeByElId(bindEl.dom.id);                        xy=util.convertCoordinate([width,height],null,true);                         if(sp)sp.setSize(xy[0],xy[1]);                     }bindEl=null;xy=null;                }            }                   },              getDD:function(){         return System.UI.dd.DragDropMgr.getDDById(fillRectangeID);       },              appendToPanel:function(){                    var tpl=new System.DomHelper.Template('<v:group id="{id}"  style="position:absolute;left:-1000px;top:-1000px;width:2000px;height:2000px;visibility:hidden;cursor:pointer;z-index:9" coordsize = "200,200">'+   '<v:rect id="{id}_rectMM"  style="z-index:3;width:100;height:100;"  strokecolor="#00FF00" >'+   '<v:fill opacity="0" /><v:stroke dashstyle="dash"/></v:rect>'+   '<v:oval id="{id}_oval" style="z-index:1;left:46;top:-29;width:8;height:8;" fillcolor="#00FF00"></v:oval>'+   '<v:line id="{id}_line" style="z-index:2;left:50;top:-29" from="0,0" to="0,29" strokecolor="#00FF00"><v:stroke dashstyle="dash"/></v:line>'+   '<v:rect id="{id}_rectWN" style="z-index:2;left:-3;top:-3;width:6;height:6;" fillcolor="#00FF00" ></v:rect>'+   '<v:rect id="{id}_rectNN" style="z-index:2;left:47px;top:-3;width:6;height:6;" fillcolor="#00FF00"></v:rect>'+    '<v:rect id="{id}_rectEN" style="z-index:2;left:97;top:-3;width:6;height:6;" fillcolor="#00FF00"></v:rect>'+    '<v:rect id="{id}_rectEE" style="z-index:2;left:97;top:47;width:6;height:6;" fillcolor="#00FF00"></v:rect>'+   '<v:rect id="{id}_rectES" style="z-index:2;left:97;top:97;width:6;height:6;" fillcolor="#00FF00"></v:rect>'+   '<v:rect id="{id}_rectSS" style="z-index:2;left:47;top:97;width:6;height:6;" fillcolor="#00FF00"></v:rect>'+   '<v:rect id="{id}_rectWS" style="z-index:2;left:-3;top:97;width:6;height:6;" fillcolor="#00FF00"></v:rect>'+   '<v:rect id="{id}_rectWW" style="z-index:2;left:-3;top:47;width:6;height:6;" fillcolor="#00FF00"></v:rect>'+            '</v:group>');                        tpl.append('draw_panel_gp',{                id:fillRectangeID            });                                    Event.on(fillRectangeID,'dblclick',this.onDblClick);                                    var dd=new System.DrawTool.FillRectangeDD(fillRectangeID,'WindowDrag');            dd.onDrag=function(e){                var dragEl=this.getDragEl();                System.DrawTool.FillRectange.onDrag.apply(System.DrawTool.FillRectange,[e,dragEl]);                dragEl=null;            };                        var rs = new System.DrawTool.VmlResizable(fillRectangeID + '_rectMM', {                        transparent:true                 });            rs.afterResize=function(width,height){                      System.DrawTool.FillRectange.onAfterResize.apply(System.DrawTool.FillRectange,[width,height]);            };            this.bindCollection=new Array();            tpl=null;dd=null;rs=null;                    },                removeFromPanel:function(){            var fillRect=System.get(fillRectangeID);            var pannel_gp=System.get('draw_panel_gp');            if(fillRect && pannel_gp){               this.bindCollection=null;               fillRect.remove();            }            fillRect=null;pannel_gp=null;        },                onDrag:function(e,dragEl){            if(this.bindCollection.length>0){                var sp,bindEl,rt,rl,xy;                rectMM=System.get(fillRectangeID + '_rectMM');                rt=rectMM.getTop();rl=rectMM.getLeft();                for(var i=0;i<this.bindCollection.length;i++){                    bindEl=System.get(this.bindCollection[i]);                    if(bindEl){                        sp=spUtil.getShapeByElId(bindEl.dom.id);                        xy=util.convertCoordinate([rl,rt],[1.55,1.55]);                        if(sp)sp.setLeftTop(xy[0],xy[1]);                    }bindEl=null,dt=null,dl=null;                }                rectMM=null;dpl=null;                            }dragEl=null;                    },                onAfterResize:function(width,height){            this.resizeByMMSize(width,height);              this.resizeBindShape(width,height);         },                 onDblClick:function(e){                      if(System.DrawTool.FillRectange.bindCollection.length>0){              var bindEl,sp;             bindEl=System.get(System.DrawTool.FillRectange.bindCollection[0]);             if(bindEl){                 sp=spUtil.getShapeByElId(bindEl.dom.id);                 if(sp){                   sp.focusTextBox();                    System.DrawTool.FillRectange.hide();                 }             }bindEl=null;            }        },        clearBindCollection:function(){          if(this.bindCollection!=null && this.bindCollection.length>0){            this.bindCollection.clear();          }          },                isVisible:function(){            var v=false;            var rect=System.get(fillRectangeID);            if(rect)v=rect.isVisible();rect=null;            return v;        },                   show:function(){            var rect=System.get(fillRectangeID);            if(rect)rect.show();rect=null;        },                hide:function(){            var rect=System.get(fillRectangeID);            if(rect)rect.hide();rect=null;        }          };})();System.onReady(System.DrawTool.FillRectange.init,System.DrawTool.FillRectange,false);System.DrawTool.FillLine=(function (){    var util=System.DrawTool.util;    var lineUtil=System.DrawTool.lineUtil;        var fillOvalSize=6;     var fillLineID='fillLine';            var fillLine;    return {                 bindCollection:null,              init:function(){         this.appendToPanel();       },       appendToPanel:function(){            var tpl=new System.DomHelper.Template('<v:group id="{id}"  style="position:absolute;left:-1000px;top:-1000px;width:2000px;height:2000px;visibility:hidden;cursor:pointer;z-index:99" coordsize = "200,200">'+            '</v:group>');            tpl.append('draw_panel_gp',{                id:fillLineID            });            this.bindCollection=new Array();            tpl=null;                  },       bindToLine:function(el){            if(!el || typeof(el)=='undefine') return false;            var element=System.fly(el);            var elId=element.dom.id;            var lobj=lineUtil.getLineByElId(elId);             if(!lobj || typeof(lobj)=='undefined') return false;                        var t=element.getTop(),l=element.getLeft();                             fillLine=System.get(fillLineID);            if(fillLine){                fillLine.update('');                                var xy=lobj.startPoint;                                 fillLine.setLeftTop(xy[0],xy[1]);                var tpl=new System.DomHelper.Template('<v:oval id="{id}" style="z-index:1;left:{left};top:{top};width:' +fillOvalSize+ ';height:' +fillOvalSize+ ';{cursor}" ></v:oval>');                tpl.append(fillLineID,{id:'startPoint_OverOval',left:-fillOvalSize/2,top:-fillOvalSize/2});                                var diffX,diffY;                if(lobj.firstPoint){                    diffX=parseInt((lobj.firstPoint[0]-xy[0])/System.DrawTool.rate);                    diffY=parseInt((lobj.firstPoint[1]-xy[1])/System.DrawTool.rate);                    tpl.append(fillLineID,{id:'firstPoint_OverOval',left:diffX-fillOvalSize/2,top:diffY-fillOvalSize/2});                }                if(lobj.movePoint){                    diffX=parseInt((lobj.movePoint[0]-xy[0])/System.DrawTool.rate);                    diffY=parseInt((lobj.movePoint[1]-xy[1])/System.DrawTool.rate);                    tpl.append(fillLineID,{id:'movePoint_OverOval',left:diffX-fillOvalSize/2,top:diffY-fillOvalSize/2,cursor:'cursor:move;'});                    var dd=new System.UI.dd.DD('movePoint_OverOval','WindowDrag');                    dd.onDrag=function(e){                        var dragEl=this.getDragEl();                        System.DrawTool.FillLine.movePointOnDrag.apply(System.DrawTool.FillLine,[e,dragEl]);                        dragEl=null;                    };dd=null;                }                if(lobj.lastPoint){                    diffX=parseInt((lobj.lastPoint[0]-xy[0])/System.DrawTool.rate);                    diffY=parseInt((lobj.lastPoint[1]-xy[1])/System.DrawTool.rate);                    tpl.append(fillLineID,{id:'lastPoint_OverOval',left:diffX-fillOvalSize/2,top:diffY-fillOvalSize/2});                }                if(lobj.endPoint){                    diffX=parseInt((lobj.endPoint[0]-xy[0])/System.DrawTool.rate);                    diffY=parseInt((lobj.endPoint[1]-xy[1])/System.DrawTool.rate);                    tpl.append(fillLineID,{id:'endPoint_OverOval',left:diffX-fillOvalSize/2,top:diffY-fillOvalSize/2});                }                tpl=null;            }              this.bindCollection.clear();            this.bindCollection.push(elId);                       elId=null;element=null;                        if(!this.isVisible())this.show();            System.DrawTool.FillRectange.hide();            System.CG();       },       clearBindCollection:function(){          if(this.bindCollection!=null && this.bindCollection.length>0){            this.bindCollection.clear();          }System.CG();          },       isVisible:function(){            var v=false;            var vobj=System.get(fillLineID);            if(vobj)vobj.isVisible();vobj=null;            return v;        },            show:function(){            var vobj=System.get(fillLineID);            if(vobj)vobj.show();vobj=null;        },        hide:function(){            var vobj=System.get(fillLineID);            if(vobj)vobj.hide();vobj=null;        },        movePointOnDrag:function(e,dragEl){          if(this.bindCollection!=null && this.bindCollection.length>0){            var lobj=lineUtil.getLineByElId(this.bindCollection[0]);            if(lobj){                lobj.modifyMovePoint=util.convertCoordinate(e.getXY());                lobj.draw();          }}        }    };    })();System.onReady(System.DrawTool.FillLine.init,System.DrawTool.FillLine,true);System.DrawTool.toolBar=(function(){    var DT_TB_cache={};    var itemArrow,itemPolyLine,itemArcLine;    var itemSave,itemOpen;    var util=System.DrawTool.util;        return {                init:function(){            this.formatAnchor();            itemArrow=System.get('toolbar_itemArrow');            if(itemArrow){                itemArrow.addClass('selected');                itemArrow.addListener('click',this.itemArrow_Click,this);             }itemArrow=null;            itemPolyLine=System.get('toolbar_itemPolyLine');            if(itemPolyLine){                itemPolyLine.addListener('click',this.itemPolyLine_Click,this);            }itemPolyLine=null;            itemArcLine=System.get('toolbar_itemArcLine');            if(itemArcLine){                itemArcLine.addListener('click',this.itemArcLine_Click,this);            }            itemSave=System.get('toolbar_itemSave');            if(itemSave){                itemSave.addListener('click',this.itemSave_Click,this);            }itemSave=null;            itemOpen=System.get('toolbar_itemOpen');            if(itemOpen){                itemOpen.addListener('click',this.itemOpen_Click,this);             }itemOpen=null;            itemArrow=null;itemPolyLine=null;itemArcLine=null;                    },                formatAnchor:function(){             var toolbar_menu=System.get('toolbar_menu');            if(toolbar_menu!=null){             var items = toolbar_menu.query('a');             if(items && items.length && items.length>0){              for(var i=0;i<items.length;i++){                Event.on(items[i],'focus',function(){this.blur();});              }items=null;            }}toolbar_menu=null;                   },                setDrawMode:function(mode){            if(!mode || typeof(mode)!='string' || mode=='') return false;            var dp=System.get('draw_panel');            switch(mode){                case 'arrow':                    this.unSelectDrawModeItems();                    System.DrawTool.drawMode='arrow';                    if(!System.DrawTool.FillRectange.bindCollection ||                        (System.DrawTool.FillRectange.bindCollection &&                         System.DrawTool.FillRectange.bindCollection.length>0)){                                                System.DrawTool.FillRectange.show();                    }                    util.hideShapesPoints();                      itemArrow=System.get('toolbar_itemArrow');                     if(itemArrow){                        itemArrow.addClass('selected');                       }if(dp){                        dp.setStyle("cursor",'');                        dp.removeClass('cursor_polyline');                        dp.removeClass('cursor_arcline');                    }                        break;                case 'polyline':                    this.unSelectDrawModeItems();                    System.DrawTool.drawMode='polyline';                    if(System.DrawTool.FillRectange.isVisible()){                                                System.DrawTool.FillRectange.hide();                    }                    util.showShapesPoints();                       itemPolyLine=System.get('toolbar_itemPolyLine');                      if(itemPolyLine){                        itemPolyLine.addClass('selected');                       }if(dp){                        dp.removeClass('cursor_arcline');                        dp.addClass('cursor_polyline');                    }                              break;                case 'arcline':                    this.unSelectDrawModeItems();                    System.DrawTool.drawMode='arcline';                    if(System.DrawTool.FillRectange.isVisible()){                                                System.DrawTool.FillRectange.hide();                    }                    util.showShapesPoints();                      itemArcLine=System.get('toolbar_itemArcLine');                      if(itemArcLine){                        itemArcLine.addClass('selected');                       }if(dp){                        dp.removeClass('cursor_polyline');                        dp.addClass('cursor_arcline');                    }                                 break;            }dp=null;itemArrow=null;itemPolyLine=null;itemArcLine=null;        },                unSelectDrawModeItems:function(){            var items=System.query('a[group=drawmode]','toolbar_menu');            var fly;            if(items && items.length && items.length>0){                for(var i=0;i<items.length;i++){                    fly=System.fly(items[i]);                    if(fly)fly.removeClass('selected');                }            }fly=null;items=null;        },                itemArrow_Click:function(){            this.setDrawMode('arrow');                            },                itemPolyLine_Click:function(){            this.setDrawMode('polyline');         },                itemArcLine_Click:function(){                       this.setDrawMode('arcline');         },        itemSave_Click:function(){            System.DrawTool.resolver.saveConfig();        },        itemOpen_Click:function(){            System.DrawTool.resolver.loadConfig();        }    };})();System.onReady(System.DrawTool.toolBar.init,System.DrawTool.toolBar,true);System.DrawTool.middleBar=(function(){    return {                init:function(){            var middlebar_button=System.get('middlebar_button');            if( middlebar_button!=null){                 middlebar_button.addListener('click',function(){                    var leftPanel=System.get('td_left');                    if(leftPanel!=null){leftPanel.visibilityMode=2;                    var img=this.query('img');                    if(img && img.length && img.length>0){img=img[0];}else{img=null;}                    if(leftPanel.isVisible()){                        leftPanel.hide();                        if(img!=null){img.src='component/images/drawtool/middlebar/icon_open.gif';}                    }else{                      leftPanel.show();                      if(img!=null){img.src='component/images/drawtool/middlebar/icon_close.gif';}                    }}img=null;leftPanel=null;                });                middlebar_button.addListener('focus',function(){ this.blur();});            }middlebar_button=null;                 }    };})();System.onReady(System.DrawTool.middleBar.init,System.DrawTool.middleBar,true);System.DrawTool.ShapeListPanel=(function(){    var util=System.DrawTool.util;    return {                  init:function(){            this.loadShapeGroups();         },                  loadShapeGroups:function(){                        var r=new System.AjaxRequest("component/drawtool/xmldata/shapegroup.xml",{method:"get"},      function(r){                       var xmlDocument=util.createXmlDocument(r.responseText);                var reader = new System.Data.XmlReader({                    record: 'group',                   id:'@id'                               },[                   {name: 'name'},'profile'                              ]);                var data=reader.readRecords(xmlDocument);                 var panelBody=System.query('tbody','shapeListPanel');                if(panelBody && panelBody.length && panelBody.length>0){                      panelBody=System.fly(panelBody[0]);                    var tpl=new System.DomHelper.Template('<tr><td id="td_ShapeGroup_{id}"><div class="shapeGroupTitle"><a href="javascript:void(0);" groupid="{id}" id="anchor_ShapeGroupTitle_{id}">{name}</a></div><div id="ShapeGroupContainer_{id}" class="ShapeGroupContainer"></div>');                    tpl.compile();                    if(typeof(data.records)=="undefined" || !data.records.length) return;                    var item;                    for(var i=0;i<data.records.length;i++){                     item=data.records[i];                                              DT_cache.lineTypeCollection.add(item.id,new System.DrawTool.lineType(item.id));                          tpl.append(panelBody,{                            id:item.id,                            name:item.get('name')                        });                        Event.on("anchor_ShapeGroupTitle_"+ item.id,"click",function(){setTimeout("System.DrawTool.ShapeListPanel.switchShapeGroup(" + this.getAttribute("groupid") + ")",1);});                               setTimeout("System.DrawTool.ShapeListPanel.loadShapes(" + item.id + "," + i + ",'" + item.get('profile') + "')",1);                    }                                    }panelBody=null;                data=null;reader=null;                xmlDocument=null;                                if(DT_cache.currentShapeGroupID){              var td=System.get("td_ShapeGroup_" + DT_cache.currentShapeGroupID);              if(td){td.setStyle("height","100%")};td=null;                }                System.CG();         });            r=null;         },         loadShapes:function(groupID,groupIndex,profileName){                        var r=new System.AjaxRequest("component/drawtool/xmldata/" + profileName + "?t=" + Math.random(),{method:"get"},            function(r){                var xmlDoc=util.createXmlDocument(r.responseText);                  var reader=new System.Data.XmlReader({                    record:'shape',                    id:'@id'                },[                    {name:'name'},'listwidth','listheight','width','height','points','vmldata'                ]);                var data=reader.readRecords(xmlDoc);                                var tpl=new System.DomHelper.Template('<div class="listItem"><a href="javascript:void(0);"><div id="shapeItemMap_{groupid}_{id}" drawtool:width="{width}" drawtool:height="{height}" style="width:{listwidth}px;height:{listheight}px;padding:0px;margin-top:{mtop};margin-left:{mleft};cursor:move;">' +                                            '<v:group drawtool:shapetype="{shapetype}" style="width:100%;height:100%;position:absolute;" coordsize="200,200">{vmldata}</v:group></div></a><span>{name}</span></div>');                if(typeof(data.records)=="undefined" || !data.records.length) return;                var item;                for(var i=0;i<data.records.length;i++){                 item=data.records[i];                    DT_cache.shapeTypeCollection.add(groupID + '_' + item.id,new System.DrawTool.ShapeType(groupID,item.id,item.get('points'),item.get('width'),item.get('height'),item.get('vmldata')));                                                           tpl.append("ShapeGroupContainer_"+groupID,{                        groupid:groupID,                        id:item.id,                        shapetype:groupID + '_' + item.id,                        name:item.get('name'),                        listwidth:item.get('listwidth'),                        listheight:item.get('listheight'),                        width:item.get('width'),                        height:item.get('height'),                        mtop:(80-item.get('listheight'))/2,                        mleft:(80-item.get('listwidth'))/2,                        vmldata:item.get('vmldata')                    });                                                            Event.on('shapeItemMap_' + groupID + '_' +item.id,'mousedown',function(e){                         var me=System.fly(this);                        var th=me.getHeight(),tw=me.getWidth();                        var xy=me.getXY();xy[0]+=5;xy[1]+=5;                        var dw=me.getAttributeNS('drawtool','width');                        var dh=me.getAttributeNS('drawtool','height');                                                var tmap=System.get('tempItemMap');if(tmap){                        tmap.setWidth(tw);                        tmap.setHeight(th);                        tmap.setXY(xy);                        tmap.dom.setAttribute('drawtool:width',dw);                        tmap.dom.setAttribute('drawtool:height',dh);                        tmap.update(this.innerHTML);                                                tmap.show();                        var dd = System.UI.dd.DragDropMgr.getDDById('tempItemMap');                        dd.handleMouseDown.apply(dd,[e]);dd=null;                       }me=null;th=null;tw=null;dw=null;dh=null;                       util.setDrawMode('arrow');                        System.DrawTool.FillRectange.hide();                     });                       }                                var gpContainer=System.get('ShapeGroupContainer_'+groupID);                gpContainer.insertHtml('beforeend','<br /><br /><br /><br /><br /><br /><br /><br /><br />');                gpContainer=null;                                tpl=null;data=null;reader=null;                if(0==groupIndex)System.DrawTool.ShapeListPanel.formatAnchor();                if(xmlDoc){                    var root=xmlDoc.documentElement || xmlDoc;                    var f=System.DomHelper.DomQuery.selectValue('profile',root);                    if(typeof(f)=="string" &&  f!=""){setTimeout("System.DrawTool.ShapeListPanel.loadProfileAndShapeProperties("+ groupID+",\"" + f + "\")",1);}                    root=null;f=null;                }                xmlDoc=null;                System.CG();            });           },         loadProfileAndShapeProperties:function(groupID,profileName){            var spr=new System.AjaxRequest("component/drawtool/xmldata/" + profileName + "?t=" + Math.random(),{method:"get"},            function(r){                var xmlDoc=util.createXmlDocument(r.responseText);                 var pType;                var root=xmlDoc.documentElement || xmlDoc;                var reader=new System.Data.XmlReader({                    record:'properties',                    id:'@shapeid'                },[]);                   var preader=new System.Data.XmlReader({                    record:'property'                },[                    '@name','description','defaultvalue'                ]);                 var f=System.DomHelper.DomQuery.selectValue('globaltemplate',root);                System.DrawTool.globalTemplate=f;                f=System.DomHelper.DomQuery.selectNode('globalproperties',root);                var gpdata=preader.readRecords(f);                if(typeof(gpdata.records)!="undefined" && gpdata.records.length){                  var gpitem,gpname;                  for(var k=0;k<gpdata.records.length;k++){                      gpitem=gpdata.records[k];gpname=gpitem.get('@name');                      if(gpname){                           System.DrawTool.globalPropertyTypes.add(gpname,{                            name:gpname,                            description:gpitem.get('description'),                            defaultvalue:gpitem.get('defaultvalue')                           });                           System.DrawTool.globalProperties.add(gpname,gpitem.get('defaultvalue'));                        }gpname=null;                    }                }                                                                           var data=reader.readRecords(xmlDoc);                                if(typeof(data.records)!="undefined" && data.records.length){                var item,pitem,pdata,pname,pdesc,pdvalue;                for(var i=0;i<data.records.length;i++){                 item=data.records[i];                    pType=DT_cache.shapeTypeCollection.get(groupID + "_" + item.id);                    if(pType){                        if(typeof(pType.properties)=="undefined"){                            pType.properties=new System.MixedCollection();                        }                                var pdata=preader.readRecords(item.node);                        if(typeof(pdata.records)!="undefined" && pdata.records.length){                        for(var j=0;j<pdata.records.length;j++){                          pitem=pdata.records[j];pname=pitem.get('@name');                          if(pname){                               pType.properties.add(pname,{                                name:pname,                                description:pitem.get('description'),                                defaultvalue:pitem.get('defaultvalue')                               });                            }pname=null;                          }}                    }                }}                preader=null;pdata=null;                data=null;reader=null;                                                var proot=xmlDoc.documentElement || xmlDoc;                var lps=System.DomHelper.DomQuery.selectNode("lineproperties",proot);                if(lps){                    var lpreader=new System.Data.XmlReader({                            record:'property'                        },[                            '@name','description','defaultvalue'                        ]);                                        var lineType=DT_cache.lineTypeCollection.get(groupID);                    if(lineType){                        if(typeof(lineType.properties)=="undefined"){                            lineType.properties=new System.MixedCollection();                        }                            var lpdata=lpreader.readRecords(lps),lpname;                        if(typeof(lpdata.records)!="undefined" && lpdata.records.length){                           var lpitem;                        for(var i=0;i<lpdata.records.length;i++){                          lpitem=lpdata.records[i];                             lpname=lpitem.get("@name");                             if(lpname){                                 lineType.properties.add(lpname,{                                 name:lpname,                                 description:lpitem.get('description'),                                 defaultvalue:lpitem.get('defaultvalue')                                });                             }lpname=null;                           }                           }                        lpdata=null;                    }                    lpreader=null;                }lps=null;                                                                var treader=new System.Data.XmlReader({                    record:'template',                    id:'@shapeid'                },['shapetemplate','linetemplate']);                var tdata=treader.readRecords(xmlDoc);                if(typeof(tdata.records)!="undefined" && tdata.records.length){                var titem;for(var i=0;i<tdata.records.length;i++){                 titem=tdata.records[i];                    spType=DT_cache.shapeTypeCollection.get(groupID + '_' + titem.id);                    if(spType){                        spType.shapetemplate=titem.get("shapetemplate");                        spType.linetemplate=titem.get("linetemplate");                    }                }}                tdata=null;treader=null;                xmlDoc=null;                                System.DrawTool.propertyPanel.createGlobalPropertiesList();                 System.CG();            });                  },                  switchShapeGroup:function(groupID){            if(groupID==DT_cache.currentShapeGroupID) return;            var preGroup=System.get('td_ShapeGroup_'+DT_cache.currentShapeGroupID);            if(preGroup)preGroup.setStyle('height','20px');preGroup=null;            var currentGroup=System.get('td_ShapeGroup_'+groupID);            if(currentGroup)currentGroup.setStyle('height','100%');currentGroup=null;            DT_cache.currentShapeGroupID=groupID;         },                  formatAnchor:function(){            var ShapeListPanel=System.get('ShapeListPanel');            if(ShapeListPanel!=null){             var items = ShapeListPanel.query('a');             if(items && items.length && items.length>0){              for(var i=0;i<items.length;i++){                Event.on(items[i],'focus',function(){this.blur();});              }items=null;            }}ShapeListPanel=null;                    }    };})();System.onReady(System.DrawTool.ShapeListPanel.init,System.DrawTool.ShapeListPanel,true); System.DrawTool.propertyPanel=(function(){    var spUtil=System.DrawTool.shapeUtil;    var lineUtil=System.DrawTool.lineUtil;        var fillRect=System.DrawTool.FillRectange;    var fillLine=System.DrawTool.FillLine;        return {                init:function(){            this.initPanel();        },                initPanel:function(){            var propertyPanel=System.get('propertyPanel');            if(propertyPanel!=null){                 var dd = new System.UI.dd.DDProxy(System.id(propertyPanel), "WindowDrag");                  var rs = new System.UI.Resizable(propertyPanel, {                        width: 200,                        height: 260,                        minWidth:200,                        minHeight:260                   });                  dd.setHandleElId('propertyPanel_Header');                 rs=null;dd=null;            }propertyPanel=null;                  },        clearPanel:function(){            var propertyPanel=System.get('property_Content');            if(propertyPanel){                propertyPanel.update('<dl></dl>');            }propertyPanel=null;        },        createGlobalPropertiesList:function(){         this.clearPanel();         if(System.DrawTool.globalPropertyTypes){          this.createPropertiesListHtml(System.DrawTool.globalPropertyTypes,System.DrawTool.globalProperties,'global');         }        },        createShapePropertiesList:function(shapeEl){            this.clearPanel();            if(shapeEl){                var spObj=spUtil.getShapeByElId(shapeEl.id);                if(spObj){                    var sptype=DT_cache.shapeTypeCollection.get(spObj.shapetype);                    if(sptype && sptype.properties){                        this.createPropertiesListHtml(sptype.properties,spObj.properties,'shape');                    }                }            }shapeEl=null;                   },        createLinePropertiesList:function(lineEl){            this.clearPanel();            if(lineEl){                var lineObj=lineUtil.getLineByElId(lineEl.id);                var lineType=DT_cache.lineTypeCollection.get(DT_cache.currentShapeGroupID);                if(lineObj){                    if(lineType && lineType.properties){                        this.createPropertiesListHtml(lineType.properties,lineObj.properties,'line');                    }                }            }lineEl=null;        },        createPropertiesListHtml:function(typep,objectp,objectType){            if(typep && (typep instanceof System.MixedCollection)){               var pcp=System.get('property_Content');               if(pcp){                   var dl=pcp.child('dl');if(dl){                   var pvalue;                   typep.each(function(o,i){                        pvalue=o['defaultvalue'];                        if(objectp && (objectp instanceof System.MixedCollection) && typeof(objectp.get(o['name']))!='undefined') pvalue=objectp.get(o['name']);                        dl.insertHtml('beforeend','<dt style="text-align:left;width:90px;padding-left:8px;"><label>' + o['description'] + ':</label></dt><dd style="width:98%;"><input name="propertyfield" drawtool:propname="' + o['name'] + '" drawtool:objecttype="' + objectType + '" title="' + o['description'] + '"  onblur="javascript:System.DrawTool.propertyPanel.updatePropertyValue(this,\'' + objectType + '\');" type="text" value="' + pvalue + '" /></dd>');                   });dl=null;                   }}pcp=null;            }        },        updatePropertyFieldsValue:function(){            if((typeof(fillRect.bindCollection)!='undefined' && fillRect.bindCollection.length>0) ||                (typeof(fillLine.bindCollection)!='undefined' && fillLine.bindCollection.length>0)){                    var propertyPanel=System.get('property_Content');                    if(propertyPanel){                        var pfs=propertyPanel.query('*[name=propertyfield]');                        if(pfs){                            var fly;                            for(var i=0;i<pfs.length;i++){                                fly=System.fly(pfs[i]);                                this.updatePropertyValue(fly.dom,fly.getAttributeNS('drawtool','objecttype'));                                fly=null;                            }                        }pfs=null;                    }propertyPanel=null;                }        },        updatePropertyValue:function(el,objecType){            if(!el) return;            var pvalue=el.value;el=System.fly(el);            var propname=el.getAttributeNS('drawtool','propname');            if(!propname || propname=='') return;                        switch(objecType){                case 'shape':                     if(typeof(fillRect.bindCollection)!='undefined' && fillRect.bindCollection.length>0){                        var spObj=spUtil.getShapeByElId(fillRect.bindCollection[0]);                        if(spObj){                            if(!spObj.properties)spObj.properties=new System.MixedCollection();                            if(spObj.properties && (spObj.properties instanceof System.MixedCollection)){                                var oldvalue=spObj.properties.get(propname);                                if(typeof(oldvalue)=='undefined' || oldvalue==null){                                    spObj.properties.add(propname,pvalue);                                }else{                                    spObj.properties.replace(propname,pvalue);                                }                            }                        }                    }                break;                case 'line':                    if(typeof(fillLine.bindCollection)!='undefined' && fillLine.bindCollection.length>0){                        var lineObj=lineUtil.getLineByElId(fillLine.bindCollection[0]);                        if(lineObj){                            if(!lineObj.properties)lineObj.properties=new System.MixedCollection();                            if(lineObj.properties && (lineObj.properties instanceof System.MixedCollection)){                                var oldvalue=lineObj.properties.get(propname);                                if(typeof(oldvalue)=='undefined' || oldvalue==null){                                    lineObj.properties.add(propname,pvalue);                                }else{                                    lineObj.properties.replace(propname,pvalue);                                }                            }                        }                    }                                    break;                case 'global':                 if(!System.DrawTool.globalProperties)System.DrawTool.globalProperties=new System.MixedCollection();                 if(System.DrawTool.globalProperties && (System.DrawTool.globalProperties instanceof System.MixedCollection)){                        var oldvalue=System.DrawTool.globalProperties.get(propname);                        if(typeof(oldvalue)=='undefined' || oldvalue==null){                            System.DrawTool.globalProperties.add(propname,pvalue);                        }else{                            System.DrawTool.globalProperties.replace(propname,pvalue);                        }                    }                break;            }                        el=null;propname=null;pvalue=null;        }    };})();System.onReady(System.DrawTool.propertyPanel.init,System.DrawTool.propertyPanel,true);System.DrawTool.drawPanel=(function(){    var util=System.DrawTool.util;    var spUtil=System.DrawTool.shapeUtil;    var lineUtil=System.DrawTool.lineUtil;       var propPanel=System.DrawTool.propertyPanel;        return {                init:function(){            this.initDrawPanelContainer();            this.initPanel();        },                initDrawPanelContainer:function(){            var dpc=System.get('draw_panelContainer');            if(dpc!=null){                dpc.addListener('scroll',function(){                   var sc=this.getScroll();                   var ruler_side=System.get('ruler-side');                   if(ruler_side!=null){ruler_side.setXY([this.getX(),this.getY()]);}                   var ruler_horiz=System.get('ruler-horiz');                   if(ruler_horiz!=null){ruler_horiz.setY(this.getY());}                   var ruler_verti=System.get('ruler-verti');                   if(ruler_verti!=null){ruler_verti.setX(this.getX());}                });            }dpc=null;                    },                initPanel:function(){            var dp=System.get('draw_panel');            if(dp){                dp.dom.onselectstart=function(){                    if(event && event.srcElement && event.srcElement.id=='drawPanel_InputDivBox'){                        return true;                    }                    return false;                };                dp.on('click',function(e){                    util.unFocusShapeTextBox(e);                    util.unFocusLineTextBox(e);                                        util.hideFillRectange(e);                    util.hideFillLine(e);                                        util.showGlobalProperties(e);                });            }            dp=null;            var doc=System.fly(document);            doc.addKeyListener(System.Event.KeyListener.KEY.DELETE,function(e){                                  if(System.DrawTool.FillRectange.bindCollection.length>0){                          var elID=System.DrawTool.FillRectange.bindCollection[0];                         var spObj=spUtil.getShapeByElId(elID);                         if(spObj){                            spObj.removeFromPanel();                         };                         var objID=spObj.index;                         System.DrawTool.FillRectange.hide();                         spUtil.delShapeObject(objID);  objID=null;                        }                                if(System.DrawTool.FillLine.bindCollection.length>0){                          var elID=System.DrawTool.FillLine.bindCollection[0];                         var lineObj=lineUtil.getLineByElId(elID);                         if(lineObj){                            lineObj.removeFromPanel();                         }                         var objID=lineObj.index;                         System.DrawTool.FillLine.hide();                         lineUtil.delLineObject(objID);  objID=null;                }              });            doc.addKeyListener(System.Event.KeyListener.KEY.HOME,function(e){                if(System.DrawTool.FillRectange.bindCollection.length>0){                          var elID=System.DrawTool.FillRectange.bindCollection[0];                         var spObj=spUtil.getShapeByElId(elID);                         if(spObj){if(spObj.properties)alert(spObj.properties.length);                                                     }                }                if(System.DrawTool.FillLine.bindCollection.length>0){                          var elID=System.DrawTool.FillLine.bindCollection[0];                         var lineObj=lineUtil.getLineByElId(elID);                         if(lineObj){if(lineObj.properties)alert(lineObj.properties.length);                                                     }                }            });            doc=null;        }    }})();System.onReady(System.DrawTool.drawPanel.init,System.DrawTool.drawPanel,true);System.DrawTool.resolver=(function(){    var util=System.DrawTool.util;    return {        init:function(){                                    System.DomHelper.Template.Format['getShapePropValueByShapeID']=function(shapeID,propName){                var returnValue='';                if((shapeID && shapeID!='') || shapeID==0){                    var spObj=DT_cache.shapeCollection.get(shapeID);                    if(spObj){                        if(spObj.properties && (spObj.properties instanceof System.MixedCollection)){                        var propvalue;                        spObj.properties.eachKey(function(key,ki){                            propvalue= spObj.properties.get(key);                            if(key==propName && propvalue  && propvalue!=''){                                returnValue= propvalue ;                            }                        });}                    }                }                return returnValue;           };                      System.DomHelper.Template.Format['getPropAttrbuteString']=function(propValue,attributeName){                var returnValue='';                if(propValue && propValue!=''){                    if(attributeName && attributeName!=''){                         returnValue=attributeName + '=\"' + propValue + '\" ';                    }else{ returnValue=propValue;}                             }return returnValue;           };                      System.DomHelper.Template.Format['getPropElementString']=function(propValue,elementName){            var returnValue='';                if(propValue && propValue!=''){                    if(elementName && elementName!=''){                         returnValue='<' + elementName + '>' + propValue + '<\/ ' + elementName + '>';                      }else{ returnValue=propValue; }                               }return returnValue;           };                 },        buildConfig:function(){            var str,strShapeArry=new Array(),strLineArray=new Array();            var xmlTpl=new System.DomHelper.Template('<?xml version="1.0" encoding="utf-8" ?><root><shapes>{shapes}</shapes><lines>{lines}</lines></root>');            var spTpl=new System.DomHelper.Template('<shape id="{shapeid}" shapetype="{shapetype}" width="{width}" height="{height}" left="{left}" top="{top}" description="{description}"><connectlines>{connectlines}</connectlines><properties>{properties}</properties></shape>');            var lineTpl=new System.DomHelper.Template('<line id="{lineid}" startpoint="{startpoint}" endpoint="{endpoint}" {otherpoints} startshapeid="{startshapeid}" endshapeid="{endshapeid}" description="{description}"><properties>{properties}</properties></line>');            var lineElTpl=new System.DomHelper.Template('<connectline id="{lineid}" connecttype="{type}" />');            var propTpl=new System.DomHelper.Template('<property name="{name}" value="{value}" />');                        var strConnectLines='',strProperties='';            DT_cache.shapeCollection.each(function(o,i){                if(o){                 if(o.lines && (o.lines instanceof Array)){                    for(var i=0;i<o.lines.length;i++){                        strConnectLines+=lineElTpl.applyTemplate({lineid:o.lines[i][0],type:o.lines[i][1]});                                  }                 }                 if(o.properties && (o.properties instanceof System.MixedCollection)){                    var propValue;                    o.properties.eachKey(function(key,i){                       propValue=o.properties.get(key);                       if(typeof(propValue)!='undefined' && propValue!=''){                        strProperties+= propTpl.applyTemplate({name:key,value:propValue});                       }                       propValue=null;                    });                 }                 strShapeArry.push(spTpl.applyTemplate({shapeid:o.index,shapetype:o.shapetype,width:parseInt(o.width/System.DrawTool.rate),                                                   height:parseInt(o.height/System.DrawTool.rate),left:parseInt(o.left/System.DrawTool.rate),                                                   top:parseInt(o.top/System.DrawTool.rate),description:o.description,                                                   connectlines:strConnectLines,properties:strProperties}));                }                strConnectLines='';strProperties='';            });                        var otherPoints='',strEndShapeID;            DT_cache.lineCollection.each(function(l,i){                if(l){                    if(l.properties && (l.properties instanceof System.MixedCollection)){                    var propValue;l.properties.eachKey(function(key,i){                       propValue=l.properties.get(key);                       if(typeof(propValue)!='undefined' && propValue!=''){                        strProperties+= propTpl.applyTemplate({name:key,value:propValue});                       }                       propValue=null;                    });                 }                 if(l.firstPoint){ otherPoints+=' firstpoint="' + util.restoreCoordinate(l.firstPoint,null,true).join(',') + '"';}                 if(l.lastPoint){ otherPoints+=' lastpoint="' + util.restoreCoordinate(l.lastPoint,null,true).join(',') + '"';}                 if(l.movePoint){ otherPoints+=' movepoint="' + util.restoreCoordinate(l.movePoint,null,true).join(',') + '"';}                                     strEndShapeID=(l.endShapeID?l.endShapeID:'');                 strLineArray.push(lineTpl.applyTemplate({lineid:l.index,startpoint:util.restoreCoordinate(l.startPoint,null,true).join(','),endpoint:util.restoreCoordinate(l.endPoint,null,true).join(','),                                                          otherpoints:otherPoints,startshapeid:l.startShapeID,endshapeid:strEndShapeID,                                                          description:l.description,properties:strProperties}));                }                otherPoints='';            });            otherPoints=null;strEndShapeID=null;                        str=xmlTpl.applyTemplate({shapes:strShapeArry.join(''),lines:strLineArray.join('')});                        strLines=null;strProperties=null;            propTpl=null;lineElTpl=null;            lineTpl=null;spTpl=null;            strShapeArry.clear();strShapeArry=null;            strLineArray.clear();strLineArray=null;            xmlTpl=null;            return str;        },        saveConfig:function(){            var str=this.buildConfig();alert(str);return;            var r=new System.AjaxRequest('Handler.aspx?action=save&t=' + Math.random(),{method:"post",postBody:escape(str)},                    function(r){                       str=null;                       alert(r.responseText);                    });                     },        createObjectsFromConfig:function(strConfig){            var xmlDoc=util.createXmlDocument(strConfig);            var reader = new System.Data.XmlReader({                record: 'shape',               id:'@id'                           },[               '@shapetype','@width','@height','@left','@top','@description'                          ]);            var preader=new System.Data.XmlReader({record:'property'},['@name','@value']);            var clreader=new System.Data.XmlReader({record:'connectline'},['@id','@connecttype']);                        var lreader=new System.Data.XmlReader({                record:'line',                id:'@id'            },[                '@startpoint','@endpoint','@firstpoint','@lastpoint','@movepoint','@startshapeid','@endshapeid','@description'            ]);                        var data=reader.readRecords(xmlDoc);            var pdata,cldata;            if(typeof(data.records)!="undefined" && data.records.length){            var item;for(var i=0;i<data.records.length;i++){             item=data.records[i];                var sp=new System.DrawTool.Shape(item.get('@shapetype'),parseInt(item.get('@width'))*System.DrawTool.rate,                                             parseInt(item.get('@height'))*System.DrawTool.rate,parseInt(item.get('@left'))*System.DrawTool.rate,                                             parseInt(item.get('@top')*System.DrawTool.rate),item.id);                                                             DT_cache.shapeCollection.add(item.id,sp);                sp.description=item.get('@description');                               pdata=preader.readRecords(item.node);                if(typeof(pdata.records)!="undefined" && pdata.records.length){                    sp.properties=new System.MixedCollection();                    for(var i=0;i<pdata.records.length;i++){                      sp.properties.add(pdata.records[i].get('@name'),pdata.records[i].get('@value'));                       }}                                           cldata=clreader.readRecords(item.node);                if(typeof(cldata.records)!="undefined" && cldata.records.length){                    sp.lines=new Array();                    for(var i=0;i<cldata.records.length;i++){                        sp.lines.push([cldata.records[i].get('@id'),cldata.records[i].get('@connecttype')]);                    }                }                sp.appendToPanel();            }}                        var ldata=lreader.readRecords(xmlDoc);            var firstPoint,lastPoint,movePoint;            var startShapeID,endShapeID;            ldata.records.each(function(litem){                var l=new System.DrawTool.PolyLine(util.convertCoordinate((litem.get('@startpoint')).split(','),null,true),                                            util.convertCoordinate((litem.get('@endpoint')).split(','),null,true),litem.id);                l.description=litem.get('@description');                                            DT_cache.lineCollection.add(litem.id,l);                 l.draw();l.createLabel(l.description);l.setSolid();l.setArrow();                                                           firstPoint=litem.get('@firstpoint');                if(typeof(firstPoint)!='undefined' && firstPoint!=null && firstPoint!=''){                    l.firstPoint=util.convertCoordinate(firstPoint.split(','),null,true);                }lastPoint=litem.get('@lastpoint');                if(typeof(lastPoint)!='undefined' && lastPoint!=null && lastPoint!=''){                    l.lastPoint=util.convertCoordinate(lastPoint.split(','),null,true);                }movePoint=litem.get('@movepoint');                if(typeof(movePoint)!='undefined' && movePoint!=null && movePoint!=''){                    l.movePoint=util.convertCoordinate(movePoint.split(','),null,true);                }                        startShapeID=litem.get('@startshapeid');endShapeID=litem.get('@endshapeid');                if(typeof(startShapeID)!='undefined' && startShapeID!=null && startShapeID!='')l.startShapeID=startShapeID;                if(typeof(endShapeID)!='undefined' && endShapeID!=null && endShapeID!='')l.endShapeID=endShapeID;                                  pdata=preader.readRecords(litem.node);                if(pdata.records.length>0){                    l.properties=new System.MixedCollection();                    pdata.records.each(function(pitem){                      l.properties.add(pitem.get('@name'),pitem.get('@value'));                       });}                                                            l.draw();                                firstPoint=null;lastPoint=null;movePoint=null;                startShapeID=null;endShapeID=null;            });            ldata=null;pdata=null;cldata=null;            lreader=null;clreader=null;preader=null;            reader=null;xmlDoc=null;            strConfig=null;        },        loadConfig:function(){             var r=new System.AjaxRequest('Handler.aspxaction=load&t=' + Math.random(),{method:"get"},                    function(r){                       System.DrawTool.helper.clearAllObjects();                       str=null;                       System.DrawTool.resolver.createObjectsFromConfig(r.responseText);                       alert('suc');                                          });        },                translate:function(){            var str,tpl,propobj,spType,lineResolverString;            var strCollection=new System.MixedCollection(),strKey;                     DT_cache.shapeCollection.each(function(o,i){                if(o){                    var xy=o.getCenterPointXY();                    strKey=parseInt(Math.sqrt(Math.pow(xy[0],2) + Math.pow(xy[1],2)));xy=null;                                        spType=DT_cache.shapeTypeCollection.get(o.shapetype);                    if(spType){                        tpl=new System.DomHelper.Template(spType.linetemplate);                        propobj=new Object();                        if(o.lines && (o.lines instanceof Array)){                            var lobj;lineResolverString='';                            for(var i=0;i<o.lines.length;i++){                                if(o.lines[i][1]=='start'){                                lobj=DT_cache.lineCollection.get(o.lines[i][0]);                                    if(lobj){                                    if(lobj.properties && (lobj.properties instanceof System.MixedCollection)){                                         lobj.properties.eachKey(function(key,ki){                                             propobj[key]= lobj.properties.get(key);                                         });                                    }                                    if(lobj.description && lobj.description!='') propobj.desc=lobj.description ;                                    if(lobj.startShapeID && lobj.startShapeID!='')propobj.startshapeid=lobj.startShapeID;                                    if(lobj.endShapeID && lobj.endShapeID!='')propobj.endshapeid=lobj.endShapeID;                                                                        lineResolverString +=tpl.applyTemplate(propobj);                                }                                 }}                        }                        propobj=null;                                                tpl=new System.DomHelper.Template(spType.shapetemplate);                        propobj=new Object();                        if(o.properties && (o.properties instanceof System.MixedCollection)){                            o.properties.eachKey(function(key,ki){                                propobj[key]= o.properties.get(key);                            });                        }                        if(o.description && o.description!='') propobj.desc=o.description ;                                                if(lineResolverString) propobj['line-resolverString']=lineResolverString;                        strCollection.add(strKey,tpl.applyTemplate(propobj) + "\n");                                                tpl=null;propobj=null; lineResolverString=null;                    }                }            });            strKey=null;propobj=null;            strCollection.keySort('ASC');            var str=strCollection.items.join('');            strCollection.clear();strCollection=null;                  if(System.DrawTool.globalTemplate && System.DrawTool.globalTemplate!=""){       tpl=new System.DomHelper.Template(System.DrawTool.globalTemplate);    propobj=new Object();             if(System.DrawTool.globalProperties && (System.DrawTool.globalProperties instanceof System.MixedCollection)){                 System.DrawTool.globalProperties.eachKey(function(key,ki){                     propobj[key]= System.DrawTool.globalProperties.get(key);                 });             }             propobj["shapeObjectsTranslatedString"]=str;             str=tpl.applyTemplate(propobj);       }   System.CG();            return str;        }    };})();System.onReady(System.DrawTool.resolver.init,System.DrawTool.resolver,true);System.DrawTool.windowManager=(function(){ var outputPanelDialog=null; var outputPanelContent=null;    return {  init:function(){   if(!outputPanelDialog){    outputPanelDialog=new System.UI.Components.BasicDialog("outputpanel_dlg", {                  modal:false,                  shadow:true,                  resizable:false,                  width:500,                  height:400,                  minWidth:400,                  minHeight:300,                  proxyDrag:true          });           outputPanelDialog.addButton("拷贝到剪切板",this.copyPanelContent,this);          outputPanelDialog.addButton("关闭", outputPanelDialog.hide, outputPanelDialog);                }   if(!outputPanelContent){    outputPanelContent=System.get("outputpanel_content");       }      },  showOutputPanel:function(target){   if(outputPanelDialog){    outputPanelDialog.show(target);   }  },  showLogicConfig:function(target){   if(outputPanelDialog){    outputPanelDialog.setTitle("事件流配置");    var outputStr=System.DrawTool.resolver.translate();    if(outputStr && outputStr!=""){     var re=/\n\s+?\n/ig;     outputStr=outputStr.replace(re,"\n");     this.setPanelContent(outputStr);     outputPanelDialog.show(target);    }   }  },  setPanelContent:function(str){   if(typeof(str)=="string" && str!="" && outputPanelContent){    outputPanelContent.dom.value=str;   }  },  copyPanelContent:function(){    if(outputPanelContent){    System.DrawTool.helper.copyToClipboard(outputPanelContent.dom.value);   }   }    };})();System.onReady(System.DrawTool.windowManager.init,System.DrawTool.windowManager,true);System.DrawTool.helper=(function(){    var spUtil=System.DrawTool.shapeUtil;    var lineUtil=System.DrawTool.lineUtil;    return {        clearAllObjects:function(){            var sp;            DT_cache.shapeCollection.eachKey(function(key){                sp=DT_cache.shapeCollection.get(key);                if(sp){                    sp.removeFromPanel();                    spUtil.delShapeObject(key);                }            });            DT_cache.shapeCollection.clear();            DT_cache.lineCollection.clear();        },  copyToClipboard:function(txt){         if(window.clipboardData){             window.clipboardData.clearData();             window.clipboardData.setData("Text", txt);         }else if(navigator.userAgent.indexOf("Opera") != -1) {             window.location = txt;         }else if(window.netscape){             try{                 netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");             }catch(e){                 alert("被浏览器拒绝！\n请在浏览器地址栏输入'about:config'并回车\n然后将'signed.applets.codebase_principal_support'设置为'true'");             }          var clip = Components.classes["@mozilla.org/widget/clipboard;1"].createInstance(Components.interfaces.nsIClipboard);          if (!clip)return;          var trans = Components.classes["@mozilla.org/widget/transferable;1"].createInstance(Components.interfaces.nsITransferable);          if (!trans)return;          trans.addDataFlavor("text/unicode");          var str = new Object();          var len = new Object();          var str = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);          var copytext = txt;          str.data = copytext;          trans.setTransferData("text/unicode",str,copytext.length*2);          var clipid = Components.interfaces.nsIClipboard;          if (!clip)return false;          clip.setData(trans,null,clipid.kGlobalClipboard);         }         alert("复制成功");   }                    };})();})();