(function(){if(typeof(Wade.component)=="undefined") Wade.component={};var dom=Wade.dom;var nav=Wade.nav;var event=Wade.event;var ajax=Wade.ajax;Wade.component.PageFlow = function(flow) { this.flow = flow; this.selectedTabName = "SELECTED_PAGETAB_SPAN"; this.hasPrevPage = false; this.hasNextPage = false; this.alreadyFinish = false; this.currstep = "begin"; this.beforestep = this.currstep; this.fsbtframe = nav.getFrame(["flowsubmit", parent]); this.fsbtsteps = new Array();  this.monisteps = new Array();  this.blackset = {"listener" : "listener", "service" : "service", "sp" : "sp", "Form0" : "Form0"}; this.moniblackset = {"_FormParams" : "_FormParams", "_INIT_PARAMS" : "_INIT_PARAMS"}; this.inittabcnt = 3; this.appdtabidx = 2; ajax.setAjaxLoading(false);};Wade.component.PageFlow.prototype = {  getFlow : function() {  this.flow; },   getAttribute : function(obj, attrname, defval) {  var attrvalue = obj[attrname];  if (attrvalue == null) attrvalue = defval;  return attrvalue; },  getFlowAttribute : function(attrname, defval) {  return this.getAttribute(this.flow, attrname, defval); },  getSteps : function() {  return this.flow["steps"]; },  getStep : function(stepname) {  var steps = this.getSteps();  return steps[stepname]; },  getStepAttribute : function(stepname, attrname, defval) {  var step = this.getStep(stepname);  if (step == null) return null;  return this.getAttribute(step, attrname, defval); },  getCases : function(stepname) {  var step = this.getStep(stepname);  return step["cases"]; },  getCase : function(stepname, caseval) {  var cases = this.getCases(stepname);  if (cases == null) return null;  return cases[caseval]; },  getCaseAttribute : function(stepname, caseval, attrname, defval) {  var cas = this.getCase(stepname, caseval);  if (cas == null) return null;  return this.getAttribute(cas, attrname, defval); },   initPageFlow : function() {  this.firstPageStep(); },  finishPageFlow : function() {  if (!this.verifyStepPage(this.currstep)) return;  if (!this.monitorFlowModify(true)) return;  var nextbutton = this.getStepAttribute(this.currstep, "nextbutton");  if (nextbutton == null) {   alert("the step " + this.currstep + " bing next button does not exist!");   return;  }nextbutton=null;  var acstep,activetab = dom.getElement(this.selectedTabName);  if (activetab!= null) {   acstep=activetab.parentNode.id;   if(acstep!=this.currstep)this.switchPageStep(this.currstep, false, true);  } activetab=null;    if (!this.trigerBindSubmit(this.currstep, "nextbutton")) return;    this.fillSubmitData(true);  this.clickBindSubmit(this.currstep, "nextbutton");  this.cleanupSubmitData();  this.beginFlowOverlay();  this.alreadyFinish = true; },  cancelPageFlow : function() {  var cancelbutton = this.getStepAttribute(this.currstep, "cancelbutton");  var currstepframe = nav.getFrame([this.currstep, parent]);  var bcancel = currstepframe == null ? null : currstepframe.document.getElementById(cancelbutton);  if (cancelbutton == null || bcancel == null) {   if (window.confirm("确定要取消所有操作并关闭页面吗？")) {    if (parent.parent.document.getElementById("navframeset") != null) {     parent.closeNavFrameByLocation();    } else if (top.document.getElementById("PopupAgent") != null) {     top.close();    } else {     history.back();    }   }   cancelbutton=null;return;  } else {   if (!this.trigerBindSubmit(this.currstep, "cancelbutton")) return;   this.clickBindSubmit(this.currstep, "cancelbutton");  }cancelbutton=null; },  resetPageFlow : function() {  var tabnodes = dom.getElement("pagetabs").children;  var activetab = dom.getElement(this.selectedTabName);  if (activetab != null) {   this.currstep = activetab.parentNode.id;  } else {   this.currstep = "begin";  }  this.beforestep = this.currstep;  this.hasPrevPage = (tabnodes.length > (this.inittabcnt + 1));  var nextstep = this.getStepAttribute(this.currstep, "nextstep");  this.hasNextPage = nextstep != null && nextstep != "end";    var nfsbtsteps = new Array();  var nmonisteps = new Array();  var stepname,monistep;  for (var i=1; i<tabnodes.length - this.appdtabidx; i++) {   stepname = tabnodes[i].id;   nfsbtsteps[i] = stepname;      monistep = this.monisteps[tabnodes[i].id];   if (monistep != null) nmonisteps[stepname] = monistep;  }stepname=null;monistep=null;  this.fsbtsteps = nfsbtsteps;  this.monisteps = nmonisteps;  tabnodes=null; },  firstPageStep : function() {  this.fsbtframe = nav.getFrame(["flowsubmit", parent]);  if (this.fsbtframe != null && this.fsbtframe.document.getElementById("bback") != null) {   this.nextPageStep();  } else {   setTimeout("pageflow.firstPageStep()", 20);  } },  nextPageStep : function() {  var currtagname = this.getStepAttribute(this.currstep, "tagname");  if (currtagname != "switch") {   if (!this.verifyStepPage(this.currstep)) return;   if (!this.monitorFlowModify(!this.isEndActiveTab())) return;   if (!this.trigerBindObject(this.currstep, "nextbutton")) return;      this.beforestep = this.currstep;   this.currstep = this.getStepAttribute(this.currstep, "nextstep");      this.beginFlowOverlay();  }currtagname=null;    var tagname = this.getStepAttribute(this.currstep, "tagname");  if (tagname == "switch") {   var stepframe = nav.getFrame([this.beforestep, parent]);   var expression = this.getStepAttribute(this.currstep, "expression");   var params = "&expression=" + expression;   var stepform = this.getStepForm(stepframe);   if (stepform != null) {    params += "&" + stepframe.Wade.ajax.buildFormData(stepform);    this.disabledRepeatTransfer(params);   }stepform=null;stepframe=null;   var me=this;      var obj=dom.getElementBySrc();   var formNode = dom.getParentForm(obj);   if (typeof(formNode)=='undefined' || !formNode || !formNode.nodeType){    formNode = document.forms[0];   }   var formData = ajax.buildFormData(formNode);   params+="&" + formData;obj=null;formNode=null;   ajax.ajaxPost(this,"getExpressionValue","",null,false,params,true,function(){me.execPageSwitch.apply(me,[this.ajaxDataset]);});   this.resumeRepeatTransfer();   expression=null;  } else {   this.execPageStep(this.currstep);  } },  backPageStep : function() {  if (!this.monitorFlowModify(true)) return;    var stepframe = nav.getFrame([this.currstep, parent]);  if (!this.trigerBindObject(this.currstep, "backbutton")) return;    this.removeErrorStep(this.currstep);    var sbtstepidx = this.fsbtsteps.length - 1;  this.fsbtsteps = this.fsbtsteps.slice(0, sbtstepidx).concat(this.fsbtsteps.slice(sbtstepidx + 1, this.fsbtsteps.length));    var pagetabs = dom.getElement("pagetabs");  var tabnodes = pagetabs.children;  var tabnode;  if (tabnodes.length > this.inittabcnt + 1) {   tabnode=tabnodes[tabnodes.length - this.appdtabidx - 2];   tabnode.children[0].children[0].className = "li active";   this.currstep = tabnode.id;  }  if (tabnodes.length > this.inittabcnt) {   tabnode = tabnodes[tabnodes.length - this.appdtabidx - 1];   tabnode.parentNode.removeChild(tabnode);  }tabnodes=null;    this.hasPrevPage = pagetabs.children.length > this.inittabcnt + 1;  this.hasNextPage = true;    this.switchPageStep(this.currstep, false, true);  this.displayStepButton();  pagetabs=null; },  execPageSwitch : function(ajaxDataset){  var switchValue = ajaxDataset.get(0, "SWITCH_VALUE");  if (switchValue == null || switchValue == "") switchValue = this.getStepAttribute(this.currstep, "default");  var nextstep = this.getCaseAttribute(this.currstep, switchValue, "nextstep");  var tagname = this.getStepAttribute(nextstep, "tagname");  if (tagname == "switch") {   this.currstep = nextstep;   this.nextPageStep();  } else {   this.execPageStep(nextstep);  }tagname=null;nextstep=null;switchValue=null;ajaxDataset=null; },  execPageStep : function(execstep) {  var sbtstepidx = this.fsbtsteps.length;  this.fsbtsteps[this.fsbtsteps.length] = execstep;    this.currstep = execstep;  var stepname = this.getStepAttribute(this.currstep, "name");  var stepdesc = this.getStepAttribute(this.currstep, "desc");  var nextstep = this.getStepAttribute(this.currstep, "nextstep");  var steppage = this.getStepAttribute(this.currstep, "page");  var steplistener = this.getStepAttribute(this.currstep, "listener");  var stepparams = this.getStepAttribute(this.currstep, "params", "");    var pagetabs = dom.getElement("pagetabs");  var tabnodes = pagetabs.children;  var tabnode;  if (tabnodes.length > this.inittabcnt){   tabnode=tabnodes[tabnodes.length - this.appdtabidx - 1];   tabnode.children[0].children[0].className = "li finish";  }tabnode=null;tabnodes=null;    var isreload = !this.isLoadedStep(stepname);  var pagetabcont = "<div><span id=\"" + (isreload ? "PAGEFLOW_LOADING" : "") + "\" class=\"" + (isreload ? "li loading" : "li active") + "\" title=\"" + stepdesc + "\" onclick=\"pageflow.switchPageStep('" + stepname + "', true, true);\"><span class=\"top\"></span><span class=\"text\">" + getPartStr(stepdesc, 20) + "</span><span class=\"bottom\"></span></span></div>";  var pagetab = document.createElement("LI");  pagetab.id = stepname;  pagetab.className = "on";  pagetab.innerHTML = pagetabcont;  pagetabs.insertBefore(pagetab, pagetabs.children[pagetabs.children.length - this.appdtabidx]);  pagetabcont=null;pagetab=null;    this.recodeFlowModify();  this.switchPageStep(stepname, false);  var beforeframe = nav.getFrame([this.beforestep, parent]);  if (isreload) {   if (beforeframe != null) {    var beforeform = this.getStepForm(beforeframe);    if (beforeform != null) {     var stepsbtarea = beforeframe.document.createElement("div");     stepsbtarea.id = "stepSubmitArea";     stepsbtarea.style.display = "none";     beforeform.appendChild(stepsbtarea);          var svcobj = beforeframe.document.getElementById("service");     var svcoldval = svcobj == null ? null : svcobj.value;     if (svcobj == null) {      svcobj = beforeframe.document.createElement("input");      svcobj.type = "hidden";      svcobj.id = "service";      svcobj.name = "service";      stepsbtarea.appendChild(svcobj);     }     svcobj.value = "page/" + steppage;          if(steplistener != null && steplistener != "") {      var lsnrobj = beforeframe.document.getElementById("listener");      var lsnroldval = lsnrobj == null ? null : lsnrobj.value;      if (lsnrobj == null) {       lsnrobj = beforeframe.document.createElement("input");       lsnrobj.type = "hidden";       lsnrobj.id = "listener";       lsnrobj.name = "listener";       stepsbtarea.appendChild(lsnrobj);      }      lsnrobj.value = steplistener;     }          if (stepparams != ""){      var paramary = stepparams.split(";");      var stepparam,paramid,paramval,paramobj;      for (var i=0; i<paramary.length; i++) {       stepparam = paramary[i];       paramid = stepparam.split(":")[0];       paramval = stepparam.split(":")[1];       paramobj = beforeframe.document.createElement("input");       paramobj.type = "hidden";       paramobj.id = paramid;       paramobj.name = paramid;       paramobj.value = paramval;       stepsbtarea.appendChild(paramobj);      }stepparam=null;paramid=null;paramval=null;paramobj=null;      paramary=null;     }          this.setTransferParam(beforeframe, stepsbtarea);          var backstep = null;     var tabnodes = dom.getElement("pagetabs").children;     if (tabnodes.length - this.appdtabidx > 3) {      var backnode = tabnodes[tabnodes.length - this.appdtabidx - 2];      backstep = backnode.id;      this.fillSubmitData(false, backstep);      backnode=null;     }     tabnodes=null;          beforeform.target = stepname;     beforeform.submit();          if (backstep != null) {      this.cleanupSubmitData(backstep);      backstep=null;     }          if (svcoldval != null) svcobj.value = svcoldval;     if (lsnroldval != null) lsnrobj.value = lsnroldval;     stepsbtarea.parentNode.removeChild(stepsbtarea);     svcobj=null;lsnrobj=null;lsnroldval=null;stepsbtarea=null;    }   } else {    if (stepparams != "") {     var paramstr = "",stepparam;     var paramary = stepparams.split(";");     for (var i=0; i<paramary.length; i++) {      stepparam = paramary[i];      paramstr += "&" + stepparam.split(":")[0] + "=" + stepparam.split(":")[1];     }paramary=null;stepparam=null;     stepparams = paramstr;    }    stepparams += this.getTransferUrl();    Wade.redirect.redirectTo(steppage, steplistener, stepparams, [stepname, parent]);   }      this.setLoadedStep(stepname, "true");  } else {   this.endFlowOverlay();  }  if (beforeframe != null) {   beforeframe.Wade.validate.setDisabledElements(beforeframe.Wade.validate.getDisabledElements(), true);   beforeframe=null;  }    this.hasPrevPage = pagetabs.children.length > this.inittabcnt + 1;  this.hasNextPage = nextstep != null && nextstep != "end";    this.displayStepButton();  stepname=null;stepdesc=null;nextstep=null;steppage=null;steplistener=null;stepparams=null;  pagetabs=null; },  switchPageStep : function(stepname, needmonitor, needrestore) {  if (needmonitor == true && !this.monitorFlowModify(true)) return;  var preActiveSpan = dom.getElement(this.selectedTabName);  if (preActiveSpan != null) {   preActiveSpan.id = null;   preActiveSpan.parentNode.className = null;  }preActiveSpan=null;  var activeSpan = dom.getElement(stepname).children[0];  activeSpan.id = this.selectedTabName;  activeSpan.parentNode.className = "on";  activeSpan=null;  this.displayStepFrame(stepname);  this.fsbtframe.Wade.dom.hidden(this.fsbtframe.document.getElementById("buttonarea"), !this.isEndActiveTab());    if (needrestore == true) {   var stepframe = nav.getFrame([stepname, parent]);   if (stepframe != null && stepframe.Wade != null) {    stepframe.Wade.page.endPageLoading();   }stepframe=null;  } },  fillSubmitData : function(isfinish, stepname) {  if (stepname == null) stepname = this.currstep;  var sbtframe = nav.getFrame([stepname, parent]);  var sbtform = this.getStepForm(sbtframe);  var div = sbtframe.document.createElement("DIV");  div.id = "pageFlowArea";  div.style.display = "none";  sbtform.appendChild(div);    if (isfinish == true) this.setTransferParam(sbtframe, div);    var sbtframeflds = new Array();  var elements = sbtform.elements;  for (var i=0; i<elements.length; i++) {   if (elements[i].name != null) {    sbtframeflds[elements[i].name] = sbtframe.name;   }  }elements=null;    var stepframe,stepform,names,namev,iptValue,ipt;  for (var i=0; i<this.fsbtsteps.length; i++) {   if (this.fsbtsteps[i] == stepname) {    if (isfinish) { continue; } else { break; }   }   stepframe = nav.getFrame([this.fsbtsteps[i], parent]);   stepform = this.getStepForm(stepframe);   if (stepform == null) continue;   elements = stepform.elements;names=[];   for (var j=0; j<elements.length; j++) {    if (elements[j].tagName == "INPUT" || elements[j].tagName == "SELECT" || elements[j].tagName == "TEXTAREA") {     if (elements[j].name == null) continue;     if (this.blackset[elements[j].name] != null) continue;     if (elements[j].tagName == "INPUT" && (elements[j].type.toUpperCase() == "BUTTON" || elements[j].type.toUpperCase() == "SUBMIT")) continue;     if (sbtframeflds[elements[j].name] != null && sbtframeflds[elements[j].name] != stepframe.name) continue;     namev=elements[j].name;iptValue=Wade.dom.getFormElementValue(elements[j].tagName.toLowerCase(),elements[j]);     if((elements[j].type.toUpperCase()=="CHECKBOX" || elements[j].type.toUpperCase()=="RADIO") && iptValue==null) continue;     ipt=System.DomHelper.insertFirst(div,{tag:"input",type:"hidden",name:namev});     if(ipt && ipt.nodeType)ipt.value=iptValue;               sbtframeflds[elements[j].name] = stepframe.name;     names.push(elements[j].name);    }   }  }stepframe=null;stepform=null;namev=null;iptValue=null;ipt=null;    var doc=sbtframe.document;  if(doc){   var formParams = doc.getElementById("_FormParams");   if (formParams == null) {    formParams = doc.createElement("INPUT");    formParams.setAttribute("id","_FormParams");    formParams.setAttribute("name","_FormParams");    formParams.setAttribute("type","hidden");    doc.forms[0].appendChild(formParams);   }   formParams.value+=names.join(",");   formParams=null;  }doc=null;names=null;  sbtframe=null;sbtform=null;div=null; },  cleanupSubmitData : function(stepname) {  if (stepname == null) stepname = this.currstep;  var sbtframe =nav.getFrame([stepname, parent]);  var pageflowarea = sbtframe.document.getElementById("pageFlowArea");  if (pageflowarea != null) pageflowarea.parentNode.removeChild(pageflowarea);  pageflowarea=null;sbtframe=null; },  trigerBindObject : function(stepname, bindname) {  var bindbtname = this.getStepAttribute(stepname, bindname);  if (bindbtname != null) {   return this.fireClickEvent(nav.getFrame([stepname, parent]), bindbtname);   }bindbtname=null;  return true; },  clickBindObject : function(stepname, bindname) {  var bindbtname = this.getStepAttribute(stepname, bindname);  if (bindbtname != null) {   var stepframe=nav.getFrame([stepname, parent]);   var bindbutton = stepframe.document.getElementById(bindbtname);   if (bindbutton != null) {    bindbutton.click();   }bindbutton=null;stepframe=null;  }bindbtname=null; },  trigerBindSubmit : function(stepname, bindname) {  var r=true,bindbtname = this.getStepAttribute(stepname, bindname);  if (bindbtname != null) {   var stepframe = nav.getFrame([stepname, parent]);   var bindbutton = stepframe.document.getElementById(bindbtname);   if (bindbutton != null) {    var stepform = this.getStepForm(stepframe);    var proxybtname = (bindbutton.id != null ? bindbutton.id : bindbutton.name) + "_proxy";    var proxybutton = stepframe.document.getElementById(proxybtname);    if (proxybutton == null) {     proxybutton = System.DomHelper.insertHtml("afterend", stepform, bindbutton.outerHTML);     proxybutton.id = proxybtname;     proxybutton.name = proxybtname;    }proxybutton=null;    r=this.fireClickEvent(stepframe, proxybtname);    stepform=null;proxybtname=null;   }   stepframe=null;bindbutton=null;  }  return r; },  clickBindSubmit : function(stepname, bindname) {  var bindbtname = this.getStepAttribute(stepname, bindname);  if (bindbtname != null) {   var stepframe=getFrame([stepname, parent]);   var bindbutton =stepframe.document.getElementById(bindbtname);   if (bindbutton != null) {    bindbutton.onclick = null;    bindbutton.click();   }bindbutton=null;stepframe=null;  }bindbtname=null; },  displayStepButton : function() {  this.fsbtframe.Wade.dom.hidden(this.fsbtframe.document.getElementById("buttonarea"), !this.isEndActiveTab());    var bback = this.fsbtframe.document.getElementById("bback");  var bnext = this.fsbtframe.document.getElementById("bnext");  var bfinish = this.fsbtframe.document.getElementById("bfinish");  var nexttab = dom.getElement("nexttab");  var overtab = dom.getElement("overtab");  bback.className = this.hasPrevPage ? "e_bLinkPre" : "e_bLinkPreDis";  dom.hidden(bnext, !this.hasNextPage);  dom.hidden(bfinish, this.hasNextPage);  dom.hidden(nexttab, !this.hasNextPage);  dom.hidden(overtab, this.hasNextPage);  bback =null;bnext =null;bfinish =null;nexttab =null;overtab =null; },  displayStepFrame : function(stepname) {  var flowbody = parent.document.getElementById("flowbody");  var stepfrm = parent.document.getElementById(stepname);  var stepfrmidx = parseInt(stepfrm.getAttribute("index"));  var fbdcols = flowbody.cols.replaceAll("\\*", "0");  fbdcols = fbdcols.substring(0, stepfrmidx * 2) + "*" + fbdcols.substring(stepfrmidx * 2 + 1);  flowbody.cols = fbdcols;  fbdcols=null;flowbody=null;stepfrm=null;stepfrmidx=null; },  verifyFlowAction : function() {  if (dom.getElement("PAGEFLOW_LOADING") != null) {   alert("页面未载入完成，您的操作不能继续。\n请等页面载入完成后再操作！");   return false;  }  return true; },  verifyStepPage : function(stepname) {  var stepframe =nav.getFrame([stepname, parent]);  if (stepframe != null && stepframe.document.getElementById("pagecontext") == null) {   alert("流程步骤[" + this.getStepAttribute(stepname, "desc") + "]已产生错误。\n导致接续步骤无法继续正确执行。\n请先处理完错误后再执行接续步骤！");   stepframe=null;   return false;  }stepframe=null;  return true; },  recodeFlowModify : function() {  if (this.monisteps[this.beforestep] == null) {   var beforeframe = nav.getFrame([this.beforestep, parent]);   var beforemonitor = this.getStepAttribute(this.beforestep, "monitor");   if (beforeframe != null && beforemonitor != null) {    var bfmonifieldnms = beforemonitor.split(",");    if((bfmonifieldnms=="ALL")){     bfmonifieldnms=[];     var els=System.query("input[name],select[name],textarea[name]",beforeframe.document.forms[0]);     if(els && els.length){      var elName;for(var i=0;i<els.length;i++){       elName=els[i].getAttribute("name");if(typeof(elName)=="string" && elName!="" && !bfmonifieldnms.contains(elName)){bfmonifieldnms.push(elName);}     }elName=null;}els=null;    }    var bfmonifieldval,monistep = new Array();    monistep["randomCode"] = beforeframe.Wade.context.getPageVisit().randomCode;    for(var i=0; i<bfmonifieldnms.length; i++) {     bfmonifieldval = this.getMonitorFieldValue(beforeframe, bfmonifieldnms[i]);     if (bfmonifieldval != null) {      monistep[bfmonifieldnms[i]] = bfmonifieldval;     }    }bfmonifieldval=null;    this.monisteps[this.beforestep] = monistep;    monistep=null;    bfmonifieldnms=[];bfmonifieldnms=null;   }beforemonitor=null;beforeframe=null;  } },  monitorFlowModify : function(needconfirm) {  var r=true,activetab =dom.getElement(this.selectedTabName);  if (activetab != null) {   var activestep = activetab.parentNode.id;   var monistep = this.monisteps[activestep];   if (monistep != null) {    var activeframe = Wade.nav.getFrame([activestep, parent]);    var nextbutton = this.getStepAttribute(activestep, "nextbutton");    if (nextbutton != null) {     if (!activeframe.Wade.validate.verifyAll(activeframe.Wade.dom.getElement(nextbutton))) return false;    }    var activemonitor = this.getStepAttribute(activestep, "monitor");    if (activeframe != null && activemonitor != null) {     var acmonifieldnms = activemonitor.split(",");     if(acmonifieldnms=="ALL"){      acmonifieldnms=[];      var els=System.query("input[name],select[name],textarea[name]",activeframe.document.forms[0]);      if(els && els.length){       var elName;for(var i=0;i<els.length;i++){        elName=els[i].getAttribute("name");if(typeof(elName)=="string" && elName!="" && !acmonifieldnms.contains(elName)){acmonifieldnms.push(elName);}      }elName=null;}els=[];els=null;     }     var acmonifieldval,acmonistepfldval,needcancel;     if (monistep["randomCode"] != activeframe.Wade.context.getPageVisit().randomCode) {      needcancel = needconfirm == false || (flow.needconfirm != null && flow.needconfirm == "false") || needconfirm == true && window.confirm("页面已经刷新。\n该步骤之后的所有已执行的接续步骤将全部撤销。\n确认撤销吗？");      if (needcancel) {       this.monisteps[activestep] = null;       this.cancelNextSteps(activestep);       if (needconfirm) r = false;      }     } else {      for (var i=0; i<acmonifieldnms.length; i++) {       if (this.moniblackset[acmonifieldnms[i]] != null) continue;       acmonifieldval = this.getMonitorFieldValue(activeframe, acmonifieldnms[i]);       acmonistepfldval = monistep[acmonifieldnms[i]];       if (acmonifieldval != null && acmonistepfldval != null) {        if(acmonifieldval != acmonistepfldval) {         var acmonifielddesc = activeframe.document.getElementById(acmonifieldnms[i]).getAttribute("desc");         if (acmonifielddesc == null || acmonifielddesc == "") acmonifielddesc = acmonifieldnms[i];         needcancel = needconfirm == false || (flow.needconfirm != null && flow.needconfirm == "false") || needconfirm == true && window.confirm("字段[" + acmonifielddesc + "]的值已改变。\n该步骤之后的所有已执行的接续步骤将全部撤销。\n确认撤销吗？");         if (!needcancel) break;         this.monisteps[activestep] = null;         this.cancelNextSteps(activestep);         if (needconfirm) { r=false;break;}        }       }      }     }acmonifieldnms=[];acmonifieldnms=null;    }activemonitor=null;        if (r == true) {     var syncmethod = this.getStepAttribute(activestep, "syncmethod");     if (activeframe != null && syncmethod != null) {      activeframe.eval("if(typeof(" + syncmethod +")=='function')" + syncmethod + "();");     }syncmethod=null;activeframe=null;    }   }activestep=null;  }activetab=null;  return r; },  getMonitorFieldValue : function(target, fieldname) {  var fields = target.document.getElementsByName(fieldname);  if (fields.length == 0){fields=null;return null;}  var fieldvalues = "",field,fieldvalue;  for (var i=0; i<fields.length; i++) {   field = fields[i];   fieldvalue = "";   if (field.tagName == "INPUT" && (field.type.toUpperCase() == "CHECKBOX" || field.type.toUpperCase() == "RADIO")) {    if (field.checked) {     fieldvalue = field.value;    }   }else{    fieldvalue = field.value;   }   if (fieldvalue != "") {    fieldvalues += (fieldvalues == "" ? "" : ",") + fieldvalue;   }  }fieldvalue=null;field=null;fields=null;  return fieldvalues; },  cancelNextSteps : function(stepname) {  var tabnode,tabnodes=dom.getElement("pagetabs").children;  for (var i=tabnodes.length - this.appdtabidx - 1; i>=1; i--) {   tabnode = tabnodes[i];   if (tabnode.id == stepname) {    tabnode.children[0].children[0].className = "li active";    break;   }   tabnode.parentNode.removeChild(tabnode);  }tabnode=null;tabnodes=null;    var reservedsteps = new Array();  tabnodes = dom.getElement("pagetabs").children;  for (var i=1; i<tabnodes.length - this.appdtabidx; i++) {   reservedsteps[tabnodes[i].id] = tabnodes[i].id;  }tabnodes=null;    var stepfrmname,stepframes = parent.document.getElementById("flowbody").children;  for (var i=0; i<stepframes.length; i++) {   stepfrmname = stepframes[i].name;   if (reservedsteps[stepfrmname] == null) {    this.setLoadedStep(stepfrmname, "false");    nav.getFrame([stepfrmname, parent]).location.href = "about:blank";   }  }stepfrmname=null;stepframes=null;reservedsteps=null;    this.resetPageFlow();  this.displayStepButton(); },  disabledRepeatTransfer : function(url) {  var transferNode,transferNodes = dom.getElement("transferArea").children;  for (var i=0; i<transferNodes.length; i++) {   transferNode = transferNodes[i];   if (transferNode.tagName == "INPUT") {    if (url.indexOf("&" + transferNode.name + "=") != -1) {     transferNode.disabled = true;    }   }  }transferNode=null;transferNodes=null; },  resumeRepeatTransfer : function() {  var transferNode,transferNodes = dom.getElement("transferArea").children;  for (var i=0; i<transferNodes.length; i++) {   transferNode = transferNodes[i];   if (transferNode.tagName == "INPUT") {    transferNode.disabled = false;   }  }transferNode=null;transferNodes=null; },  getTransferUrl : function() {  var transferUrl = "";  var transferNode,transferNodes = dom.getElement("transferArea").children;  for (var i=0; i<transferNodes.length; i++) {   transferNode = transferNodes[i];   if (transferNode.tagName == "INPUT") {    transferUrl += "&" + transferNode.name + "=" + transferNode.value;   }  }transferNode=null;transferNodes=null;  return transferUrl; },  setTransferParam : function(target, areaobj) {  var transferNode,transferNodes = dom.getElement("transferArea").children;  for (var i=0; i<transferNodes.length; i++) {   transferNode = transferNodes[i];   if (target.document.getElementsByName(transferNode.name).length == 0) {    System.DomHelper.insertHtml("beforeend", areaobj, transferNode.outerHTML);   }  }transferNode=null;transferNodes=null; },  beginFlowOverlay : function() {  if (this.fsbtframe != null && this.fsbtframe.Wade != null) {   nav.getFrame(["flowtab", parent]).Wade.page.beginPageOverlay();   this.fsbtframe.Wade.page.beginPageOverlay();  } else {   setTimeout("pageflow.beginFlowOverlay()", 20);  } },  endFlowOverlay : function() {  nav.getFrame(["flowtab", parent]).Wade.page.endPageOverlay();  nav.getFrame(["flowsubmit", parent]).Wade.page.endPageOverlay(); },  endFlowLoading : function() {  var pageload = dom.getElement("PAGEFLOW_LOADING");  if (pageload != null) {   var stepname = pageload.parentNode.parentNode.id;   var backbtname = this.getStepAttribute(stepname, "backbutton");   var nextbtname = this.getStepAttribute(stepname, "nextbutton");   if (backbtname != null) {    var backbtobj = nav.getFrame([stepname, parent]).document.getElementById(backbtname);    if (backbtobj != null) backbtobj.style.display = "none";backbtobj=null;   }   if (nextbtname != null) {    var nextbtobj = nav.getFrame([stepname, parent]).document.getElementById(nextbtname);    if (nextbtobj != null) nextbtobj.style.display = "none";nextbtobj=null;   }   pageload.id = null;   pageload.className = "li active";   this.endFlowOverlay();   stepname=null;backbtname=null;nextbtname=null;  }pageload=null; },  isEndActiveTab : function() {  var r=true,activetab = dom.getElement(this.selectedTabName);  if (activetab != null) {   var activestep = activetab.parentNode.id;   var tabnodes = dom.getElement("pagetabs").children;   if (tabnodes.length > this.inittabcnt + 1) {    r=(activestep == tabnodes[tabnodes.length - this.appdtabidx - 1].id);   }tabnodes=null;  }activetab=null;  return r; },  fireClickEvent : function(target, fieldname) {  var obj = target.document.getElementById(fieldname);  if (obj == null) return true;    if (System.UserAgent.ie) {   return obj.fireEvent("onclick");  } else if(System.UserAgent.gecko) {   var evt = target.document.createEvent("MouseEvent");      evt.initEvent("click", false, true);   return obj.dispatchEvent(evt);  } },  getStepForm : function(stepframe) {  if (stepframe == null || stepframe.document == null) return null;  if (stepframe.document.forms.length != 1) {   alert(stepname  + " form must unique!");   return null;  }  return stepframe.document.forms[0]; },  isLoadedStep : function(stepname) {  var stepfrmobj = parent.document.getElementById(stepname);  var r=stepfrmobj != null && stepfrmobj.getAttribute("loaded") == "true";  stepfrmobj=null;  return r; },  setLoadedStep : function(stepname, result) {  var stepfrmobj = parent.document.getElementById(stepname);  if (stepfrmobj != null) stepfrmobj.setAttribute("loaded", result);stepfrmobj=null; },  removeErrorStep : function(stepname) {  var stepframe = nav.getFrame([stepname, parent]);  if (stepframe.Wade != null && stepframe.Wade.excedesc != null) {   this.setLoadedStep(stepname, "false");   stepframe.location.href = "about:blank";  }stepframe=null; }};})();Wade.component.PageFlowControler=(function(){ var stepNum=50;   function getMarginLeft(el){     var ml=0;     if(el && el.nodeType){   var st=el.style;      ml=st.marginLeft;      if(typeof(ml)=="undefined" || ml==""){          ml=0;      }      var r=/(-)?(\d+)px/ig;      r=r.exec(ml);if(r!=null && r.length && r.length==3){   if("undefined"==typeof(r[1]))r[1]="";          ml=parseInt(r[1] + r[2]);      }       }     return ml;       }; return {  turnLeft:function(){   var tabBar=document.getElementById("pagetabs");      if(tabBar && tabBar.nodeType){       ml=getMarginLeft(tabBar);       if(ml<0)tabBar.style.marginLeft=parseInt(ml+stepNum) + "px";      }tabBar=null;   },  turnRight:function(){   var tabBar=document.getElementById("pagetabs");      if(tabBar && tabBar.nodeType){       ml=getMarginLeft(tabBar);       tabBar.style.marginLeft=parseInt(ml-stepNum) + "px";      }tabBar=null;   },  reset:function(){   var tabBar=document.getElementById("pagetabs");      if(tabBar && tabBar.nodeType)tabBar.style.marginLeft="0px";      tabBar=null;   }  };})();