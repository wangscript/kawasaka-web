(function(){if(typeof(window['System'])=='undefined'){ throw new Error('errot include "System.Event",need "System" basecode support!');};if(typeof(window['System'].DomHelper)=='undefined'){ throw new Error('errot include "System.Event",need "System.DomHelper" support!');};var isOpera = System.UserAgent.opera,    isSafari = System.UserAgent.safari,    isGecko = System.UserAgent.gecko,    isIE = System.UserAgent.ie,    isIE7=(System.UserAgent.ie==7),     isWebkit=System.UserAgent.webkit;       System.Event={};    System.Event.Observable = function(){ if(this.listeners){  this.on(this.listeners);  delete this.listeners;   }};System.Event.Observable.prototype = {    fireEvent : function(){  var ce = this.events[arguments[0].toLowerCase()];  if(typeof ce == "object"){   return ce.fire.apply(ce, Array.prototype.slice.call(arguments, 1));        }else{   return true;  }    }, filterOptRe : /^(?:scope|delay|buffer|single)$/,     addListener : function(eventName, fn, scope, o){  if(typeof eventName == "object"){   o = eventName;            for(var e in o){       if(this.filterOptRe.test(e)){     continue;               }     if(typeof o[e] == "function"){     this.addListener(e, o[e], o.scope,  o);    }else{           this.addListener(e, o[e].fn, o[e].scope, o[e]);    }   }        return;  }       o = (!o || typeof o == "boolean") ? {} : o;  eventName = eventName.toLowerCase();  var ce = this.events[eventName] || true;  if(typeof ce == "boolean"){   ce = new System.Event.EventEntity(this, eventName);   this.events[eventName] = ce;      }      ce.addListener(fn, scope, o); }, removeListener : function(eventName, fn, scope){  var ce = this.events[eventName.toLowerCase()];  if(typeof ce == "object"){   ce.removeListener(fn, scope);  } },   purgeListeners : function(){  for(var evt in this.events){   if(typeof this.events[evt] == "object"){    this.events[evt].clearListeners();   }        }    },    relayEvents : function(o, events){  var createHandler = function(ename){            return function(){    return this.fireEvent.apply(this, System.combine(ename, Array.prototype.slice.call(arguments, 0)));   };  };          for(var i = 0, len = events.length; i < len; i++){   var ename = events[i];   if(!this.events[ename]){ this.events[ename] = true; };   o.on(ename, createHandler(ename), this);  }    }, addEvents : function(o){  if(!this.events){            this.events = {};  }          System.applyIf(this.events, o); }, hasListener : function(eventName){       var e = this.events[eventName];       return typeof e == "object" && e.listeners.length > 0;  }};System.Event.Observable.prototype.on = System.Event.Observable.prototype.addListener;System.Event.Observable.prototype.un = System.Event.Observable.prototype.removeListener;System.Event.Observable.capture = function(o, fn, scope){ o.fireEvent = o.fireEvent.createInterceptor(fn, scope);};System.Event.Observable.releaseCapture = function(o){    o.fireEvent = System.Event.Observable.prototype.fireEvent;};System.Event.Subscriber = function(fn, obj, override) {    this.fn = fn;    this.obj = 'undefined'==typeof(obj) ? null : obj;    this.override = override;};System.Event.Subscriber.prototype={    getScope : function(defaultScope) {        if (this.override) {            if (this.override === true) {                return this.obj;            } else {                return this.override;            }        }        return defaultScope;    },    contains : function(fn, obj) {        if (obj) {            return (this.fn == fn && this.obj == obj);        } else {            return (this.fn == fn);        }    },    toString : function() {        return "Subscriber { obj: " + this.obj  +                ", override: " +  (this.override || "no") + " }";    }};System.Event.CustomEvent = function(type, oScope, silent, signature) {    this.type = type;    this.scope = oScope || window;    this.silent = silent;    this.signature = signature || System.Event.CustomEvent.LIST;    this.subscribers = [];    if (!this.silent){}    var onsubscribeType = "_SYSEOnSubscribe";    if (type !== onsubscribeType) {        this.subscribeEvent =                 new System.Event.CustomEvent(onsubscribeType, this, true);    }     this.lastError = null;};System.Event.CustomEvent.LIST = 0;System.Event.CustomEvent.FLAT = 1;System.apply(System.Event.CustomEvent.prototype,{    subscribe: function(fn, obj, override) {        if (!fn) {throw new Error("Invalid callback for subscriber to '" + this.type + "'");}        if (this.subscribeEvent) {            this.subscribeEvent.fire(fn, obj, override);        }        this.subscribers.push(new System.Event.Subscriber(fn, obj, override));    },    unsubscribe: function(fn, obj) {        if (!fn) {            return this.unsubscribeAll();        }        var found = false;        for (var i=0, len=this.subscribers.length; i<len; ++i) {            var s = this.subscribers[i];            if (s && s.contains(fn, obj)) {                this._delete(i);                found = true;            }        }        return found;    },    fire: function() {        var len=this.subscribers.length;        if (!len && this.silent) {            return true;        }        var args=[].slice.call(arguments, 0), ret=true, i, rebuild=false;        if (!this.silent) {        }                        var subs = this.subscribers.slice();        for (i=0; i<len; ++i) {            var s = subs[i];            if (!s) {                rebuild=true;            } else {                if (!this.silent) {                }                var scope = s.getScope(this.scope);                                if (this.signature == System.Event.CustomEvent.FLAT) {                    var param = null;                    if (args.length > 0) {                        param = args[0];                    }                    try {                        ret = s.fn.call(scope, param, s.obj);                    } catch(e) {                        this.lastError = e;                    }                } else {                    try {                        ret = s.fn.call(scope, this.type, args, s.obj);                    } catch(ex) {                        this.lastError = ex;                    }                }                if (false === ret) {                    if (!this.silent) {                    }                                        return false;                }            }        }                                                                                return true;    },    unsubscribeAll: function() {        for (var i=this.subscribers.length-1; i>-1; i--) {            this._delete(i);        }        this.subscribers=[];        return i;    },    _delete: function(index) {        var s = this.subscribers[index];        if (s) {            delete s.fn;            delete s.obj;        }                this.subscribers.splice(index, 1);    },    toString: function() {         return "CustomEvent: " + "'" + this.type  + "', " +              "scope: " + this.scope;    }});System.Event.Event = (function() {    var loadComplete =  false;    var listeners = [];    var unloadListeners = [];    var legacyEvents = [];    var legacyHandlers = [];    var retryCount = 0;    var onAvailStack = [];    var legacyMap = [];    var counter = 0;    var webkitKeymap = {        63232: 38,         63233: 40,         63234: 37,         63235: 39,         63276: 33,         63277: 34,         25: 9                             };    return {        POLL_RETRYS: 2000,        POLL_INTERVAL: 20,        EL: 0,        TYPE: 1,        FN: 2,        WFN: 3,        UNLOAD_OBJ: 3,        ADJ_SCOPE: 4,        OBJ: 5,        OVERRIDE: 6,        lastError: null,                _interval: null,         _dri: null,        DOMReady: false,        startInterval: function() {            if (!this._interval) {                var self = this;                var callback = function() { self._tryPreloadAttach(); };                this._interval = setInterval(callback, this.POLL_INTERVAL);            }        },        onAvailable: function(p_id, p_fn, p_obj, p_override, checkContent) {             var a = ('string'==typeof(p_id)) ? [p_id] : p_id;            for (var i=0; i<a.length; i=i+1) {                onAvailStack.push({id:         a[i],                                    fn:         p_fn,                                    obj:        p_obj,                                    override:   p_override,                                    checkReady: checkContent });            }            retryCount = this.POLL_RETRYS;            this.startInterval();        },        onContentReady: function(p_id, p_fn, p_obj, p_override) {            this.onAvailable(p_id, p_fn, p_obj, p_override, true);        },        onDOMReady: function(p_fn, p_obj, p_override) {            if (this.DOMReady) {                setTimeout(function() {                    var s = window;                    if (p_override) {                        if (p_override === true) {                            s = p_obj;                        } else {                            s = p_override;                        }                    }                    p_fn.call(s, "DOMReady", [], p_obj);                }, 0);            } else {                this.DOMReadyEvent.subscribe(p_fn, p_obj, p_override);            }        },        addListener: function(el, sType, fn, obj, override) {            if (!fn || !fn.call) {                return false;            }            if ( this._isValidCollection(el)) {                var ok = true;                for (var i=0,len=el.length; i<len; ++i) {                    ok = this.on(el[i],                                    sType,                                    fn,                                    obj,                                    override) && ok;                }                return ok;            } else if ('string'==typeof(el)) {                var oEl = this.getEl(el);                if (oEl) {                    el = oEl;                } else {                    this.onAvailable(el, function() {                       System.Event.Event.on(el, sType, fn, obj, override);                    });                    return true;                }            }                        if (!el) {                return false;            }            if ("unload" == sType && obj !== this) {                unloadListeners[unloadListeners.length] =                        [el, sType, fn, obj, override];                return true;            }            var scope = el;            if (override) {                if (override === true) {                    scope = obj;                } else {                    scope = override;                }            }            var wrappedFn = function(e) {                    return fn.call(scope, System.Event.Event.getEvent(e, el),                             obj);                };            var li = [el, sType, fn, wrappedFn, scope, obj, override];            var index = listeners.length;            listeners[index] = li;            if (this.useLegacyEvent(el, sType)) {                var legacyIndex = this.getLegacyIndex(el, sType);                if ( legacyIndex == -1 ||                             el != legacyEvents[legacyIndex][0] ) {                    legacyIndex = legacyEvents.length;                    legacyMap[el.id + sType] = legacyIndex;                    legacyEvents[legacyIndex] =                         [el, sType, el["on" + sType]];                    legacyHandlers[legacyIndex] = [];                    el["on" + sType] =                         function(e) {                            System.Event.Event.fireLegacyEvent(                                System.Event.Event.getEvent(e), legacyIndex);                        };                }                legacyHandlers[legacyIndex].push(li);            } else {                try {                    this._simpleAdd(el, sType, wrappedFn, false);                } catch(ex) {                    this.lastError = ex;                    this.removeListener(el, sType, fn);                    return false;                }            }            return true;                    },        fireLegacyEvent: function(e, legacyIndex) {            var ok=true, le, lh, li, scope, ret;                        lh = legacyHandlers[legacyIndex].slice();            for (var i=0, len=lh.length; i<len; ++i) {                            li = lh[i];                if ( li && li[this.WFN] ) {                    scope = li[this.ADJ_SCOPE];                    ret = li[this.WFN].call(scope, e);                    ok = (ok && ret);                }            }            le = legacyEvents[legacyIndex];            if (le && le[2]) {                le[2](e);            }                        return ok;        },        getLegacyIndex: function(el, sType) {            var key = this.generateId(el) + sType;            if (typeof legacyMap[key] == "undefined") {                 return -1;            } else {                return legacyMap[key];            }        },        useLegacyEvent: function(el, sType) {            if (this.webkit && ("click"==sType || "dblclick"==sType)) {                var v = parseInt(this.webkit, 10);                if (!isNaN(v) && v<418) {                    return true;                }            }            return false;        },                   removeListener: function(el, sType, fn) {            var i, len, li;            if (typeof el == "string") {                el = this.getEl(el);            } else if ( this._isValidCollection(el)) {                var ok = true;                for (i=el.length-1; i>-1; i--) {                    ok = ( this.removeListener(el[i], sType, fn) && ok );                }                return ok;            }            if (!fn || !fn.call) {                                return this.purgeElement(el, false, sType);            }            if ("unload" == sType) {                for (i=unloadListeners.length-1; i>-1; i--) {                    li = unloadListeners[i];                    if (li &&                         li[0] == el &&                         li[1] == sType &&                         li[2] == fn) {                            unloadListeners.splice(i, 1);                                                        return true;                    }                }                return false;            }            var cacheItem = null;            var index = arguments[3];            if ("undefined" === typeof index) {                index = this._getCacheIndex(el, sType, fn);            }            if (index >= 0) {                cacheItem = listeners[index];            }            if (!el || !cacheItem) {                return false;            }            if (this.useLegacyEvent(el, sType)) {                var legacyIndex = this.getLegacyIndex(el, sType);                var llist = legacyHandlers[legacyIndex];                if (llist) {                    for (i=0, len=llist.length; i<len; ++i) {                                            li = llist[i];                        if (li &&                             li[this.EL] == el &&                             li[this.TYPE] == sType &&                             li[this.FN] == fn) {                                llist.splice(i, 1);                                                                break;                        }                    }                }            } else {                try {                    this._simpleRemove(el, sType, cacheItem[this.WFN], false);                } catch(ex) {                    this.lastError = ex;                    return false;                }            }            delete listeners[index][this.WFN];            delete listeners[index][this.FN];            listeners.splice(index, 1);                        return true;        },        getTarget: function(ev, resolveTextNode) {            var t = ev.target || ev.srcElement;            return this.resolveTextNode(t);        },        resolveTextNode: function(n) {            try {                if (n && 3 == n.nodeType) {                    return n.parentNode;                }            } catch(e) { }            return n;        },        getPageX: function(ev) {            var x = ev.pageX;            if (!x && 0 !== x) {                x = ev.clientX || 0;                if ( this.isIE ) {                    x += this._getScrollLeft();                }            }            return x;        },        getPageY: function(ev) {            var y = ev.pageY;            if (!y && 0 !== y) {                y = ev.clientY || 0;                if ( this.isIE ) {                    y += this._getScrollTop();                }            }            return y;        },        getXY: function(ev) {            return [this.getPageX(ev), this.getPageY(ev)];        },        getRelatedTarget: function(ev) {            var t = ev.relatedTarget;            if (!t) {                if (ev.type == "mouseout") {                    t = ev.toElement;                } else if (ev.type == "mouseover") {                    t = ev.fromElement;                }            }            return this.resolveTextNode(t);        },        getTime: function(ev) {            if (!ev.time) {                var t = new Date().getTime();                try {                    ev.time = t;                } catch(ex) {                     this.lastError = ex;                    return t;                }            }            return ev.time;        },        stopEvent: function(ev) {            this.stopPropagation(ev);            this.preventDefault(ev);        },        stopPropagation: function(ev) {            if (ev.stopPropagation) {                ev.stopPropagation();            } else {                ev.cancelBubble = true;            }        },        preventDefault: function(ev) {            if (ev.preventDefault) {                ev.preventDefault();            } else {                ev.returnValue = false;            }        },                 getEvent: function(e, boundEl) {            var ev = e || window.event;            if (!ev) {                var c = this.getEvent.caller;                while (c) {                    ev = c.arguments[0];                    if (ev && Event == ev.constructor) {                        break;                    }                    c = c.caller;                }            }            return ev;        },        getCharCode: function(ev) {            var code = ev.keyCode || ev.charCode || 0;                        if (isWebkit && (code in webkitKeymap)) {                code = webkitKeymap[code];            }            return code;        },        _getCacheIndex: function(el, sType, fn) {            for (var i=0, l=listeners.length; i<l; i=i+1) {                var li = listeners[i];                if ( li                 &&                      li[this.FN] == fn  &&                      li[this.EL] == el  &&                      li[this.TYPE] == sType ) {                    return i;                }            }            return -1;        },        generateId: function(el) {            var id = el.id;            if (!id) {                id = "sysevtautoid-" + counter;                ++counter;                el.id = id;            }            return id;        },        _isValidCollection: function(o) {            try {                return ( o                     &&                          typeof o !== "string" &&                          o.length              &&                          !o.tagName            &&                          !o.alert              &&                          typeof o[0] !== "undefined" );            } catch(ex) {                return false;            }        },        elCache: {},        getEl: function(id) {            return (typeof id === "string") ? document.getElementById(id) : id;        },        clearCache: function() { },        DOMReadyEvent: new System.Event.CustomEvent("DOMReady", this),        _load: function(e) {            if (!loadComplete) {                loadComplete = true;                var EU = System.Event.Event;                EU._ready();                EU._tryPreloadAttach();            }        },        _ready: function(e) {            var EU = System.Event.Event;            if (!EU.DOMReady) {                EU.DOMReady=true;                                EU.DOMReadyEvent.fire();                                EU._simpleRemove(document, "DOMContentLoaded", EU._ready);            }        },        _tryPreloadAttach: function() {            if (onAvailStack.length === 0) {                retryCount = 0;                clearInterval(this._interval);                this._interval = null;                return;            }            if (this.locked) {                return;            }            if (this.isIE) {                if (!this.DOMReady) {                    this.startInterval();                    return;                }            }            this.locked = true;                        var tryAgain = !loadComplete;            if (!tryAgain) {                tryAgain = (retryCount > 0 && onAvailStack.length > 0);            }                        var notAvail = [];            var executeItem = function (el, item) {                var scope = el;                if (item.override) {                    if (item.override === true) {                        scope = item.obj;                    } else {                        scope = item.override;                    }                }                item.fn.call(scope, item.obj);            };            var i, len, item, el, ready=[];                        for (i=0, len=onAvailStack.length; i<len; i=i+1) {                item = onAvailStack[i];                if (item) {                    el = this.getEl(item.id);                    if (el) {                        if (item.checkReady) {                            if (loadComplete || el.nextSibling || !tryAgain) {                                ready.push(item);                                onAvailStack[i] = null;                            }                        } else {                            executeItem(el, item);                            onAvailStack[i] = null;                        }                    } else {                        notAvail.push(item);                    }                }            }                                    for (i=0, len=ready.length; i<len; i=i+1) {                item = ready[i];                executeItem(this.getEl(item.id), item);            }            retryCount--;            if (tryAgain) {                for (i=onAvailStack.length-1; i>-1; i--) {                    item = onAvailStack[i];                    if (!item || !item.id) {                        onAvailStack.splice(i, 1);                    }                }                this.startInterval();            } else {                clearInterval(this._interval);                this._interval = null;            }            this.locked = false;        },        purgeElement: function(el, recurse, sType) {            var oEl = 'string'==typeof(el) ? this.getEl(el) : el;            var elListeners = this.getListeners(oEl, sType), i, len;            if (elListeners) {                for (i=elListeners.length-1; i>-1; i--) {                    var l = elListeners[i];                    this.removeListener(oEl, l.type, l.fn);                }            }            if (recurse && oEl && oEl.childNodes) {                for (i=0,len=oEl.childNodes.length; i<len ; ++i) {                    this.purgeElement(oEl.childNodes[i], recurse, sType);                }            }        },                  getListeners: function(el, sType) {            var results=[], searchLists;            if (!sType) {                searchLists = [listeners, unloadListeners];            } else if (sType === "unload") {                searchLists = [unloadListeners];            } else {                searchLists = [listeners];            }            var oEl = ('string'==typeof(el)) ? this.getEl(el) : el;            for (var j=0;j<searchLists.length; j=j+1) {                var searchList = searchLists[j];                if (searchList) {                    for (var i=0,len=searchList.length; i<len ; ++i) {                        var l = searchList[i];                        if ( l  && l[this.EL] === oEl &&                                 (!sType || sType === l[this.TYPE]) ) {                            results.push({                                type:   l[this.TYPE],                                fn:     l[this.FN],                                obj:    l[this.OBJ],                                adjust: l[this.OVERRIDE],                                scope:  l[this.ADJ_SCOPE],                                index:  i                            });                        }                    }                }            }            return (results.length) ? results : null;        },        _unload: function(e) {            var EU = System.Event.Event, i, j, l, len, index,                     ul = unloadListeners.slice();                        for (i=0,len=unloadListeners.length; i<len; ++i) {                l = ul[i];                if (l) {                    var scope = window;                    if (l[EU.ADJ_SCOPE]) {                        if (l[EU.ADJ_SCOPE] === true) {                            scope = l[EU.UNLOAD_OBJ];                        } else {                            scope = l[EU.ADJ_SCOPE];                        }                    }                    l[EU.FN].call(scope, EU.getEvent(e, l[EU.EL]), l[EU.UNLOAD_OBJ] );                    ul[i] = null;                    l=null;                    scope=null;                }            }            unloadListeners = null;            if (listeners) {                for (j=listeners.length-1; j>-1; j--) {                    l = listeners[j];                    if (l) {                        EU.removeListener(l[EU.EL], l[EU.TYPE], l[EU.FN], j);                    }                 }                l=null;            }            legacyEvents = null;            EU._simpleRemove(window, "unload", EU._unload);        },        _getScrollLeft: function() {            return this._getScroll()[1];        },        _getScrollTop: function() {            return this._getScroll()[0];        },        _getScroll: function() {            var dd = document.documentElement, db = document.body;            if (dd && (dd.scrollTop || dd.scrollLeft)) {                return [dd.scrollTop, dd.scrollLeft];            } else if (db) {                return [db.scrollTop, db.scrollLeft];            } else {                return [0, 0];            }        },            regCE: function() {                    },        _simpleAdd: function () {            if (window.addEventListener) {                return function(el, sType, fn, capture) {                    el.addEventListener(sType, fn, (capture));                };            } else if (window.attachEvent) {                return function(el, sType, fn, capture) {                    el.attachEvent("on" + sType, fn);                };            } else {                return function(){};            }        }(),        _simpleRemove: function() {            if (window.removeEventListener) {                return function (el, sType, fn, capture) {                    el.removeEventListener(sType, fn, (capture));                };            } else if (window.detachEvent) {                return function (el, sType, fn) {                    el.detachEvent("on" + sType, fn);                };            } else {                return function(){};            }        }()    };})();        System.Event.Event.on = System.Event.Event.addListener;if (isIE) {    System.Event.Event.onDOMReady(            System.Event.Event._tryPreloadAttach,            System.Event.Event, true);        var n = document.createElement('p');      System.Event.Event._dri = setInterval(function() {        try {                        n.doScroll('left');            clearInterval(System.Event.Event._dri);            System.Event.Event._dri = null;            System.Event.Event._ready();            n = null;        } catch (ex) {         }    }, System.Event.Event.POLL_INTERVAL); } else if ( isWebkit && isWebkit < 525) {    System.Event.Event._dri = setInterval(function() {        var rs=document.readyState;        if ("loaded" == rs || "complete" == rs) {            clearInterval(System.Event.Event._dri);            System.Event.Event._dri = null;            System.Event.Event._ready();        }    }, System.Event.Event.POLL_INTERVAL); } else {    System.Event.Event._simpleAdd(document, "DOMContentLoaded", System.Event.Event._ready);}System.Event.Event._simpleAdd(window, "load", System.Event.Event._load);System.Event.Event._simpleAdd(window, "unload", System.Event.Event._unload);System.Event.Event._tryPreloadAttach();               System.Event.EventProvider = function() { };System.Event.EventProvider.prototype={    __sys_events: null,    __sys_subscribers: null,    subscribe: function(p_type, p_fn, p_obj, p_override) {        this.__sys_events = this.__sys_events || {};        var ce = this.__sys_events[p_type];        if (ce) {            ce.subscribe(p_fn, p_obj, p_override);        } else {            this.__sys_subscribers = this.__sys_subscribers || {};            var subs = this.__sys_subscribers;            if (!subs[p_type]) {                subs[p_type] = [];            }            subs[p_type].push(                { fn: p_fn, obj: p_obj, override: p_override } );        }    },    unsubscribe: function(p_type, p_fn, p_obj) {        this.__sys_events = this.__sys_events || {};        var evts = this.__sys_events;        if (p_type) {            var ce = evts[p_type];            if (ce) {                return ce.unsubscribe(p_fn, p_obj);            }        } else {            var ret = true;            for (var i in evts) {                if (System.hasOwnProperty(evts, i)) {                    ret = ret && evts[i].unsubscribe(p_fn, p_obj);                }            }            return ret;        }        return false;    },    unsubscribeAll: function(p_type) {        return this.unsubscribe(p_type);    },    createEvent: function(p_type, p_config) {        this.__sys_events = this.__sys_events || {};        var opts = p_config || {};        var events = this.__sys_events;        if (events[p_type]) {        } else {            var scope  = opts.scope  || this;            var silent = (opts.silent);            var ce = new System.Event.CustomEvent(p_type, scope, silent,                    System.Event.CustomEvent.FLAT);            events[p_type] = ce;            if (opts.onSubscribeCallback) {                ce.subscribeEvent.subscribe(opts.onSubscribeCallback);            }            this.__sys_subscribers = this.__sys_subscribers || {};            var qs = this.__sys_subscribers[p_type];            if (qs) {                for (var i=0; i<qs.length; ++i) {                    ce.subscribe(qs[i].fn, qs[i].obj, qs[i].override);                }            }        }        return events[p_type];    },    fireEvent: function(p_type, arg1, arg2, etc) {        this.__sys_events = this.__sys_events || {};        var ce = this.__sys_events[p_type];        if (!ce) {            return null;        }        var args = [];        for (var i=1; i<arguments.length; ++i) {            args.push(arguments[i]);        }        return ce.fire.apply(ce, args);    },    hasEvent: function(type) {        if (this.__sys_events) {            if (this.__sys_events[type]) {                return true;            }        }        return false;    }};System.Event.KeyListener = function(attachTo, keyData, handler, event) {    if (!attachTo) {    } else if (!keyData) {    } else if (!handler) {    }         if (!event) {        event = System.Event.KeyListener.KEYDOWN;    }        var keyEvent = new System.Event.CustomEvent("keyPressed");    this.enabledEvent = new System.Event.CustomEvent("enabled");    this.disabledEvent = new System.Event.CustomEvent("disabled");    if (typeof attachTo == 'string') {        attachTo = document.getElementById(attachTo);    }    if (typeof handler == 'function') {        keyEvent.subscribe(handler);    } else {        keyEvent.subscribe(handler.fn, handler.scope, handler.correctScope);    }    function handleKeyPress(e, obj) {        if (! keyData.shift) {              keyData.shift = false;         }        if (! keyData.alt) {                keyData.alt = false;        }        if (! keyData.ctrl) {            keyData.ctrl = false;        }                if (e.shiftKey == keyData.shift &&             e.altKey   == keyData.alt &&            e.ctrlKey  == keyData.ctrl) {                         var dataItem;            if (keyData.keys instanceof Array) {                for (var i=0;i<keyData.keys.length;i++) {                    dataItem = keyData.keys[i];                    if (dataItem == e.charCode ) {                        keyEvent.fire(e.charCode, e);                        break;                    } else if (dataItem == e.keyCode) {                        keyEvent.fire(e.keyCode, e);                        break;                    }                }            } else {                dataItem = keyData.keys;                if (dataItem == e.charCode ) {                    keyEvent.fire(e.charCode, e);                } else if (dataItem == e.keyCode) {                    keyEvent.fire(e.keyCode, e);                }            }        }    }    this.enable = function() {        if (! this.enabled) {            System.Event.Event.addListener(attachTo, event, handleKeyPress);            this.enabledEvent.fire(keyData);        }        this.enabled = true;    };    this.disable = function() {        if (this.enabled) {            System.Event.Event.removeListener(attachTo, event, handleKeyPress);            this.disabledEvent.fire(keyData);        }        this.enabled = false;    };    this.toString = function() {        return "KeyListener [" + keyData.keys + "] " + attachTo.tagName +                 (attachTo.id ? "[" + attachTo.id + "]" : "");    };};System.Event.KeyListener.KEYDOWN = "keydown";System.Event.KeyListener.KEYUP = "keyup";System.Event.KeyListener.KEY = {    ALT          : 18,    BACK_SPACE   : 8,    CAPS_LOCK    : 20,    CONTROL      : 17,    DELETE       : 46,    DOWN         : 40,    END          : 35,    ENTER        : 13,    ESCAPE       : 27,    HOME         : 36,    LEFT         : 37,    META         : 224,    NUM_LOCK     : 144,    PAGE_DOWN    : 34,    PAGE_UP      : 33,     PAUSE        : 19,    PRINTSCREEN  : 44,    RIGHT        : 39,    SCROLL_LOCK  : 145,    SHIFT        : 16,    SPACE        : 32,    TAB          : 9,    UP           : 38,    F5    : 116 };     System.EventHandler={    getPageX:function(e){        return System.Event.Event.getPageX(e.browserEvent||e);    },    getPageY:function(e){        return System.Event.Event.getPageY(e.browserEvent||e);    },    getXY:function(e){        return System.Event.Event.getXY(e.browserEvent||e);    },    getTarget:function(e){        return System.Event.Event.getTarget(e.browserEvent||e);    },    getRelatedTarget:function(e){        return System.Event.Event.getRelatedTarget(e.browserEvent||e);    },    on:function(el, sType, fn, obj, override){        System.Event.Event.on(el, sType, fn, obj, override);    },    un:function(el, sType, fn){        System.Event.Event.removeListener(el, sType, fn);    },    purgeElement:function(el){        System.Event.Event.purgeElement(el);    },    preventDefault:function(e){     System.Event.Event.preventDefault(e.browserEvent||e);    },    stopPropagation:function(e){        System.Event.Event.stopPropagation(e.browserEvent||e);    },    stopEvent:function(e){        System.Event.Event.stopEvent(e.browserEvent||e);    },    onAvailable:function(p_id, p_fn, p_obj, p_override){        return System.Event.Event.onAvailable(p_id, p_fn, p_obj, p_override, false);    }};System.Event.EventObject = (function(){        var E = System.EventHandler;       var safariKeys = {        63234 : 37,         63235 : 39,         63232 : 38,         63233 : 40,         63276 : 33,         63277 : 34,         63272 : 46,         63273 : 36,         63275 : 35      };        var btnMap = isIE ? {1:0,4:1,2:2} :                (isSafari ? {1:0,2:1,3:2} : {0:0,1:1,2:2});    System.Event.EventObjectImpl = function(e){        if(e){            this.setEvent(e.browserEvent || e);        }    };    System.Event.EventObjectImpl.prototype = {                browserEvent : null,                button : -1,          shiftKey : false,           ctrlKey : false,         altKey : false,               BACKSPACE : 8,           TAB : 9,              RETURN : 13,          ENTER : 13,           SHIFT : 16,             CONTROL : 17,            ESC : 27,           SPACE : 32,              PAGEUP : 33,            PAGEDOWN : 34,            END : 35,             HOME : 36,           LEFT : 37,            UP : 38,            RIGHT : 39,             DOWN : 40,          DELETE : 46,            F5 : 116,             setEvent : function(e){            if(e == this || (e && e.browserEvent)){                 return e;            }            this.browserEvent = e;            if(e){                                this.button = e.button ? btnMap[e.button] : (e.which ? e.which-1 : -1);                this.shiftKey = e.shiftKey;                                this.ctrlKey = e.ctrlKey || e.metaKey;                this.altKey = e.altKey;                                this.keyCode = e.keyCode;                this.charCode = e.charCode;                                this.target = E.getTarget(e);                                this.xy = E.getXY(e);            }else{                this.button = -1;                this.shiftKey = false;                this.ctrlKey = false;                this.altKey = false;                this.keyCode = 0;                this.charCode =0;                this.target = null;                this.xy = [0, 0];            }            return this;        },                stopEvent : function(){            if(this.browserEvent){                if(this.browserEvent.type == 'mousedown'){                    System.EventManager.stoppedMouseDownEvent.fire(this);                }                E.stopEvent(this.browserEvent);            }        },                preventDefault : function(){            if(this.browserEvent){                E.preventDefault(this.browserEvent);            }        },                isNavKeyPress : function(){            var k = this.keyCode;            k = isSafari ? (safariKeys[k] || k) : k;            return (k >= 33 && k <= 40) || k == this.RETURN || k == this.TAB || k == this.ESC;        },        isSpecialKey : function(){            var k = this.keyCode;            return k == 9 || k == 13  || k == 40 || k == 27 ||            (k == 16) || (k == 17) ||            (k >= 18 && k <= 20) ||            (k >= 33 && k <= 35) ||            (k >= 36 && k <= 39) ||            (k >= 44 && k <= 45);        },                stopPropagation : function(){            if(this.browserEvent){                if(this.browserEvent.type == 'mousedown'){                    System.EventManager.stoppedMouseDownEvent.fire(this);                }                E.stopPropagation(this.browserEvent);            }        },                getCharCode : function(){            return this.charCode || this.keyCode;        },             getKey : function(){            var k = this.keyCode || this.charCode;            return isSafari ? (safariKeys[k] || k) : k;        },               getPageX : function(){            return this.xy[0];        },            getPageY : function(){            return this.xy[1];        },              getTime : function(){            if(this.browserEvent){                return E.getTime(this.browserEvent);            }            return null;        },            getXY : function(){            return this.xy;        },             getTarget : function(selector, maxDepth, returnEl){            return selector ? System.DomHelper.findParent(this.target,selector, maxDepth, returnEl) : this.target;        },           getRelatedTarget : function(){            if(this.browserEvent){                return E.getRelatedTarget(this.browserEvent);            }            return null;        },           getWheelDelta : function(){            var e = this.browserEvent;            var delta = 0;            if(e.wheelDelta){                 delta = e.wheelDelta/120;                                if(window.opera) delta = -delta;            }else if(e.detail){                 delta = -e.detail/3;            }            return delta;        },             hasModifier : function(){            return ((this.ctrlKey || this.altKey) || this.shiftKey) ? true : false;        },              within : function(el, related){            var t = this[related ? "getRelatedTarget" : "getTarget"]();            return t && System.fly(el).contains(t);        },        getPoint : function(){            return new System.DomHelper.Point(this.xy[0], this.xy[1]);        }    };    return new System.Event.EventObjectImpl();    })();System.Event.EventEntity = function(obj, name){        this.name = name;        this.obj = obj;        this.listeners = [];};System.Event.EventEntity.prototype ={    addListener : function(fn, scope, options){        var o = options || {};        scope = scope || this.obj;        if(!this.isListening(fn, scope)){            var l = {fn: fn, scope: scope, options: o};            var h = fn;            if(o.delay){                h = createDelayed(h, o, scope);            }            if(o.single){                h = createSingle(h, this, fn, scope);            }            if(o.buffer){                h = createBuffered(h, o, scope);            }            l.fireFn = h;            if(!this.firing){                 this.listeners.push(l);            }else{                this.listeners = this.listeners.slice(0);                this.listeners.push(l);            }        }    },    findListener : function(fn, scope){        scope = scope || this.obj;        var ls = this.listeners;        for(var i = 0, len = ls.length; i < len; i++){            var l = ls[i];            if(l.fn == fn && l.scope == scope){                return i;            }        }        return -1;    },    isListening : function(fn, scope){        return this.findListener(fn, scope) != -1;    },    removeListener : function(fn, scope){        var index;        if((index = this.findListener(fn, scope)) != -1){            if(!this.firing){                this.listeners.splice(index, 1);            }else{                this.listeners = this.listeners.slice(0);                this.listeners.splice(index, 1);            }            return true;        }        return false;    },    clearListeners : function(){        this.listeners = [];    },    fire : function(){        var ls = this.listeners, scope, len = ls.length;        if(len > 0){            this.firing = true;            var args = Array.prototype.slice.call(arguments, 0);            for(var i = 0; i < len; i++){                var l = ls[i];                if(l.fireFn.apply(l.scope, arguments) === false){                    this.firing = false;                    return false;                }            }            this.firing = false;        }        return true;    }};System.EventManager = (function(){    var docReadyEvent, docReadyProcId, docReadyState = false;    var resizeEvent, resizeTask, textEvent, textSize;    var E = System.EventHandler;    var D=System.DomHelper;          var fireDocReady = function(){        if(!docReadyState){            docReadyState = true;            System.isReady = true;            if(docReadyProcId){                clearInterval(docReadyProcId);            }            if( isGecko|| isOpera) {                document.removeEventListener("DOMContentLoaded", fireDocReady, false);            }            if(docReadyEvent){                docReadyEvent.fire();                docReadyEvent.clearListeners();            }        }    };        var initDocReady = function(){        docReadyEvent = new System.Event.EventEntity();          if( isGecko|| isOpera) {            document.addEventListener("DOMContentLoaded", fireDocReady, false);        }else if( isIE){                        document.write("<s"+'cript id="ie-deferred-loader" defer="defer" src="/'+'/:"></s'+"cript>");            var defer = document.getElementById("ie-deferred-loader");            defer.onreadystatechange = function(){                if(this.readyState == "complete"){                    fireDocReady();                    defer.onreadystatechange = null;                    defer.parentNode.removeChild(defer);                }            };        }else if( isSafari){             docReadyProcId = setInterval(function(){                var rs = document.readyState;                if(rs == "complete") {                    fireDocReady();                      }            }, 10);        }                E.on(window, "load", fireDocReady);    };    var createBuffered = function(h, o){        var task = new System.globalUtil.DelayedTask(h);        return function(e){                        e = new System.Event.EventObjectImpl(e);            task.delay(o.buffer, h, null, [e]);        };    };    var createSingle = function(h, el, ename, fn){        return function(e){            System.EventManager.removeListener(el, ename, fn);            h(e);        };    };    var createDelayed = function(h, o){        return function(e){                        e = new System.Event.EventObjectImpl(e);            setTimeout(function(){                h(e);            }, o.delay || 10);        };    };    var listen = function(element, ename, opt, fn, scope){        var o = (!opt || typeof opt == "boolean") ? {} : opt;        fn = fn || o.fn; scope = scope || o.scope;        var el = System.DomHelper.getDom(element);        if(!el){            throw "Error listening for \"" + ename + '\". Element "' + element + '" doesn\'t exist.';        }        var h = function(e){            e = System.Event.EventObject.setEvent(e);            var t;            if(o.delegate){                t = e.getTarget(o.delegate, el);                if(!t){                    return;                }            }else{                t = e.target;            }            if(o.stopEvent === true){                e.stopEvent();            }            if(o.preventDefault === true){               e.preventDefault();            }            if(o.stopPropagation === true){                e.stopPropagation();            }            if(o.normalized === false){                e = e.browserEvent;            }            fn.call(scope || el, e, t, o);        };        if(o.delay){            h = createDelayed(h, o);        }        if(o.single){            h = createSingle(h, el, ename, fn);        }        if(o.buffer){            h = createBuffered(h, o);        }        fn._handlers = fn._handlers || [];        fn._handlers.push([System.DomHelper.id(el), ename, h]);        E.on(el, ename, h);        if(ename == "mousewheel" && el.addEventListener){             el.addEventListener("DOMMouseScroll", h, false);            E.on(window, 'unload', function(){                el.removeEventListener("DOMMouseScroll", h, false);            });        }        if(ename == "mousedown" && el == document){            System.EventManager.stoppedMouseDownEvent.addListener(h);        }        return h;    };    var stopListening = function(el, ename, fn){        var id = System.DomHelper.id(el), hds, hd = fn;        if(typeof(fn)!='undefined') hds=fn._handlers;        if(hds){            for(var i = 0, len = hds.length; i < len; i++){                var h = hds[i];                if(h[0] == id && h[1] == ename){                    hd = h[2];                    hds.splice(i, 1);                    break;                }            }        }        E.un(el, ename, hd);        el = System.DomHelper.getDom(el);        if(ename == "mousewheel" && el.addEventListener){            el.removeEventListener("DOMMouseScroll", hd, false);        }        if(ename == "mousedown" && el == document){             System.EventManager.stoppedMouseDownEvent.removeListener(hd);        }    };    var propRe = /^(?:scope|delay|buffer|single|stopEvent|preventDefault|stopPropagation|normalized)$/;    var pub = {           wrap : function(fn, scope, override){            return function(e){                System.Event.EventObject.setEvent(e);                fn.call(override ? scope || window : window, System.Event.EventObject, scope);            };        },        addListener : function(element, eventName, fn, scope, options){            if(typeof eventName == "object"){                var o = eventName;                for(var e in o){                    if(propRe.test(e)){                        continue;                    }                    if(typeof o[e] == "function"){                                                listen(element, e, o, o[e], o.scope);                    }else{                                                listen(element, e, o[e]);                    }                }                return;            }            return listen(element, eventName, options, fn, scope);        },                        removeListener : function(element, eventName, fn){            return stopListening(element, eventName, fn);        },                        onDocumentReady : function(fn, scope, options){            if(docReadyState){                 fn.call(scope || window, scope);                return;            }            if(!docReadyEvent){                initDocReady();            }            docReadyEvent.addListener(fn, scope, options);        },                        onWindowResize : function(fn, scope, options){            if(!resizeEvent){                resizeEvent = new System.Event.EventEntity();                resizeTask = new System.DelayedTask(function(){                    resizeEvent.fire(D.getViewWidth(), D.getViewHeight());                });                E.on(window, "resize", function(){                    if( isIE){                        resizeTask.delay(50);                    }else{                        resizeEvent.fire(D.getViewWidth(), D.getViewHeight());                    }                });            }            resizeEvent.addListener(fn, scope, options);        },                onTextResize : function(fn, scope, options){            if(!textEvent){                textEvent = new System.Event.EventEntity();                var textEl = new System.Element(document.createElement('div'));                textEl.dom.className = 'x-text-resize';                textEl.dom.innerHTML = 'X';                textEl.appendTo(document.body);                textSize = textEl.dom.offsetHeight;                setInterval(function(){                    if(textEl.dom.offsetHeight != textSize){                        textEvent.fire(textSize, textSize = textEl.dom.offsetHeight);                    }                }, this.textResizeInterval);            }            textEvent.addListener(fn, scope, options);        },                removeResizeListener : function(fn, scope){            if(resizeEvent){                resizeEvent.removeListener(fn, scope);            }        },                fireResize : function(){            if(resizeEvent){                resizeEvent.fire(D.getViewWidth(), D.getViewHeight());            }           },                ieDeferSrc : false,        textResizeInterval : 50    };        pub.on = pub.addListener;    pub.un = pub.removeListener;    pub.stoppedMouseDownEvent = new System.Event.EventEntity();    return pub;})();System.onReady = System.EventManager.onDocumentReady;})();