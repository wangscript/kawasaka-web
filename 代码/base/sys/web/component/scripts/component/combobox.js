(function(){var dh=System.DomHelper;var dq=System.DomHelper.DomQuery;if(typeof(Wade.component.ComboBoxHelper)=="undefined"){ Wade.component.ComboBoxHelper=(function(){  return {   addEvent:function(el, evname, func) {    System.EventManager.on(el,evname,func);   },   removeEvent:function(el, evname, func) {    System.EventManager.un(el,evname,func);   },   getAbsolutePos:function(el) {    var SL = 0, ST = 0;    var is_div = /^div$/i.test(el.tagName);    if (is_div && el.scrollLeft)     SL = el.scrollLeft;    if (is_div && el.scrollTop)     ST = el.scrollTop;    var r = { x: el.offsetLeft - SL, y: el.offsetTop - ST };    if (el.offsetParent) {     var tmp = this.getAbsolutePos(el.offsetParent);     r.x += tmp.x;     r.y += tmp.y;    }    return r;   },   getClientPos:function(el) {    var pos = ComboBox.getAbsolutePos(el);    var a = document.body;    if (a.scrollLeft) pos.x -= a.scrollLeft;    if (a.scrollTop) pos.y -= a.scrollTop;    return pos;   },   getHandler:function() {    var params = new Array();    for (var i = 0; i < arguments.length; i++) {     params[i] = arguments[i];    }    var obj = params.shift();    var func = params.shift();        return function() {     if (func && typeof func == "function") {      func.apply(obj, params);     }     if (func && typeof func == "string") {      var handler = function() {        try {         eval(func);        } catch(ex) {       }      };      handler.apply(obj, params);     }    }   },   setClass:function(el, className) {    el.className = className;   },   getFieldsetAncesterCount:function(el) {    if (!el || !el.parentNode) return 0;    var count = 0;    if (el.parentNode.nodeName.toLowerCase() == "fieldset") {     count = 1;    }    return count + this.getFieldsetAncesterCount(el.parentNode);   }    }; })(); }if(typeof(Wade.component.ComboBoxEvent)=="undefined"){ Wade.component.ComboBoxEvent=(function(){  return {   checkComboBox:function(e) {    var comboBox = window._currentComboBox;    if (!comboBox) return;    var el = e.target;    for (; el != null && el != comboBox.boxHead && el != comboBox.boxBody; el = el.parentNode);    if (el == null) {comboBox.dropHide();}   }  };  })();  }if(typeof(Wade.component.ComboBoxManager)=="undefined"){ Wade.component.ComboBoxManager=(function(){  var cbs=new System.MixedCollection();  return {   addComboBox:function(combobox){    cbs.add(combobox.name,combobox);   },   destroy:function(){    cbs.each(function(combobox){     combobox.destroy();    });    cbs.clear();    delete cbs;    cbs=null;   }    }; })();}if(typeof(Wade.component.ComboBox)=="undefined"){var cdh=Wade.component.ComboBoxHelper;var cev=Wade.component.ComboBoxEvent; Wade.component.ComboBox = function(name,dw,dh) { var boxName = name + "_Box"; this.name = name; this.element = document.getElementById(name); this.element.combobox = this; this.element.selectedIndex = 0; this.box=document.getElementById(boxName);  this.boxBody = document.getElementById(boxName + "_Body"); this.boxBody.style.display="none"; this.boxIframe= document.getElementById(boxName + "_Iframe"); this.boxBodyTable=document.getElementById(boxName + "_Body_Table");  this.valueField = this.element.getAttribute("_valueField"); this.textField = this.element.getAttribute("_textField"); if (this.element.getAttribute("filterFields")) {  this.filterFields = this.element.getAttribute("filterFields").split(",");  for (var i = 0; i < this.filterFields.length; i++) {   this.filterFields[i] = this.filterFields[i].split(":");  } } this.filter = !this.element.getAttribute("filter"); this.dropUp=this.element.getAttribute("dropup"); this.boxText = document.getElementById(boxName + "_Text"); this.boxText.readOnly = !this.filter; this.boxText.setAttribute("title","\u56DE\u8F66\u8FDB\u884C\u5339\u914D"); this.boxTextValue=this.boxText.value; this.boxArrow = document.getElementById(boxName + "_Arrow"); this.setValueFn=this.element.getAttribute("onSetValue"); this.disabled = null; this.hidden = null; this.isDropShow = false; this.activeIndex = null; this.background = null; this.options = null; this.selectedIndex = null; this.selectedOption = null; this.dropWidth=/\d+/.test(dw)?dw:null; this.dropHeight=/\d+/.test(dh)?dh:null;  this.setup();  Wade.component.ComboBoxManager.addComboBox(this);}; Wade.component.ComboBox.prototype=(function(){ return {  dropDown:function(){   if (this.isDropShow) {    this.dropHide();   } else {    this.dropShow();   }      },  dropShow:function() {       if (!this.isDropShow && !this.element.disabled && !this.box.disabled) {    this.dropFadeIn();    this.isDropShow = true;   }      },  dropHide:function() {   if (this.isDropShow) {    this.dropFadeOut();    this.isDropShow = false;   }  },  rePosition:function(){   var fBox=System.fly(this.box),fTable=System.fly(this.boxBodyTable);   var isUp=false,isLeft=false;      var wrapper=dq.select("#" + dh.id(this.boxBody) + " div[class=wrapper]");   if(wrapper && wrapper.length){    wrapper=wrapper[0];wrapper.style.height=null;   }      var scrollWidth=0;   var option=dq.select("#" + dh.id(this.boxBody) + " div[class^=option]");    if(option && option.length){    option=option[0];option.className="option";option.style.width=null;    scrollWidth=option.scrollWidth;   }      var vh=dh.getViewHeight(),vw=dh.getViewWidth();      var hh=fTable.getHeight();if(this.dropHeight)hh=this.dropHeight;   var ww=fBox.getWidth();if(this.dropWidth)ww=this.dropWidth;      var bTop=fBox.getTop(),bLeft=fBox.getX(),bWidth=fBox.getWidth(),bHeight=fBox.getHeight();   if((bTop*2-bHeight)>vh){isUp=true;}   if((bLeft*2+bWidth)>vw){isLeft=true};      if(typeof(this.dropUp)=="string" && this.dropUp=="true"){isUp=true;}   if(isUp || isLeft){    option.className="option option" + (isLeft?"Right":"Left") + (isUp?"Up":"");   }     if(isUp){    if(hh>(bTop-10)){hh=bTop-30;}else if(!this.dropHeight){hh+=18;}   }else{    if(hh>(vh-bTop-bHeight-10)){     if(hh<150){hh+=18;}else if(hh>150){hh=150;}    }else if(!this.dropHeight){hh+=18;}   }   if(isLeft){    if(ww>((bLeft+bWidth)-10)){ww=(bLeft+bWidth)-10;}   }else{    if(ww>(vw-bLeft-10)){ww=vw-bLeft-10;}   }    if(ww<scrollWidth)ww=scrollWidth;   if(hh && /\d+/.test(hh) && hh>0)wrapper.style.height=hh+ "px";     if(ww && /\d+/.test(ww) && ww>0)option.style.width=ww+"px";      wrapper=null;option=null;   fBox=null;fTable=null;     },  dropFadeIn:function() {   if (this.boxBody.style.display=="none"){                    this.boxBody.style.display="block";    this.rePosition();    window._currentComboBox = this;    if(!this.selectOpted && typeof(this.boxText.select)!="undefined"){     this.boxText.select();     }    cdh.removeEvent(document, "mousedown", cev.checkComboBox);    cdh.removeEvent(document, "keydown", cev.checkComboBox);    cdh.addEvent(document, "mousedown", cev.checkComboBox);    cdh.addEvent(document, "keydown", cev.checkComboBox);   }  },  dropFadeOut:function() {   if(this.boxBody.style.display!="none") {    this.boxBody.style.display="none";        cdh.removeEvent(document, "mousedown", cev.checkComboBox);    cdh.removeEvent(document, "keydown", cev.checkComboBox);    window._currentComboBox = null;   }  },  disable:function(boo) {   boo = boo || boo == null;   if (boo == this.disabled) return;   var headClickHandler = cdh.getHandler(this, this.dropDown);   if (boo) {    this.dropHide();    cdh.addEvent(this.box,"click", headClickHandler);   } else {    cdh.removeEvent(this.box,"click", headClickHandler);    cdh.addEvent(this.box,"click", headClickHandler);   }   this.boxText.disabled = boo;   this.disabled = boo;   if (this.element.disabled != boo) {    this.element.disabled = boo;   }  },   hide:function(boo) {   boo = boo || boo == null;   if (boo == this.hidden) return;   if (boo) {    this.dropHide();    this.box.style.display="none";   } else {    this.box.style.display="";   }   this.hidden = boo;   if (this.element.hidden != boo) {    this.element.hidden = boo;   }  },  setup:function() {   this.disable(!!this.element.disabled);   this.hide(!!this.element.hidden);   var self = this;   var element = this.element;         function itemClickHandler(item) {    var box = item.combobox;    if (item.itemIndex != box.selectedIndex) {     selectOption.apply(box.element, [item.itemIndex]);     var changeEvent = box.element.getAttribute("onchange");     if (changeEvent) {      var func = cdh.getHandler(box.element, changeEvent);      func();     }    }    box.dropHide();   }         function itemMouseOverHandler(item) {    if (self.activeIndex && self.activeIndex < self.options.length) {     cdh.setClass(self.options[self.activeIndex], "");    }    self.activeIndex = item.itemIndex;    cdh.setClass(item, "odd");   }         function itemMouseOutHandler(item) {    self.activeIndex = null;    cdh.setClass(item, "");   }      var tHead = self.boxBodyTable.tHead;   if (tHead) {    var ths = dq.select("#" + dh.id(tHead) + " th");    for (var i = 0; i < ths.length; i++) {     cdh.addEvent(ths[i], "click", cdh.getHandler());    }   }       var props = ["options", "selectedIndex", "selectedOption"];   var vals = [new Array(), 0, { value: "", text: "", itemIndex: 0 }];   for (var n = 0; n < props.length; n++) {    self[props[n]] = vals[n];    element[props[n]] = vals[n];   }   element.options[0] = element.selectedOption;         var tBody=self.boxBodyTable.tBodies[0];   if(tBody){    var trs=dq.select("#" + dh.id(tBody) + " tr");    if (trs && trs.length > 0) {     for (var i = 0; i < trs.length; i++) {            var tr = trs[i];      tr.value=tr.getAttribute("value");      tr.text=tr.getAttribute("text");      var idx = element.options.length;      element.options[idx] = tr;      tr.combobox = self;      tr.itemIndex = idx;      tr.selectedIndex=-1;      if (tr.value == element.value) {       element.value=tr.value;       element.text = self.boxText.value = tr.text;       element.selectedOption = self.selectedOption = tr;       element.selectedIndex = self.selectedIndex = idx;      }            var itemMouseOver = cdh.getHandler(null, itemMouseOverHandler, tr);      var itemMouseOut = cdh.getHandler(null, itemMouseOutHandler, tr);      var itemClick = cdh.getHandler(null, itemClickHandler, tr);      cdh.addEvent(tr, "mouseover", itemMouseOver);      cdh.addEvent(tr, "mouseout", itemMouseOut);      cdh.addEvent(tr, "click", itemClick);     }    }   }            var isFilter = !!(self.filter && self.filterFields && self.filterFields.length > 0 && self.options.length > 1);    filter.mutex = false;   filter.waitTh = null;   filter.time = null;   function filter() {    if (!isFilter){     return;    }    if (filter.mutex){     if (filter.waitTh) {      window.clearTimeout(filter.waitTh);     }     filter.time = (new Date()).getTime();     filter.waitTh = window.setTimeout(function() { (arguments.callee)(); }, 100);     return;    }    filter.mutex = true;    if(filter.waitTh && filter.time && ((new Date()).getTime() - filter.time) >= 100) {     window.clearTimeout(filter.waitTh);     filter.waitTh = null;     filter.time = null;    }        var opts = new Array();    for (var i = 1; i < self.options.length; i++) {     opts[opts.length] = self.options[i];    }    var keyWords = self.boxText.value;    if (!keyWords) {     filter.mutex = false;     return;    }    keyWords = keyWords.toUpperCase();        match.fieldIdx;    function match(x) {     var ret = { index: -1, length: 0 };     var o = x.cells[match.fieldIdx];     var text = o.innerText;     if (text) {      tmp = (new String(text)).toUpperCase();      var pp = tmp.indexOf(keyWords);      if (pp != -1) {       o.innerHTML = text.substring(0, pp)        + "<span style='background-color:#7FFF00; color:#FF0000'>" + text.substring(pp, pp+keyWords.length) + "</span>"        + text.substring(pp + keyWords.length);       o.setAttribute('hit','true');       } else{       o.innerHTML =text;       o.setAttribute('hit','false');      }o.setAttribute('title',text);      ret.index = pp;      ret.length = text.length;     }     return ret;    }                for (var i = self.filterFields.length; i > 0;) {     if (filter.waitTh) {      filter.mutex = false;      return;     }     var field = self.filterFields[--i];     match.fieldIdx = eval(field[1]);       var tmpOpts = new Array();     for (var j = opts.length; j > 0;) {      var ret = match(opts[--j]);      if (ret.index != -1) {       var k = 0;       for (; k < tmpOpts.length; k++) {        var o = tmpOpts[k];        if(o[1].index > ret.index || (o[1].index == ret.index && o[1].length >= ret.length)) {         break;        }       }       tmpOpts.splice(k, 0, [opts.splice(j, 1)[0], ret]);      }     }     for (var j = tmpOpts.length; j > 0;) {      opts.unshift(tmpOpts[--j][0]);     }              }                        opts.unshift(self.options[0]);             if(System.UserAgent.ie){              var trs=tBody.rows;              for (var i = 0; i < trs.length; i++) {      var r = opts[i + 1];      r.itemIndex = i + 1;      trs[i].swapNode(r);     }             }else{     tBody.innerHTML="";     for(var i=1;i<opts.length;i++){      opts[i].itemIndex=i;      tBody.appendChild(opts[i]);     }             }    self.element.options = self.options = opts;    filter.mutex = false;   }      function textPropertyChange() {    var evt = window.event;    if (evt.propertyName == "value") {     if (!self.isDropShow) {      self.dropShow();     }     filter();     selectOption.apply(self.element, [0]);    }   }   cdh.addEvent(self.boxText, "click", cdh.getHandler(null, textPropertyChange));            var enterAct= element.getAttribute("enterAction");   function textKeyHandler() {    var evt = window.event;    keyCode=evt.keyCode;    if (keyCode == 27) {              self.dropHide();             }else {     if(keyCode >= 48 && keyCode <= 90 || keyCode==32 ||         keyCode == 8 || keyCode == 46 || keyCode == 13) {       if(keyCode!=13 && self.selectedIndex>0){self.element.clearValue(true);}      if(keyCode==13){                Wade.event.stopEvent(evt);return false;      }         if(self.boxText.value.trim()!=""){        self.selectOpted=true;        if(!self.isDropShow){        self.dropShow();       }              Wade.event.stopEvent(evt);       filter();              }else{self.element.clearValue(true);}      }else if(keyCode == 38 || keyCode == 40){             }             }   }   cdh.addEvent(self.boxText, "keyup", cdh.getHandler(null, textKeyHandler));         function textBlurHandler(){    var v = self.boxText.value;    var opts = self.options;    if(isFilter && v && opts.length > 1 && self.selectedIndex == 0 && v != self.boxTextValue) {     v = v.toUpperCase();     var vv = opts[1].getAttribute("text").toUpperCase();     if (v == vv) {      selectOption.apply(self.element, [1]);     }else if (vv.indexOf(v) == 0) {      window.setTimeout(function() { selectOption.apply(element, [1]); }, 300);     }else {      window.setTimeout(function() {self.boxText.value = self.boxTextValue; }, 300);     }    }    if (self.isDropShow) {     window.setTimeout(function() { if (self.boxBody.mousedown) { self.boxBody.mousedown = null; return; } self.dropHide(); }, 100);    }   }   cdh.addEvent(self.boxText, "blur", cdh.getHandler(null, textBlurHandler));   cdh.addEvent(self.boxBody, "mousedown", function(){self.boxBody.mousedown = true; });      function textKeyEnterHandler(){    var evt = window.event;    keyCode=evt.keyCode;    if(keyCode==13){     if(self.boxText.value!=self.options[1].text){      selectOption.apply(self.element, [1]);     }     if(typeof(enterAct)=="string" && enterAct!=""){      try{(function(el){eval(enterAct)}).apply(window,[element])}catch(ex){}     }else{textBlurHandler();}     Wade.event.stopEvent(evt);     return false;    }   }   cdh.addEvent(self.boxText, "keypress", cdh.getHandler(null, textKeyEnterHandler));                  function selectOption(i) {    if (i >= 0 && i < this.options.length && i != this.combobox.selectedIndex) {      this.value = this.options[i].value;     this.text = this.options[i].text;     this.combobox.selectOpted=true;     this.combobox.element.value=this.value;      this.combobox.boxText.value=this.text;          this.selectedOption = this.combobox.selectedOption = this.options[i];     this.selectedIndex = this.combobox.selectedIndex = i;     filter();     if (this.selectedIndex > 1) {      for(var j = 0; j < this.options.length; j++) {       if(this.selectedOption == this.options[j]) {        this.selectedIndex = this.combobox.selectedIndex = this.combobox.activeIndex = j;        break;       }      }     }     if(typeof(this.combobox.setValueFn)=="string" && this.combobox.setValueFn!=""){      var str=this.combobox.setValueFn;      try{(function(){eval(str);}).apply(this.combobox.element || window ,[]);}catch(e){}     }    }   }      function setValue(val){    for (var i = 0; i < this.options.length; i++) {     if (this.options[i].value == val) {      this.selectOption(i);      return;     }    }    this.selectOption(0);   }      function clearValue(holdBoxText){    this.combobox.selectedIndex=0;    this.value="";this.text="";    this.combobox.element.text="";    if(!holdBoxText){     this.combobox.boxText.value =this.combobox.boxTextValue;    }    var tds=dq.select("td[hit=true]",tBody);    var title=null;    if(tds && tds.length){     for(var i=0;i<tds.length;i++){      title=tds[i].getAttribute("title");      if(typeof(title)=="string" && title!="")tds[i].innerText=title;      title=null;     }    }tds=null;   }      element.selectOption = function(i) { var ff = cdh.getHandler(element, selectOption, i); ff(); };   element.setValue = function(val) { var ff = cdh.getHandler(element, setValue, val); ff(); };   var disable = this.disable,hide = this.hide;   element.disable = function(boo) { var ff = cdh.getHandler(self, disable, boo); ff(); };   element.enable = function() { element.disable(false); };   element.hide = function(boo) { var ff = cdh.getHandler(self, hide, boo); ff(); };   element.show = function() { element.hide(false); };   element.clearValue=function(hodeBoxText){var ff = cdh.getHandler(element, clearValue,hodeBoxText); ff();}  },  destroy:function(){   this.valueField = null;   this.textField = null;   this.filterFields=null;   this.filter = null;   this.dropUp=null;   this.boxTextValue=null;   this.setValueFn=null;   this.disable=null;   this.hide =null;   for(var i=0;i<this.options.length;i++){    System.EventHandler.purgeElement(this.options[i]);    System.DomHelper.remove(this.options[i]);   }   this.options=[];   this.options=null;      System.EventHandler.purgeElement(this.boxArrow);   System.DomHelper.remove(this.boxArrow);   System.EventHandler.purgeElement(this.boxText);   System.DomHelper.remove(this.boxText);   System.EventHandler.purgeElement(this.boxBodyTable);   System.DomHelper.remove(this.boxBodyTable);   System.DomHelper.remove(this.boxIframe);   System.EventHandler.purgeElement(this.boxBody);   System.DomHelper.remove(this.boxBody);   System.EventHandler.purgeElement(this.box);   System.DomHelper.remove(this.box);      this.element.selectOption = null;   this.element.setValue = null;   this.element.disable = null;   this.element.enable = null;   this.element.hide = null;   this.element.show = null;   this.element.clearValue = null;   System.EventHandler.purgeElement(this.element);   System.DomHelper.remove(this.element);  } }; })();}})();