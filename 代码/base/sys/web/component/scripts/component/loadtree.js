(function(){if(typeof(Wade.component.loadTree)=='undefined'){ Wade.component.loadTree=(function(){ var util=Wade.util; var dom=Wade.dom; var evt=Wade.event; var context=Wade.context; var ajax=Wade.ajax;  function findParent(el, maxDepth){         var p = el, b = document.body, depth = 0,stopEl;    maxDepth = maxDepth || 50;         if(typeof maxDepth != "number"){             stopEl = document.getElementById(maxDepth);             maxDepth = 10;         }         while(p && p.nodeType == 1 && depth < maxDepth && p != b && p != stopEl){             if(depth==(maxDepth-1)){                return p;             }             depth=depth+1;             p = p.parentNode;         }         return null; }; return {  treeRootTrigger:function(action, group, parent_id, isreload) {   var treeDiv = System.get("treeDiv" + group + "_" + parent_id);   var treeSpan = System.get("treeSpan" + group + "_" + parent_id);   var treeA = System.get("treeA" + group + "_" + parent_id);      treeDiv.enableDisplayMode('');      if (action == "0") {    treeDiv.setVisible(false);    if (treeA != null) {     treeA.dom.className = "fold";    }    if (treeSpan != null) {     treeSpan.update("<span class=\"fold\" onclick=\"Wade.component.loadTree.treeRootTrigger('1', '" + group + "', '" + parent_id + "')\"></span>");    }   } else if (action == "1") {    treeDiv.setVisible(true);    if (treeA != null) {     treeA.dom.className = "unfold";    }    if (treeSpan != null) {     treeSpan.update("<span class=\"unfold\" onclick=\"Wade.component.loadTree.treeRootTrigger('0', '" + group + "', '" + parent_id + "');\"></span>");    }    if (isreload != null && isreload) {     var treeArea = System.get("LoadTreeArea");     if(treeArea){      var n=treeArea.child('*:first-child');      if (n != null) {       treeDiv.update("");       treeDiv.appendChild(n);      }treeArea=null;     }    }       }   treeDiv=null;treeLi=null;treeImg=null;  },  treeNodeTrigger:function(action, group, parent_id, isreload) {   var treeDiv = System.get("treeDiv" + group + "_" + parent_id);   var treeLi = System.get("treeLi" + group + "_" + parent_id);   var treeImg = System.get("treeImg" + group + "_" + parent_id);      treeDiv.enableDisplayMode('');      if (action == "0") {    treeDiv.setVisible(false);    if (treeLi != null) {     treeLi.dom.className = "fold";    }    if (treeImg != null) {     treeImg.update("<span class=\"ifFold\" onclick=\"Wade.component.loadTree.treeNodeTrigger('1', '" + group + "', '" + parent_id + "')\"></span>");    }   } else if (action == "1") {    treeDiv.setVisible(true);    if (treeLi != null) {     treeLi.dom.className = "unfold";    }    if (treeImg != null) {     treeImg.update("<span class=\"ifFold\" onclick=\"Wade.component.loadTree.treeNodeTrigger('0', '" + group + "', '" + parent_id + "');\"></span>");    }    if (isreload != null && isreload) {     var treeArea = System.get("LoadTreeArea");     if(treeArea){      var n=treeArea.child('*:first-child');      if (n != null) {       treeDiv.update("");       treeDiv.appendChild(n);      }     }treeArea=null;    }   }   treeDiv=null;treeLi=null;treeImg=null;  },  treeTextTrigger:function() {   var selname = "SELECTED_LOADTREE_TEXT";    var selelement = dom.getElement(selname);   if (selelement) {    selelement.id = null;    selelement.className = "text";   }   var srcelement = dom.getElementBySrc();   var txtelement = srcelement.parentNode;   if(txtelement){    txtelement.id = selname;    txtelement.className = "text focus";   }  },  treeRootCheckboxTrigger:function(chkobj) {   if(!chkobj || !chkobj.nodeType) return;   var root = findParent(chkobj,5);   if(root && root.nodeType){    var rootchilds=root.children;    var bodyobj = rootchilds[rootchilds.length - 2];    var ulchilds = bodyobj.children;    for (var i=0; i<ulchilds.length; i++) {     var lichilds = ulchilds[i].children;     for (var j=0; j<lichilds.length; j++) {      var chknodeobj = lichilds[j].children[1].children[0].children[0];      chknodeobj.checked = chkobj.checked;      treeNodeCheckboxTrigger(chknodeobj);     }    }   }  },  treeNodeCheckboxTrigger:function(chkobj) {   if(!chkobj || !chkobj.nodeType) return;   var root=findParent(chkobj,4);      if(root && root.nodeType){    var divchilds=root.children[4].children;    if (divchilds.length > 0) {     var childs = divchilds[0].children;     for (var i=0; i<childs.length; i++) {      var chknode = childs[i].children[1].children[0].children[0];      chknode.checked = chkobj.checked;      Wade.component.loadTree.treeNodeCheckboxTrigger(chknode);     }    }   }  },  treeNodeRefresh:function(tree_id, tree_group) {   var nodeid = "treeRefresh" + (tree_group == null ? "default" : tree_group) + "_" + tree_id;   evt.fireMouseEvent(nodeid,'click');  },  treeExpandAction:function(obj, nodeType) {      var transfer = obj.getAttribute("transfer");   var beforeAction = obj.getAttribute("beforeAction");   var afterAction = obj.getAttribute("afterAction");   var treeId = obj.getAttribute("treeId");   var treeGroup = obj.getAttribute("treeGroup");   var action = obj.getAttribute("action");   var listener = obj.getAttribute("listener");      if (beforeAction != null && beforeAction != "") {    if (eval(beforeAction) == false) return false;   }      var params = "&action=" + action + "&group=" + treeGroup + "&parent_id=" + treeId;   if (transfer != null && transfer != "") {    params += transfer;   }      var transflds = dom.getChildsByRecursion("transferArea", "INPUT", "type", "hidden");   var postobj = new Object();   for (var i=0; i<transflds.length; i++) {    if (params.indexOf("&" + transflds[i].name + "=") == -1) {     postobj[transflds[i].name] = transflds[i].value;    }   }   var postbody = ajax.buildPostData(postobj);      ajax.ajaxPost(self, listener, params, "LoadTreePart", null, postbody, true, function() { Wade.component.loadTree.treeExpandAfterAction(nodeType, action, treeGroup, treeId, afterAction) });      return true;  },  treeExpandAfterAction:function(nodeType, action, treeGroup, treeId, afterAction) {   if (nodeType == "root") {    this.treeRootTrigger(action, treeGroup, treeId, true);   } else if (nodeType == "node") {    this.treeNodeTrigger(action, treeGroup, treeId, true);   }   if (afterAction != null && afterAction != "") {    eval(afterAction);   }  } };})();Wade.pub(Wade.component.loadTree);}})();