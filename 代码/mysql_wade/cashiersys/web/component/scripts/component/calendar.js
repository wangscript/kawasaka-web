(function(){var dh=System.DomHelper;if(typeof(Wade.component.CalendarHelper)=='undefined'){   Wade.component.CalendarHelper=(function(){  return {   _DN:["\u661F\u671F\u65E5",     "\u661F\u671F\u4E00",     "\u661F\u671F\u4E8C",     "\u661F\u671F\u4E09",     "\u661F\u671F\u56DB",     "\u661F\u671F\u4E94",     "\u661F\u671F\u516D",     "\u661F\u671F\u65E5"],        _SDN:["\u65E5",     "\u4E00",     "\u4E8C",     "\u4E09",     "\u56DB",     "\u4E94",     "\u516D",     "\u65E5"],         _FD:0,      _MN:["\u4E00\u6708",     "\u4E8C\u6708",     "\u4E09\u6708",     "\u56DB\u6708",     "\u4E94\u6708",     "\u516D\u6708",     "\u4E03\u6708",     "\u516B\u6708",     "\u4E5D\u6708",     "\u5341\u6708",     "\u5341\u4E00\u6708",     "\u5341\u4E8C\u6708"],      _SMN:["\u4E00\u6708",     "\u4E8C\u6708",     "\u4E09\u6708",     "\u56DB\u6708",     "\u4E94\u6708",     "\u516D\u6708",     "\u4E03\u6708",     "\u516B\u6708",     "\u4E5D\u6708",     "\u5341\u6708",     "\u5341\u4E00\u6708",     "\u5341\u4E8C\u6708"],      _TT:{    INFO:"\u5E2E\u52A9",    ABOUT:"DHTML Date/Time Selector\n" +      "\n\n" +      "\u9009\u62E9\u65E5\u671F\u003A\n" +      "- \u70B9\u51FB \xab, \xbb \u6309\u94AE\u9009\u62E9\u5E74\u4EFD\n" +      "- \u70B9\u51FB " + String.fromCharCode(0x2039) + ", " + String.fromCharCode(0x203a) + " \u6309\u94AE\u9009\u62E9\u6708\u4EFD\n" +      "- \u957F\u6309\u4EE5\u4E0A\u6309\u94AE\u53EF\u4ECE\u83DC\u5355\u4E2D\u5FEB\u901F\u9009\u62E9\u5E74\u4EFD\u6216\u6708\u4EFD",    ABOUT_TIME:"\n\n" +      "\u9009\u62E9\u65F6\u95F4\u003A\n" +      "- \u70B9\u51FB\u5C0F\u65F6\u6216\u5206\u949F\u53EF\u4F7F\u6539\u6570\u503C\u52A0\u4E00\n" +      "- \u6309\u4F4F\u0053\u0068\u0069\u0066\u0074\u952E\u70B9\u51FB\u5C0F\u65F6\u6216\u5206\u949F\u53EF\u4F7F\u6539\u6570\u503C\u51CF\u4E00\n" +      "- \u70B9\u51FB\u62D6\u52A8\u9F20\u6807\u53EF\u8FDB\u884C\u5FEB\u901F\u9009\u62E9",    PREV_YEAR:"\u4E0A\u4E00\u5E74\u0020\u0028\u6309\u4F4F\u51FA\u83DC\u5355\u0029",    PREV_MONTH:"\u4E0A\u4E00\u6708\u0020\u0028\u6309\u4F4F\u51FA\u83DC\u5355\u0029",    GO_TODAY:"\u8F6C\u5230\u4ECA\u65E5",    NEXT_MONTH:"\u4E0B\u4E00\u6708\u0020\u0028\u6309\u4F4F\u51FA\u83DC\u5355\u0029",    NEXT_YEAR:"\u4E0B\u4E00\u5E74\u0020\u0028\u6309\u4F4F\u51FA\u83DC\u5355\u0029",    SEL_DATE:"\u9009\u62E9\u65E5\u671F",    DRAG_TO_MOVE:"\u62D6\u52A8",    PART_TODAY:"\u0028\u4ECA\u65E5\u0029",    DAY_FIRST:"\u6700\u5DE6\u8FB9\u663E\u793A%s",    WEEKEND:"0,6",    CLOSE:"\u5173\u95ED",    TODAY:"\u4ECA\u65E5",    TIME_PART:"(Shift-)\u70B9\u51FB\u9F20\u6807\u6216\u62D6\u52A8\u6539\u53D8\u503C",    DEF_DATE_FORMAT:"%Y-%m-%d",    TT_DATE_FORMAT:"%A, %b %e\u65E5",    WK:"\u5468",    TIME:"\u65F6\u95F4\u003A"   }        }; })();};if(typeof(Wade.component.Calendar)=='undefined'){var calHelper=Wade.component.CalendarHelper;Wade.component.CalendarDomHelper=(function(){ var is_ie=/msie/i.test(navigator.userAgent) && !/opera/i.test(navigator.userAgent); var is_ie5=is_ie && /msie 5\.0/i.test(navigator.userAgent);   var is_opera=/opera/i.test(navigator.userAgent); var is_khtml=/Konqueror|Safari|KHTML/i.test(navigator.userAgent);  return {  is_ie:is_ie,  is_ie5:is_ie5,  is_opera:is_opera,  is_khtml:is_khtml,  getAbsolutePos:function(el) {   var SL = 0, ST = 0;   if(el==null || typeof(el)=="undefined" || typeof(el.nodeType)=="undefined") return {x:0,y:0};   var is_div = /^div$/i.test(el.tagName);   if (is_div && el.scrollLeft)    SL = el.scrollLeft;   if (is_div && el.scrollTop)    ST = el.scrollTop;   var r = { x: el.offsetLeft - SL, y: el.offsetTop - ST };   if (el.offsetParent) {    var tmp = this.getAbsolutePos(el.offsetParent);    r.x += tmp.x;    r.y += tmp.y;   }   return r;  },  isRelated:function(el, evt) {   var related = evt.relatedTarget;   if (!related) {    var type = evt.type;    if (type == "mouseover") {     related = evt.fromElement;    } else if (type == "mouseout") {     related = evt.toElement;    }   }   while (related) {    if (related == el) {     return true;    }    if(typeof(related)!='undefined' && typeof(related.parentNode)!='undefined' &&        related.parentNode && related.parentNode.nodeType){     related = related.parentNode;    }else break;   }   return false;  },  removeClass:function(el, className) {   if (!(el && el.className)) {    return;   }   var cls = el.className.split(" ");   var ar = new Array();   for (var i = cls.length; i > 0;) {    if (cls[--i] != className) {     ar[ar.length] = cls[i];    }   }   el.className = ar.join(" ");  },  addClass:function(el, className){   this.removeClass(el, className);   el.className += " " + className;  },  getElement:function(ev) {   var f = is_ie ? window.event.srcElement : ev.currentTarget;   while (f!=null && typeof(f)=='object' && (f.nodeType != 1 || /^div$/i.test(f.tagName)))    f = f.parentNode;   return f;  },  getTargetElement:function(ev) {   var f = is_ie ? window.event.srcElement : ev.target;   while (f.nodeType != 1)    f = f.parentNode;   return f;  },  stopEvent:function(ev) {   ev || (ev = window.event);   if (is_ie) {    ev.cancelBubble = true;    ev.returnValue = false;   } else {    ev.preventDefault();    ev.stopPropagation();   }   return false;  },  addEvent:function(el, evname, func) {      if (el.addEventListener) {     el.addEventListener(evname, func, true);   } else if (el.attachEvent) {     el.attachEvent("on" + evname, func);   } else {    el["on" + evname] = func;   }  },  removeEvent:function(el, evname, func) {   if (el.removeEventListener) {     el.removeEventListener(evname, func, true);   } else if (el.detachEvent) {     el.detachEvent("on" + evname, func);   } else {    el["on" + evname] = null;   }  },  createElement:function(type, parent) {   var el = null;   if (document.createElementNS) {    el = document.createElementNS("http://www.w3.org/1999/xhtml", type);   } else {    el = document.createElement(type);   }   if (typeof parent != "undefined") {    parent.appendChild(el);   }   return el;  },  findMonth:function(el) {   if (typeof el.month != "undefined") {    return el;   } else if (typeof el.parentNode.month != "undefined") {    return el.parentNode;   }   return null;  },  findYear:function(el) {   if (typeof el.year != "undefined") {    return el;   } else if (typeof el.parentNode.year != "undefined") {    return el.parentNode;   }   return null;  }     };})();var cdh=Wade.component.CalendarDomHelper;Wade.component.CalendarManager=(function(){  Date._MD = new Array(31,28,31,30,31,30,31,31,30,31,30,31);   Date.SECOND = 1000 ; Date.MINUTE = 60 * Date.SECOND; Date.HOUR   = 60 * Date.MINUTE; Date.DAY    = 24 * Date.HOUR; Date.WEEK   =  7 * Date.DAY;  Date.parseDate = function(str, fmt) {  var today = new Date();  var y = 0;  var m = -1;  var d = 0;  var a = str.split(/\W+/);  var b = fmt.match(/%./g);  var i = 0, j = 0;  var hr = 0;  var min = 0;  var sec=0;  for (i = 0; i < a.length; ++i) {   if (!a[i])    continue;   switch (b[i]) {       case "%d":       case "%e":    d = parseInt(a[i], 10);    break;        case "%m":    m = parseInt(a[i], 10) - 1;    break;        case "%Y":       case "%y":    y = parseInt(a[i], 10);    (y < 100) && (y += (y > 29) ? 1900 : 2000);    break;        case "%b":       case "%B":    for (j = 0; j < 12; ++j) {     if (calHelper._MN[j].substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) { m = j; break; }    }    break;        case "%H":       case "%h":       case "%I":       case "%k":       case "%l":    hr = parseInt(a[i], 10);    break;        case "%P":       case "%p":    if (/pm/i.test(a[i]) && hr < 12)     hr += 12;    else if (/am/i.test(a[i]) && hr >= 12)     hr -= 12;    break;        case "%M":    min = parseInt(a[i], 10);    break;    case "%S":    sec=parseInt(a[i], 10);    break;   }  }  if (isNaN(y)) y = today.getFullYear();  if (isNaN(m)) m = today.getMonth();  if (isNaN(d)) d = today.getDate();  if (isNaN(hr)) hr = today.getHours();  if (isNaN(min)) min = today.getMinutes();  if (isNaN(sec))sec=today.getSeconds();  if (y != 0 && m != -1 && d != 0)   return new Date(y, m, d, hr, min, sec);  y = 0; m = -1; d = 0;  for (i = 0; i < a.length; ++i) {   if (a[i].search(/[a-zA-Z]+/) != -1) {    var t = -1;    for (j = 0; j < 12; ++j) {     if (calHelper._MN[j].substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) { t = j; break; }    }    if (t != -1) {     if (m != -1) {      d = m+1;     }     m = t;    }   } else if (parseInt(a[i], 10) <= 12 && m == -1) {    m = a[i]-1;   } else if (parseInt(a[i], 10) > 31 && y == 0) {    y = parseInt(a[i], 10);    (y < 100) && (y += (y > 29) ? 1900 : 2000);   } else if (d == 0) {    d = a[i];   }  }  if (y == 0)   y = today.getFullYear();  if (m != -1 && d != 0)   return new Date(y, m, d, hr, min, sec);  return today; };   Date.prototype.getMonthDays = function(month) {  var year = this.getFullYear();  if (typeof month == "undefined") {   month = this.getMonth();  }  if (((0 == (year%4)) && ( (0 != (year%100)) || (0 == (year%400)))) && month == 1) {   return 29;  } else {   return Date._MD[month];  } };   Date.prototype.getDayOfYear = function() {  var now = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);  var then = new Date(this.getFullYear(), 0, 0, 0, 0, 0);  var time = now - then;  return Math.floor(time / Date.DAY); };   Date.prototype.getWeekNumber = function() {  var d = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);  var DoW = d.getDay();  d.setDate(d.getDate() - (DoW + 6) % 7 + 3);   var ms = d.valueOf();   d.setMonth(0);  d.setDate(4);   return Math.round((ms - d.valueOf()) / (7 * 864e5)) + 1; };   Date.prototype.equalsTo = function(date) {  return ((this.getFullYear() == date.getFullYear()) &&   (this.getMonth() == date.getMonth()) &&   (this.getDate() == date.getDate()) &&   (this.getHours() == date.getHours()) &&   (this.getMinutes() == date.getMinutes())); };   Date.prototype.setDateOnly = function(date) {  var tmp = new Date(date);  this.setDate(1);  this.setFullYear(tmp.getFullYear());  this.setMonth(tmp.getMonth());  this.setDate(tmp.getDate()); };   Date.prototype.print = function (str) {  var m = this.getMonth();  var d = this.getDate();  var y = this.getFullYear();  var wn = this.getWeekNumber();  var w = this.getDay();  var s = {};  var hr = this.getHours();  var pm = (hr >= 12);  var ir = (pm) ? (hr - 12) : hr;  var dy = this.getDayOfYear();  if (ir == 0)   ir = 12;  var min = this.getMinutes();  var sec = this.getSeconds();  s["%a"] = calHelper._SDN[w];   s["%A"] = calHelper._DN[w];   s["%b"] = calHelper._SMN[m];   s["%B"] = calHelper._MN[m];     s["%C"] = 1 + Math.floor(y / 100);   s["%d"] = (d < 10) ? ("0" + d) : d;   s["%e"] = d;       s["%H"] = (hr < 10) ? ("0" + hr) : hr;   s["%h"] = (hr < 10) ? ("0" + hr) : hr;   s["%I"] = (ir < 10) ? ("0" + ir) : ir;   s["%j"] = (dy < 100) ? ((dy < 10) ? ("00" + dy) : ("0" + dy)) : dy;   s["%k"] = hr;    s["%l"] = ir;    s["%m"] = (m < 9) ? ("0" + (1+m)) : (1+m);   s["%M"] = (min < 10) ? ("0" + min) : min;   s["%n"] = "\n";    s["%p"] = pm ? "PM" : "AM";  s["%P"] = pm ? "pm" : "am";      s["%s"] = Math.floor(this.getTime() / 1000);  s["%S"] = (sec < 10) ? ("0" + sec) : sec;   s["%t"] = "\t";      s["%U"] = s["%W"] = s["%V"] = (wn < 10) ? ("0" + wn) : wn;  s["%u"] = w + 1;   s["%w"] = w;        s["%y"] = ('' + y).substr(2, 2);   s["%Y"] = y;    s["%%"] = "%";     var re = /%./g;  if (!cdh.is_ie5 && !cdh.is_khtml)   return str.replace(re, function (par) { return s[par] || par; });   var a = str.match(re);  for (var i = 0; i < a.length; i++) {   var tmp = s[a[i]];   if (tmp) {    re = new RegExp(a[i], 'g');    str = str.replace(re, tmp);   }  }   return str; };  Date.prototype.__msh_oldSetFullYear = Date.prototype.setFullYear; Date.prototype.setFullYear = function(y) {  var d = new Date(this);  d.__msh_oldSetFullYear(y);  if (d.getMonth() != this.getMonth())   this.setDate(28);  this.__msh_oldSetFullYear(y); };  function getCalendarFormat(format) {  format = format.replace('yyyy', '%Y');  format = format.replace('yy', '%y');  format = format.replace("MM", "%m");  format = format.replace("dd", "%d");  format = format.replace("HH", "%H");  format = format.replace("hh", "%h");  format = format.replace("mm", "%M");  format = format.replace("ss", "%S");  return format; }; return {  _C:null,  addCalendar:function(name,hold,autoComplete) {      var field = document.getElementById(name);      var format = field.getAttribute("format");      Wade.component.CalendarManager.setup({          inputField     :    name,          ifFormat       :    getCalendarFormat(format),          showsTime      :    format.indexOf("HH") != -1,          timeFormat     :    "24",          button         :    (hold==true)?null:"IMG_CAL_" + name,          autoComplete   :    autoComplete      });  },  showCalendar:function(name) {   var field = document.getElementById(name);   var format = field.getAttribute("format");   var cal = new Wade.component.Calendar();   cal.dateFormat = getCalendarFormat(format);   cal.showsTime = format.indexOf("HH") != -1;   cal.time24 = true;   cal.create();  },  _add_evs:function(el) {   cdh.addEvent(el, "mouseover", Wade.component.CalendarEvent.dayMouseOver);   cdh.addEvent(el, "mousedown", Wade.component.CalendarEvent.dayMouseDown);   cdh.addEvent(el, "mouseout", Wade.component.CalendarEvent.dayMouseOut);   if (cdh.is_ie) {    cdh.addEvent(el, "dblclick", Wade.component.CalendarEvent.dayMouseDblClick);    el.setAttribute("unselectable", true);   }  },    showMonthsCombo:function () {   var cal = this._C;   if (!cal) {    return false;   }   var cal = cal;   var cd = cal.activeDiv;   var mc = cal.monthsCombo;   if (cal.hilitedMonth) {    cdh.removeClass(cal.hilitedMonth, "hilite");   }   if (cal.activeMonth) {    cdh.removeClass(cal.activeMonth, "active");   }   var mon = cal.monthsCombo.getElementsByTagName("div")[cal.date.getMonth()];   cdh.addClass(mon, "active");   cal.activeMonth = mon;   var s = mc.style;   s.display = "block";   if (cd.navtype < 0)    s.left = cd.offsetLeft + "px";   else {    var mcw = mc.offsetWidth;    if (typeof mcw == "undefined")          mcw = 50;    s.left = (cd.offsetLeft + cd.offsetWidth - mcw) + "px";   }   s.top = (cd.offsetTop + cd.offsetHeight) + "px";  },  showYearsCombo:function (fwd) {   var cal = this._C;   if (!cal) {    return false;   }   var cal = cal;   var cd = cal.activeDiv;   var yc = cal.yearsCombo;   if (cal.hilitedYear) {    cdh.removeClass(cal.hilitedYear, "hilite");   }   if (cal.activeYear) {    cdh.removeClass(cal.activeYear, "active");   }   cal.activeYear = null;   var Y = cal.date.getFullYear() + (fwd ? 1 : -1);   var yr = yc.firstChild;   var show = false;   for (var i = 12; i > 0; --i) {    if (Y >= cal.minYear && Y <= cal.maxYear) {     yr.innerHTML = Y;     yr.year = Y;     yr.style.display = "block";     show = true;    } else {     yr.style.display = "none";    }    yr = yr.nextSibling;    Y += fwd ? cal.yearStep : -cal.yearStep;   }   if (show) {    var s = yc.style;    s.display = "block";    if (cd.navtype < 0)     s.left = cd.offsetLeft + "px";    else {     var ycw = yc.offsetWidth;     if (typeof ycw == "undefined")            ycw = 50;     s.left = (cd.offsetLeft + cd.offsetWidth - ycw) + "px";    }    s.top = (cd.offsetTop + cd.offsetHeight) + "px";   }  },  cellClick:function(el, ev) {   var cal = el.calendar;   var closing = false;   var newdate = false;   var date = null;   if (typeof el.navtype == "undefined") {    if (cal.currentDateEl) {     cdh.removeClass(cal.currentDateEl, "selected");     cdh.addClass(el, "selected");     closing = (cal.currentDateEl == el);     if (!closing) {      cal.currentDateEl = el;     }    }    cal.date.setDateOnly(el.caldate);    date = cal.date;    var other_month = !(cal.dateClicked = !el.otherMonth);    if (!other_month && !cal.currentDateEl)     cal._toggleMultipleDate(new Date(date));    else     newdate = !el.disabled;        if (other_month)     cal._init(cal.firstDayOfWeek, date);   } else {    if (el.navtype == 200) {     cdh.removeClass(el, "hilite");     cal.callCloseHandler();     return;    }    date = new Date(cal.date);    if (el.navtype == 0)     date.setDateOnly(new Date());                     cal.dateClicked = false;    var year = date.getFullYear();    var mon = date.getMonth();    function setMonth(m) {     var day = date.getDate();     var max = date.getMonthDays(m);     if (day > max) {      date.setDate(max);     }     date.setMonth(m);    };    switch (el.navtype) {        case 400:     cdh.removeClass(el, "hilite");     var text = calHelper._TT["ABOUT"];     if (typeof text != "undefined") {      text += cal.showsTime ? calHelper._TT["ABOUT_TIME"] : "";     } else {            text = "Help and about box text is not translated into this language.\n" +       "If you know this language and you feel generous please update\n" +       "the corresponding file in \"lang\" subdir to match calendar-en.js\n" +       "and send it back to <mihai_bazon@yahoo.com> to get it into the distribution  ;-)\n\n" +       "Thank you!\n" +       "http://dynarch.com/mishoo/calendar.epl\n";     }     alert(text);     return;        case -2:     if (year > cal.minYear) {      date.setFullYear(year - 1);     }     break;        case -1:     if (mon > 0) {      setMonth(mon - 1);     } else if (year-- > cal.minYear) {      date.setFullYear(year);      setMonth(11);     }     break;        case 1:     if (mon < 11) {      setMonth(mon + 1);     } else if (year < cal.maxYear) {      date.setFullYear(year + 1);      setMonth(0);     }     break;        case 2:     if (year < cal.maxYear) {      date.setFullYear(year + 1);     }     break;        case 100:     cal.setFirstDayOfWeek(el.fdow);     return;        case 50:     var range = el._range;     var current = el.innerHTML;     for (var i = range.length; --i >= 0;)      if (range[i] == current)       break;     if (ev && ev.shiftKey) {      if (--i < 0)       i = range.length - 1;     } else if ( ++i >= range.length )      i = 0;     var newval = range[i];     el.innerHTML = newval;     cal.onUpdateTime();     return;        case 0:          if ((typeof cal.getDateStatus == "function") &&         cal.getDateStatus(date, date.getFullYear(), date.getMonth(), date.getDate())) {      return false;     }     break;    }    if (!date.equalsTo(cal.date)) {     cal.setDate(date);     newdate = true;    } else if (el.navtype == 0)     newdate = closing = true;   }   if (newdate) {    ev && cal.callHandler();   }   if (closing) {    cdh.removeClass(el, "hilite");    ev && cal.callCloseHandler();   }  },    setup:function(params){   function param_default(pname, def) { if (typeof params[pname] == "undefined") { params[pname] = def; } };     param_default("inputField",     null);   param_default("displayArea",    null);   param_default("button",         null);   param_default("eventName",      "click");   param_default("ifFormat",       "%Y/%m/%d");   param_default("daFormat",       "%Y/%m/%d");   param_default("singleClick",    true);   param_default("disableFunc",    null);   param_default("dateStatusFunc", params["disableFunc"]);    param_default("dateText",       null);   param_default("firstDay",       null);   param_default("align",          "Br");   param_default("range",          [1900, 2999]);   param_default("weekNumbers",    true);   param_default("flat",           null);   param_default("flatCallback",   null);   param_default("onSelect",       null);   param_default("onClose",        null);   param_default("onUpdate",       null);   param_default("date",           null);   param_default("showsTime",      false);   param_default("timeFormat",     "24");   param_default("electric",       true);   param_default("step",           2);   param_default("position",       null);   param_default("cache",          false);   param_default("showOthers",     false);   param_default("multiple",       null);   param_default("autoComplete", false);       var tmp = ["inputField", "displayArea", "button"];   for (var i in tmp) {    if (typeof params[tmp[i]] == "string") {     params[tmp[i]] = document.getElementById(params[tmp[i]]);    }   }   if (!(params.flat || params.multiple || params.inputField || params.displayArea || params.button)) {    alert("Wade.component.CalendarManager.setup:\n  Nothing to setup (no fields found).  Please check your code");    return false;   }     function onSelect(cal) {    var p = cal.params;    var update = (cal.dateClicked || p.electric);    if (update && p.inputField) {     p.inputField.value = cal.date.print(p.ifFormat);     if (typeof p.inputField.onchange == "function")      p.inputField.onchange();    }    if (update && p.displayArea)     p.displayArea.innerHTML = cal.date.print(p.daFormat);    if (update && typeof p.onUpdate == "function")     p.onUpdate(cal);    if (update && p.flat) {     if (typeof p.flatCallback == "function")      p.flatCallback(cal);    }    if (update && p.singleClick && cal.dateClicked)     cal.callCloseHandler();   };      if (params.flat != null) {    if (typeof params.flat == "string")     params.flat = document.getElementById(params.flat);    if (!params.flat) {     alert("Wade.component.CalendarManager.setup:\n  Flat specified but can't find parent.");     return false;    }    var cal = new Wade.component.Calendar(params.firstDay, params.date, params.onSelect || onSelect);    cal.showsOtherMonths = params.showOthers;    cal.showsTime = params.showsTime;    cal.time24 = (params.timeFormat == "24");    cal.params = params;    cal.weekNumbers = params.weekNumbers;    cal.setRange(params.range[0], params.range[1]);    cal.setDateStatusHandler(params.dateStatusFunc);    cal.getDateText = params.dateText;    if (params.ifFormat) {     cal.setDateFormat(params.ifFormat);    }    if (params.inputField && typeof params.inputField.value == "string") {     cal.parseDate(params.inputField.value);    }    cal.create(params.flat);    cal.show();    return false;   }     var triggerEl = params.button || params.displayArea || params.inputField;   triggerEl["on" + params.eventName] = function() {    var dateEl = params.inputField || params.displayArea;    var dateFmt = params.inputField ? params.ifFormat : params.daFormat;    var mustCreate = false;    var cal = window.calendar;    if (dateEl)     params.date = Date.parseDate(dateEl.value || dateEl.innerHTML, dateFmt);    if (!(cal && params.cache)) {     window.calendar = cal = new Wade.component.Calendar(params.firstDay,              params.date,              params.onSelect || onSelect,              params.onClose || function(cal) { cal.hide(); });     cal.showsTime = params.showsTime;     cal.time24 = (params.timeFormat == "24");     cal.weekNumbers = params.weekNumbers;     mustCreate = true;    } else {     if (params.date)      cal.setDate(params.date);     cal.hide();    }    if (params.multiple) {     cal.multiple = {};     for (var i = params.multiple.length; --i >= 0;) {      var d = params.multiple[i];      var ds = d.print("%Y%m%d");      cal.multiple[ds] = d;     }    }    cal.showsOtherMonths = params.showOthers;    cal.yearStep = params.step;    cal.setRange(params.range[0], params.range[1]);    cal.params = params;    cal.setDateStatusHandler(params.dateStatusFunc);    cal.getDateText = params.dateText;    cal.setDateFormat(dateFmt);    if (mustCreate)     cal.create();    cal.refresh();    if (!params.position)     cal.showAtElement(params.button || params.displayArea || params.inputField, params.align);    else     cal.showAt(params.position[0], params.position[1]);    return false;   };          if(params.autoComplete){    var expDateStr=(new Date()).print(params.ifFormat);    cdh.addEvent(params.inputField,"keydown",function(ev){     ev= ev || window.event;     if(ev.keyCode==8 || ev.keyCode==13)return true;          var target=ev.target || ev.srcElement;     if(((ev.keyCode>47 && ev.keyCode<58) || (ev.keyCode>95 && ev.keyCode<106)) && target.value.length<expDateStr.length){      return true;     }     if(ev.preventDefault && ev.stopPropagation) {      ev.preventDefault();      ev.stopPropagation();     }else{      ev.cancelBubble = true;      ev.returnValue = false;     }     return false;        });    cdh.addEvent(params.inputField,"keyup",function(ev){     ev= ev || window.event;     if(ev.keyCode==8 || ev.keyCode==13)return true;          var target=ev.target || ev.srcElement;        var tmp=expDateStr.substring(target.value.length,target.value.length+1);     if(!(/[0-9]+/i.test(tmp))){      target.value+=tmp;     }           });     }  }   };})();window._dynarch_popupCalendar = null; var calMgr=Wade.component.CalendarManager;Wade.component.CalendarEvent=(function(){ return {  tableMouseUp:function(ev) {   var cal = calMgr._C;   if (!cal) {    return false;   }   if (cal.timeout) {    clearTimeout(cal.timeout);   }   var el = cal.activeDiv;   if (!el) {    return false;   }   var target =cdh.getTargetElement(ev);   ev || (ev = window.event);   cdh.removeClass(el, "active");   if (target == el || target.parentNode == el) {    calMgr.cellClick(el, ev);   }   var mon = cdh.findMonth(target);   var date = null;   if (mon) {    date = new Date(cal.date);    if (mon.month != date.getMonth()) {     date.setMonth(mon.month);     cal.setDate(date);     cal.dateClicked = false;     cal.callHandler();    }   } else {    var year = cdh.findYear(target);    if (year) {     date = new Date(cal.date);     if (year.year != date.getFullYear()) {      date.setFullYear(year.year);      cal.setDate(date);      cal.dateClicked = false;      cal.callHandler();     }    }   }      cdh.removeEvent(document, "mouseup", Wade.component.CalendarEvent.tableMouseUp);   cdh.removeEvent(document, "mouseover", Wade.component.CalendarEvent.tableMouseOver);   cdh.removeEvent(document, "mousemove", Wade.component.CalendarEvent.tableMouseOver);      cal._hideCombos();   calMgr._C = null;   return cdh.stopEvent(ev);     },  tableMouseOver:function (ev) {   var cal = calMgr._C;   if (!cal) {    return;   }   var el = cal.activeDiv;   var target = cdh.getTargetElement(ev);   if (target == el || target.parentNode == el) {    cdh.addClass(el, "hilite active");    cdh.addClass(el.parentNode, "rowhilite");   } else {    if (typeof el.navtype == "undefined" || (el.navtype != 50 && (el.navtype == 0 || Math.abs(el.navtype) > 2)))     cdh.removeClass(el, "active");    cdh.removeClass(el, "hilite");    cdh.removeClass(el.parentNode, "rowhilite");   }   ev || (ev = window.event);   if (el.navtype == 50 && target != el) {    var pos = cdh.getAbsolutePos(el);    var w = el.offsetWidth;    var x = ev.clientX;    var dx;    var decrease = true;    if (x > pos.x + w) {     dx = x - pos.x - w;     decrease = false;    } else     dx = pos.x - x;      if (dx < 0) dx = 0;    var range = el._range;    var current = el._current;    var count = Math.floor(dx / 10) % range.length;    for (var i = range.length; --i >= 0;)     if (range[i] == current)      break;    while (count-- > 0)     if (decrease) {      if (--i < 0)       i = range.length - 1;     } else if ( ++i >= range.length )      i = 0;    var newval = range[i];    el.innerHTML = newval;      cal.onUpdateTime();   }   var mon = cdh.findMonth(target);   if (mon) {    if (mon.month != cal.date.getMonth()) {     if (cal.hilitedMonth) {      cdh.removeClass(cal.hilitedMonth, "hilite");     }     cdh.addClass(mon, "hilite");     cal.hilitedMonth = mon;    } else if (cal.hilitedMonth) {     cdh.removeClass(cal.hilitedMonth, "hilite");    }   } else {    if (cal.hilitedMonth) {     cdh.removeClass(cal.hilitedMonth, "hilite");    }    var year = cdh.findYear(target);    if (year) {     if (year.year != cal.date.getFullYear()) {      if (cal.hilitedYear) {       cdh.removeClass(cal.hilitedYear, "hilite");      }      cdh.addClass(year, "hilite");      cal.hilitedYear = year;     } else if (cal.hilitedYear) {      cdh.removeClass(cal.hilitedYear, "hilite");     }    } else if (cal.hilitedYear) {     cdh.removeClass(cal.hilitedYear, "hilite");    }   }   return cdh.stopEvent(ev);  },  tableMouseDown:function (ev) {   if (cdh.getTargetElement(ev) == cdh.getElement(ev)) {    return cdh.stopEvent(ev);   }  },  calDragIt:function (ev) {   var cal = calMgr._C;   if (!(cal && cal.dragging)) {    return false;   }   var posX;   var posY;   if (cdh.is_ie) {    posY = window.event.clientY + document.body.scrollTop;    posX = window.event.clientX + document.body.scrollLeft;   } else {    posX = ev.pageX;    posY = ev.pageY;   }   cal.hideShowCovered();   var st = cal.element.style;   st.left = (posX - cal.xOffs) + "px";   st.top = (posY - cal.yOffs) + "px";   return cdh.stopEvent(ev);  },  calDragEnd:function (ev) {   var cal = calMgr._C;   if (!cal) {    return false;   }   cal.dragging = false;      cdh.removeEvent(document, "mousemove", Wade.component.CalendarEvent.calDragIt);   cdh.removeEvent(document, "mouseup", Wade.component.CalendarEvent.calDragEnd);   Wade.component.CalendarEvent.tableMouseUp(ev);   cal.hideShowCovered();  },  dayMouseDown:function(ev) {   var el = cdh.getElement(ev);   if (el.disabled) {    return false;   }   var cal = el.calendar;   cal.activeDiv = el;   calMgr._C = cal;   if (el.navtype != 300){     if (el.navtype == 50) {     el._current = el.innerHTML;     cdh.addEvent(document, "mousemove", Wade.component.CalendarEvent.tableMouseOver);    } else     cdh.addEvent(document, cdh.is_ie5 ? "mousemove" : "mouseover", Wade.component.CalendarEvent.tableMouseOver);    cdh.addClass(el, "hilite active");    cdh.addEvent(document, "mouseup", Wade.component.CalendarEvent.tableMouseUp);   } else if (cal.isPopup) {    cal._dragStart(ev);   }   if (el.navtype == -1 || el.navtype == 1) {    if (cal.timeout) clearTimeout(cal.timeout);    cal.timeout = setTimeout("Wade.component.CalendarManager.showMonthsCombo()", 250);   } else if (el.navtype == -2 || el.navtype == 2) {    if (cal.timeout) clearTimeout(cal.timeout);    cal.timeout = setTimeout((el.navtype > 0) ? "Wade.component.CalendarManager.showYearsCombo(true)" : "Wade.component.CalendarManager.showYearsCombo(false)", 250);   } else {    cal.timeout = null;   }   return cdh.stopEvent(ev);  },  dayMouseDblClick:function(ev) {   calMgr.cellClick(cdh.getElement(ev), ev || window.event);   if(cdh.is_ie){    document.selection.empty();   }  },  dayMouseOver:function(ev) {   var el = cdh.getElement(ev);   if (cdh.isRelated(el, ev) || calMgr._C || el.disabled) {    return false;   }   if (el.ttip) {    if (el.ttip.substr(0, 1) == "_") {     el.ttip = el.caldate.print(el.calendar.ttDateFormat) + el.ttip.substr(1);    }    el.calendar.tooltips.innerHTML = el.ttip;   }   if (el.navtype != 300) {       cdh.addClass(el, "hilite");    if (el.caldate){     cdh.addClass(el.parentNode, "rowhilite");    }   }   return cdh.stopEvent(ev);  },  dayMouseOut:function(ev) {   var el = cdh.getElement(ev);   if (cdh.isRelated(el, ev) || calMgr._C || el.disabled)    return false;   if (el.navtype != 300) {     cdh.removeClass(el, "hilite");    if (el.caldate){     cdh.removeClass(el.parentNode, "rowhilite");    }   }   if (el.calendar)    el.calendar.tooltips.innerHTML = calHelper._TT["SEL_DATE"];   return cdh.stopEvent(ev);  },  _keyEvent:function(ev){   var cal = window._dynarch_popupCalendar;   if (!cal || cal.multiple)    return false;      var act = (cdh.is_ie || ev.type == "keypress"),    K = ev.keyCode;   if (ev.ctrlKey) {    switch (K) {        case 37:      act && calMgr.cellClick(cal._nav_pm);     break;        case 38:      act && calMgr.cellClick(cal._nav_py);     break;        case 39:      act && calMgr.cellClick(cal._nav_nm);     break;        case 40:      act && calMgr.cellClick(cal._nav_ny);     break;        default:     return false;    }   } else switch (K) {       case 32:     calMgr.cellClick(cal._nav_now);    break;       case 27:     act && cal.callCloseHandler();    break;       case 37:        case 38:        case 39:        case 40:     if (act) {     var prev, x, y, ne, el, step;     prev = K == 37 || K == 38;     step = (K == 37 || K == 39) ? 1 : 7;     function setVars() {      el = cal.currentDateEl;      var p = el.pos;      x = p & 15;      y = p >> 4;      ne = cal.ar_days[y][x];     };setVars();     function prevMonth() {      var date = new Date(cal.date);      date.setDate(date.getDate() - step);      cal.setDate(date);     };     function nextMonth() {      var date = new Date(cal.date);      date.setDate(date.getDate() + step);      cal.setDate(date);     };     while (1) {      switch (K) {          case 37:        if (--x >= 0)        ne = cal.ar_days[y][x];       else {        x = 6;        K = 38;        continue;       }       break;          case 38:        if (--y >= 0)        ne = cal.ar_days[y][x];       else {        prevMonth();        setVars();       }       break;          case 39:        if (++x < 7)        ne = cal.ar_days[y][x];       else {        x = 0;        K = 40;        continue;       }       break;          case 40:        if (++y < cal.ar_days.length)        ne = cal.ar_days[y][x];       else {        nextMonth();        setVars();       }       break;      }      break;     }     if (ne) {      if (!ne.disabled)       Calendar.cellClick(ne);      else if (prev)       prevMonth();      else       nextMonth();     }    }    break;       case 13:     if (act)     calMgr.cellClick(cal.currentDateEl, ev);    break;       default:    return false;   }   return cdh.stopEvent(ev);  },  _checkCalendar:function(ev) {   var calendar = window._dynarch_popupCalendar;   if (!calendar) {    return false;   }   var el = cdh.is_ie ? cdh.getElement(ev) : cdh.getTargetElement(ev);   for (; el != null && el != calendar.element; el = el.parentNode);   if (el == null) {        window._dynarch_popupCalendar.callCloseHandler();    return cdh.stopEvent(ev);   }  }   };})();var calEvent=Wade.component.CalendarEvent;Wade.component.Calendar = function (firstDayOfWeek, dateStr, onSelected, onClose) {  this.activeDiv = null; this.currentDateEl = null; this.getDateStatus = null; this.getDateToolTip = null; this.getDateText = null; this.timeout = null; this.onSelected = onSelected || null; this.onClose = onClose || null; this.dragging = false; this.hidden = false; this.minYear = 1970; this.maxYear = 2050; this.dateFormat = calHelper._TT["DEF_DATE_FORMAT"]; this.ttDateFormat = calHelper._TT["TT_DATE_FORMAT"]; this.isPopup = true; this.weekNumbers = true; this.firstDayOfWeek = typeof firstDayOfWeek == "number" ? firstDayOfWeek : calHelper._FD;  this.showsOtherMonths = false; this.dateStr = dateStr; this.ar_days = null; this.showsTime = false; this.time24 = true; this.yearStep = 2; this.hiliteToday = true; this.multiple = null;  this.table = null; this.element = null; this.tbody = null; this.firstdayname = null;  this.monthsCombo = null; this.yearsCombo = null; this.hilitedMonth = null; this.activeMonth = null; this.hilitedYear = null; this.activeYear = null;  this.dateClicked = false;  if (typeof(calHelper._SDN) == "undefined") {    if (typeof(calHelper._SDN_len) == "undefined")   calHelper._SDN_len = 3;  var ar = new Array();  for (var i = 8; i > 0;) {   ar[--i] = calHelper._DN[i].substr(0, calHelper._SDN_len);  }  calHelper._SDN = ar;    if (typeof(calHelper._SMN_len)== "undefined")   calHelper._SMN_len = 3;  ar = new Array();  for (var i = 12; i > 0;) {   ar[--i] = calHelper._MN[i].substr(0, calHelper._SMN_len);  }  calHelper._SMN = ar; }};Wade.component.Calendar.prototype={ create:function (_par) {  var parent = null;  if (! _par) {         parent = document.getElementsByTagName("body")[0];   this.isPopup = true;  } else {   parent = _par;   this.isPopup = false;  }  this.date = this.dateStr ? new Date(this.dateStr) : new Date();   var table = cdh.createElement("table");  this.table = table;  table.cellSpacing = 0;  table.cellPadding = 0;  table.calendar = this;  cdh.addEvent(table, "mousedown", calEvent.tableMouseDown);   var div = cdh.createElement("div");  this.element = div;  div.className = "calendar";  if (this.isPopup) {   div.style.position = "absolute";   div.style.display = "none";   div.style.zIndex="99999";  }  div.appendChild(table);   var thead = cdh.createElement("thead", table);  var cell = null;  var row = null;   var cal = this;  var hh = function (text, cs, navtype) {   cell = cdh.createElement("td", row);   cell.colSpan = cs;   cell.className = "button";   if (navtype != 0 && Math.abs(navtype) <= 2)    cell.className += " nav";   calMgr._add_evs(cell);   cell.calendar = cal;   cell.navtype = navtype;   cell.innerHTML = "<div unselectable='on'>" + text + "</div>";   return cell;  };   row = cdh.createElement("tr", thead);  var title_length = 6;  (this.isPopup) && --title_length;  (this.weekNumbers) && ++title_length;   hh("?", 1, 400).ttip = calHelper._TT["INFO"];  this.title = hh("", title_length, 300);  this.title.className = "title";  if (this.isPopup) {   this.title.ttip = calHelper._TT["DRAG_TO_MOVE"];   this.title.style.cursor = "move";   hh("&#x00d7;", 1, 200).ttip = calHelper._TT["CLOSE"];  }   row = cdh.createElement("tr", thead);  row.className = "headrow";   this._nav_py = hh("&#x00ab;", 1, -2);  this._nav_py.ttip = calHelper._TT["PREV_YEAR"];   this._nav_pm = hh("&#x2039;", 1, -1);  this._nav_pm.ttip = calHelper._TT["PREV_MONTH"];   this._nav_now = hh(calHelper._TT["TODAY"], this.weekNumbers ? 4 : 3, 0);  this._nav_now.ttip = calHelper._TT["GO_TODAY"];   this._nav_nm = hh("&#x203a;", 1, 1);  this._nav_nm.ttip = calHelper._TT["NEXT_MONTH"];   this._nav_ny = hh("&#x00bb;", 1, 2);  this._nav_ny.ttip = calHelper._TT["NEXT_YEAR"];     row = cdh.createElement("tr", thead);  row.className = "daynames";  if (this.weekNumbers) {   cell = cdh.createElement("td", row);   cell.className = "name wn";   cell.innerHTML = calHelper._TT["WK"];  }  for (var i = 7; i > 0; --i) {   cell = cdh.createElement("td", row);   if (!i) {    cell.navtype = 100;    cell.calendar = this;    calMgr._add_evs(cell);   }  }  this.firstdayname = (this.weekNumbers) ? row.firstChild.nextSibling : row.firstChild;  this._displayWeekdays();   var tbody = cdh.createElement("tbody", table);  this.tbody = tbody;   for (i = 6; i > 0; --i) {   row = cdh.createElement("tr", tbody);   if (this.weekNumbers) {    cell = cdh.createElement("td", row);   }   for (var j = 7; j > 0; --j) {    cell = cdh.createElement("td", row);    cell.calendar = this;    calMgr._add_evs(cell);   }  }   if (this.showsTime) {   row = cdh.createElement("tr", tbody);   row.className = "time";    cell = cdh.createElement("td", row);   cell.className = "time";   cell.colSpan = 2;   cell.innerHTML = calHelper._TT["TIME"] || "&nbsp;";    cell = cdh.createElement("td", row);   cell.className = "time";   cell.colSpan = this.weekNumbers ? 4 : 3;    (function(){    function makeTimePart(className, init, range_start, range_end) {     var part = cdh.createElement("span", cell);     part.className = className;     part.innerHTML = init;     part.calendar = cal;     part.ttip = calHelper._TT["TIME_PART"];     part.navtype = 50;     part._range = [];     if (typeof range_start != "number")      part._range = range_start;     else {      for (var i = range_start; i <= range_end; ++i) {       var txt;       if (i < 10 && range_end >= 10) txt = '0' + i;       else txt = '' + i;       part._range[part._range.length] = txt;      }     }     calMgr._add_evs(part);     return part;    };    var hrs = cal.date.getHours();    var mins = cal.date.getMinutes();    var t12 = !cal.time24;    var pm = (hrs > 12);    if (t12 && pm) hrs -= 12;    var H = makeTimePart("hour", hrs, t12 ? 1 : 0, t12 ? 12 : 23);    var span = cdh.createElement("span", cell);    span.innerHTML = ":";    span.className = "colon";    var M = makeTimePart("minute", mins, 0, 59);    var AP = null;    cell = cdh.createElement("td", row);    cell.className = "time";    cell.colSpan = 2;    if (t12)     AP = makeTimePart("ampm", pm ? "pm" : "am", ["am", "pm"]);    else     cell.innerHTML = "&nbsp;";     cal.onSetTime = function() {     var pm, hrs = this.date.getHours(),      mins = this.date.getMinutes();     if (t12) {      pm = (hrs >= 12);      if (pm) hrs -= 12;      if (hrs == 0) hrs = 12;      AP.innerHTML = pm ? "pm" : "am";     }     H.innerHTML = (hrs < 10) ? ("0" + hrs) : hrs;     M.innerHTML = (mins < 10) ? ("0" + mins) : mins;    };     cal.onUpdateTime = function() {     var date = this.date;     var h = parseInt(H.innerHTML, 10);     if (t12) {      if (/pm/i.test(AP.innerHTML) && h < 12)       h += 12;      else if (/am/i.test(AP.innerHTML) && h == 12)       h = 0;     }     var d = date.getDate();     var m = date.getMonth();     var y = date.getFullYear();     date.setHours(h);     date.setMinutes(parseInt(M.innerHTML, 10));     date.setFullYear(y);     date.setMonth(m);     date.setDate(d);     this.dateClicked = false;     this.callHandler();    };   })();  } else {   this.onSetTime = this.onUpdateTime = function() {};  }   var tfoot = cdh.createElement("tfoot", table);   row = cdh.createElement("tr", tfoot);  row.className = "footrow";   cell = hh(calHelper._TT["SEL_DATE"], this.weekNumbers ? 8 : 7, 300);  cell.className = "ttip";  if (this.isPopup) {   cell.ttip = calHelper._TT["DRAG_TO_MOVE"];   cell.style.cursor = "move";  }  this.tooltips = cell;   div = cdh.createElement("div", this.element);  this.monthsCombo = div;  div.className = "combo";  for (i = 0; i < calHelper._MN.length; ++i) {   var mn = cdh.createElement("div");   mn.className =cdh.is_ie ? "label-IEfix" : "label";   mn.month = i;   mn.innerHTML = calHelper._SMN[i];   div.appendChild(mn);  }   div = cdh.createElement("div", this.element);  this.yearsCombo = div;  div.className = "combo";  for (i = 12; i > 0; --i) {   var yr = cdh.createElement("div");   yr.className = cdh.is_ie ? "label-IEfix" : "label";   div.appendChild(yr);  }   this._init(this.firstDayOfWeek, this.date);  parent.appendChild(this.element); }, _init:function (firstDayOfWeek, date) {  var today = new Date(),   TY = today.getFullYear(),   TM = today.getMonth(),   TD = today.getDate();  this.table.style.visibility = "hidden";  var year = date.getFullYear();  if (year < this.minYear) {   year = this.minYear;   date.setFullYear(year);  } else if (year > this.maxYear) {   year = this.maxYear;   date.setFullYear(year);  }  this.firstDayOfWeek = firstDayOfWeek;  this.date = new Date(date);  var month = date.getMonth();  var mday = date.getDate();  var no_days = date.getMonthDays();         date.setDate(1);  var day1 = (date.getDay() - this.firstDayOfWeek) % 7;  if (day1 < 0)   day1 += 7;  date.setDate(-day1);  date.setDate(date.getDate() + 1);   var row = this.tbody.firstChild;  var MN = calHelper._SMN[month];  var ar_days = this.ar_days = new Array();  var weekend = calHelper._TT["WEEKEND"];  var dates = this.multiple ? (this.datesCells = {}) : null;  for (var i = 0; i < 6; ++i, row = row.nextSibling) {   var cell = row.firstChild;   if (this.weekNumbers) {    cell.className = "day wn";    cell.innerHTML = date.getWeekNumber();    cell = cell.nextSibling;   }   row.className = "daysrow";   var hasdays = false, iday, dpos = ar_days[i] = [];   for (var j = 0; j < 7; ++j, cell = cell.nextSibling, date.setDate(iday + 1)) {    iday = date.getDate();    var wday = date.getDay();    cell.className = "day";    cell.pos = i << 4 | j;    dpos[j] = cell;    var current_month = (date.getMonth() == month);    if (!current_month) {     if (this.showsOtherMonths) {      cell.className += " othermonth";      cell.otherMonth = true;     } else {      cell.className = "emptycell";      cell.innerHTML = "&nbsp;";      cell.disabled = true;      continue;     }    } else {     cell.otherMonth = false;     hasdays = true;    }    cell.disabled = false;    cell.innerHTML = this.getDateText ? this.getDateText(date, iday) : iday;    if (dates)     dates[date.print("%Y%m%d")] = cell;    if (this.getDateStatus) {     var status = this.getDateStatus(date, year, month, iday);     if (this.getDateToolTip) {      var toolTip = this.getDateToolTip(date, year, month, iday);      if (toolTip)       cell.title = toolTip;     }     if (status === true) {      cell.className += " disabled";      cell.disabled = true;     } else {      if (/disabled/i.test(status))       cell.disabled = true;      cell.className += " " + status;     }    }    if (!cell.disabled) {     cell.caldate = new Date(date);     cell.ttip = "_";     if (!this.multiple && current_month         && iday == mday && this.hiliteToday) {      cell.className += " selected";      this.currentDateEl = cell;     }     if (date.getFullYear() == TY &&         date.getMonth() == TM &&         iday == TD) {      cell.className += " today";      cell.ttip += calHelper._TT["PART_TODAY"];     }     if (weekend.indexOf(wday.toString()) != -1)      cell.className += cell.otherMonth ? " oweekend" : " weekend";    }   }   if (!(hasdays || this.showsOtherMonths))    row.className = "emptyrow";  }  this.title.innerHTML = calHelper._MN[month] + ", " + year;  this.onSetTime();  this.table.style.visibility = "visible";  this._initMultipleDates();     }, _initMultipleDates:function() {  if (this.multiple) {   for (var i in this.multiple) {    var cell = this.datesCells[i];    var d = this.multiple[i];    if (!d)     continue;    if (cell)     cell.className += " selected";   }  } }, _toggleMultipleDate:function(date) {  if (this.multiple) {   var ds = date.print("%Y%m%d");   var cell = this.datesCells[ds];   if (cell) {    var d = this.multiple[ds];    if (!d) {     cdh.addClass(cell, "selected");     this.multiple[ds] = date;    } else {     cdh.removeClass(cell, "selected");     delete this.multiple[ds];    }   }  } }, setDateToolTipHandler:function (unaryFunction) {  this.getDateToolTip = unaryFunction; }, setDate:function (date) {  if (!date.equalsTo(this.date)) {   this._init(this.firstDayOfWeek, date);  } }, refresh:function () {  this._init(this.firstDayOfWeek, this.date); }, setFirstDayOfWeek:function (firstDayOfWeek) {  this._init(firstDayOfWeek, this.date);  this._displayWeekdays(); }, setRange:function (a, z) {  this.minYear = a;  this.maxYear = z; }, callHandler:function () {  if (this.onSelected) {   this.onSelected(this, this.date.print(this.dateFormat));  } }, callCloseHandler:function () {  if (this.onClose) {   this.onClose(this);  }  this.hideShowCovered(); }, destroy:function () {  var el = this.element.parentNode;  el.removeChild(this.element);  calMgr._C = null;  window._dynarch_popupCalendar = null; }, reparent:function(new_parent) {  var el = this.element;  el.parentNode.removeChild(el);  new_parent.appendChild(el); }, show:function () {  var rows = this.table.getElementsByTagName("tr");  for (var i = rows.length; i > 0;) {   var row = rows[--i];   cdh.removeClass(row, "rowhilite");   var cells = row.getElementsByTagName("td");   for (var j = cells.length; j > 0;) {    var cell = cells[--j];    cdh.removeClass(cell, "hilite");    cdh.removeClass(cell, "active");   }  }  this.element.style.display = "block";  this.hidden = false;  if (this.isPopup) {   window._dynarch_popupCalendar = this;   cdh.addEvent(document, "keydown", calEvent._keyEvent);   cdh.addEvent(document, "keypress", calEvent._keyEvent);   cdh.addEvent(document, "mousedown", calEvent._checkCalendar);  }  this.hideShowCovered(); }, hide:function () {  if (this.isPopup) {   cdh.removeEvent(document, "keydown", calEvent._keyEvent);   cdh.removeEvent(document, "keypress", calEvent._keyEvent);   cdh.removeEvent(document, "mousedown", calEvent._checkCalendar);  }  this.element.style.display = "none";  this.hidden = true;  this.hideShowCovered();  System.fly(this.element).remove();    System.CG();   }, showAt:function (x, y) {  var s = this.element.style;  s.left = x + "px";  s.top = y + "px";  this.show(); }, showAtElement:function (el, opts) {  var self = this;  var p = cdh.getAbsolutePos(el);  if (!opts || typeof opts != "string") {   this.showAt(p.x, p.y + el.offsetHeight);   return true;  }  function fixPosition(box) {   if (box.x < 0)    box.x = 0;   if (box.y < 0)    box.y = 0;   var cp = document.createElement("div");   var s = cp.style;   s.position = "absolute";   s.right = s.bottom = s.width = s.height = "0px";   document.body.appendChild(cp);   var br = cdh.getAbsolutePos(cp);   document.body.removeChild(cp);   if (cdh.is_ie) {    br.y += document.body.scrollTop;    br.x += document.body.scrollLeft;   } else {    br.y += window.scrollY;    br.x += window.scrollX;   }   var tmp = box.x + box.width - br.x;   if (tmp > 0) box.x -= tmp;   tmp = box.y + box.height - br.y;   if (tmp > 0) box.y -= tmp;  };  this.element.style.display = "block";  calMgr.continuation_for_the_fucking_khtml_browser = function() {   var w = self.element.offsetWidth;   var h = self.element.offsetHeight;   self.element.style.display = "none";   var valign = opts.substr(0, 1);   var halign = "l";   if (opts.length > 1) {    halign = opts.substr(1, 1);   }      switch (valign) {       case "T": p.y -= h; break;       case "B": p.y += el.offsetHeight; break;       case "C": p.y += (el.offsetHeight - h) / 2; break;       case "t": p.y += el.offsetHeight - h; break;       case "b": break;    }      switch (halign) {       case "L": p.x -= w; break;       case "R": p.x += el.offsetWidth; break;       case "C": p.x += (el.offsetWidth - w) / 2; break;       case "l": p.x += el.offsetWidth - w; break;       case "r": break;    }   p.width = w;   p.height = h + 40;   self.monthsCombo.style.display = "none";   fixPosition(p);   self.showAt(p.x, p.y);  };  if (cdh.is_khtml)   setTimeout("Wade.component.CalendarManager.continuation_for_the_fucking_khtml_browser()", 10);  else   calMgr.continuation_for_the_fucking_khtml_browser(); }, setDateFormat:function (str) {  this.dateFormat = str; }, setTtDateFormat:function (str) {  this.ttDateFormat = str; }, parseDate:function(str, fmt) {  if (!fmt)   fmt = this.dateFormat;  this.setDate(Date.parseDate(str, fmt)); }, hideShowCovered:function () {  if (!cdh.is_ie && !cdh.is_opera)   return;  function getVisib(obj){   var value = obj.style.visibility;   if (!value) {    if (document.defaultView && typeof (document.defaultView.getComputedStyle) == "function") {      if (!calMgr.is_khtml)      value = document.defaultView.       getComputedStyle(obj, "").getPropertyValue("visibility");     else      value = '';    } else if (obj.currentStyle) {      value = obj.currentStyle.visibility;    } else     value = '';   }   return value;  };   var tags = new Array("applet", "iframe", "select");  var el = this.element;   var p = cdh.getAbsolutePos(el);  var EX1 = p.x;  var EX2 = el.offsetWidth + EX1;  var EY1 = p.y;  var EY2 = el.offsetHeight + EY1;   for (var k = tags.length; k > 0; ) {   var ar = document.getElementsByTagName(tags[--k]);   var cc = null;    for (var i = ar.length; i > 0;) {    cc = ar[--i];     p = cdh.getAbsolutePos(cc);    var CX1 = p.x;    var CX2 = cc.offsetWidth + CX1;    var CY1 = p.y;    var CY2 = cc.offsetHeight + CY1;     if (this.hidden || (CX1 > EX2) || (CX2 < EX1) || (CY1 > EY2) || (CY2 < EY1)) {     if (!cc.__msh_save_visibility) {      cc.__msh_save_visibility = getVisib(cc);     }     cc.style.visibility = cc.__msh_save_visibility;    } else {     if (!cc.__msh_save_visibility) {      cc.__msh_save_visibility = getVisib(cc);     }     cc.style.visibility = "hidden";    }   }  } }, _displayWeekdays:function () {  var fdow = this.firstDayOfWeek;  var cell = this.firstdayname;  var weekend = calHelper._TT["WEEKEND"];  for (var i = 0; i < 7; ++i) {   cell.className = "day name";   var realday = (i + fdow) % 7;   if (i) {    cell.ttip = calHelper._TT["DAY_FIRST"].replace("%s", calHelper._DN[realday]);    cell.navtype = 100;    cell.calendar = this;    cell.fdow = realday;    calMgr._add_evs(cell);   }   if (weekend.indexOf(realday.toString()) != -1) {    cdh.addClass(cell, "weekend");   }   cell.innerHTML = calHelper._SDN[(i + fdow) % 7];   cell = cell.nextSibling;  } }, _hideCombos:function () {  this.monthsCombo.style.display = "none";  this.yearsCombo.style.display = "none"; }, _dragStart:function(ev) {  if (this.dragging) {   return;  }  this.dragging = true;  var posX;  var posY;  if (cdh.is_ie) {   posY = window.event.clientY + document.body.scrollTop;   posX = window.event.clientX + document.body.scrollLeft;  } else {   posY = ev.clientY + window.scrollY;   posX = ev.clientX + window.scrollX;  }  var st = this.element.style;  this.xOffs = posX - parseInt(st.left);  this.yOffs = posY - parseInt(st.top);  cdh.addEvent(document, "mousemove", calEvent.calDragIt);  cdh.addEvent(document, "mouseup", calEvent.calDragEnd); }}; Wade.component.Calendar.prototype.setDateStatusHandler=Wade.component.Calendar.prototype.setDisabledHandler=function(unaryFunction) { this.getDateStatus = unaryFunction;};} })();